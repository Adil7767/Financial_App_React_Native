"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

var _utils = require("./utils");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useScrollbarSize = function useScrollbarSize() {
  var _useState = (0, _react.useState)({
    height: 0,
    width: 0
  }),
      _useState2 = _slicedToArray(_useState, 2),
      dimensions = _useState2[0],
      setDimensions = _useState2[1];

  var element = (0, _react.useRef)(null); // initialize resize event handler and state when mounted

  (0, _react.useEffect)(function () {
    var getElement = function getElement() {
      if (element.current == null) {
        // element was not created yet -- initialize
        element.current = document.createElement('div');
        element.current.style.width = '99px';
        element.current.style.height = '99px';
        element.current.style.overflow = 'scroll';
        element.current.style.position = 'absolute';
        element.current.style.top = '-9999px';
        element.current.setAttribute('aria-hidden', 'true');
        element.current.setAttribute('role', 'presentation');
      }

      return element.current;
    };

    var updateState = function updateState() {
      var _getElement = getElement(),
          offsetHeight = _getElement.offsetHeight,
          clientHeight = _getElement.clientHeight,
          offsetWidth = _getElement.offsetWidth,
          clientWidth = _getElement.clientWidth;

      var scrollbarHeight = offsetHeight - clientHeight;
      var scrollbarWidth = offsetWidth - clientWidth;
      setDimensions(function (currentDimensions) {
        var height = currentDimensions.height,
            width = currentDimensions.width;
        return height !== scrollbarHeight || width !== scrollbarWidth ? {
          height: scrollbarHeight,
          width: scrollbarWidth
        } : currentDimensions;
      });
    };

    var handleResize = (0, _utils.debounce)(updateState, 100); // initialize

    window.addEventListener('resize', handleResize);
    document.body.appendChild(getElement());
    updateState();
    var elementToRemove = getElement(); // cleanup

    return function () {
      handleResize.cancel();
      window.removeEventListener('resize', handleResize);
      document.body.removeChild(elementToRemove);
    };
  }, []);
  return dimensions;
};

var _default = useScrollbarSize;
exports.default = _default;