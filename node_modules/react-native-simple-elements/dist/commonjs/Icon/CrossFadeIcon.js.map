{"version":3,"sources":["CrossFadeIcon.tsx"],"names":["CrossFadeIconWrapperView","styled","View","alignItems","justifyContent","CrossFadeIcon","color","size","icon","theme","React","useContext","ThemeContext","currentIcon","setCurrentIcon","useState","previousIcon","setPreviousIcon","current","fade","useRef","Animated","Value","scale","animation","useEffect","setValue","timing","duration","toValue","useNativeDriver","start","opacityPrev","opacityNext","interpolate","inputRange","outputRange","rotatePrev","rotateNext","width","height","position","top","left","right","bottom","opacity","transform","rotate"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Animated } from \"react-native\";\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\nimport styled from \"styled-components/native\";\nimport Icon, { isValidIcon, isEqualIcon } from \"./SvgIcon\";\n\nconst CrossFadeIconWrapperView = styled.View({\n    alignItems: \"center\",\n    justifyContent: \"center\",\n});\n\ntype Props = {\n    /**\n     * Icon to display for the `CrossFadeIcon`.\n     */\n    icon: React.ReactElement;\n    /**\n     * Color of the icon.\n     */\n    color: string;\n    /**\n     * Size of the icon.\n     */\n    size: number;\n    /**\n     * @optional\n     */\n    theme?: DefaultTheme;\n};\n\nconst CrossFadeIcon = ({ color, size, icon }: Props) => {\n    const theme = React.useContext(ThemeContext);\n    const [currentIcon, setCurrentIcon] = React.useState<React.ReactElement>(\n        () => icon\n    );\n    const [previousIcon, setPreviousIcon] = React.useState<React.ReactElement | null>(\n        null\n    );\n    const { current: fade } = React.useRef<Animated.Value>(new Animated.Value(1));\n\n    const { scale } = theme.animation;\n\n    if (currentIcon !== icon) {\n        setPreviousIcon(() => currentIcon);\n        setCurrentIcon(() => icon);\n    }\n\n    React.useEffect(() => {\n        if (isValidIcon(previousIcon) && !isEqualIcon(previousIcon, currentIcon)) {\n            fade.setValue(1);\n\n            Animated.timing(fade, {\n                duration: scale * 200,\n                toValue: 0,\n                useNativeDriver: true,\n            }).start();\n        }\n    }, [currentIcon, previousIcon, fade, scale]);\n\n    const opacityPrev = fade;\n    const opacityNext = previousIcon\n        ? fade.interpolate({\n            inputRange: [0, 1],\n            outputRange: [1, 0],\n        })\n        : 1;\n\n    const rotatePrev = fade.interpolate({\n        inputRange: [0, 1],\n        outputRange: [\"-90deg\", \"0deg\"],\n    });\n\n    const rotateNext = previousIcon\n        ? fade.interpolate({\n            inputRange: [0, 1],\n            outputRange: [\"0deg\", \"-180deg\"],\n        })\n        : \"0deg\";\n\n    return (\n        <CrossFadeIconWrapperView\n            style={{\n                width: size,\n                height: size,\n            }}\n            testID=\"icon_fade_view\"\n        >\n            {previousIcon ? (\n                <Animated.View\n                    style={[\n                        {\n                            position: \"absolute\",\n                            top: 0,\n                            left: 0,\n                            right: 0,\n                            bottom: 0,\n                        },\n                        {\n                            opacity: opacityPrev,\n                            transform: [{ rotate: rotatePrev }],\n                        },\n                    ]}\n                    testID=\"icon_fade_animated_view\"\n                >\n                    <Icon icon={previousIcon} size={size} color={color} />\n                </Animated.View>\n            ) : null}\n            <Animated.View\n                style={[\n                    {\n                        position: \"absolute\",\n                        top: 0,\n                        left: 0,\n                        right: 0,\n                        bottom: 0,\n                    },\n                    {\n                        opacity: opacityNext,\n                        transform: [{ rotate: rotateNext }],\n                    },\n                ]}\n                testID=\"icon_fade_animated_view\"\n            >\n                <Icon icon={currentIcon} size={size} color={color} />\n            </Animated.View>\n        </CrossFadeIconWrapperView>\n    );\n};\n\nexport default CrossFadeIcon;\n"]}