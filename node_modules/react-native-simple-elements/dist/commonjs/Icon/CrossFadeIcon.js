"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _styledComponents = require("styled-components");

var _native = _interopRequireDefault(require("styled-components/native"));

var _SvgIcon = _interopRequireWildcard(require("./SvgIcon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const CrossFadeIconWrapperView = _native.default.View({
  alignItems: "center",
  justifyContent: "center"
});

const CrossFadeIcon = ({
  color,
  size,
  icon
}) => {
  const theme = React.useContext(_styledComponents.ThemeContext);
  const [currentIcon, setCurrentIcon] = React.useState(() => icon);
  const [previousIcon, setPreviousIcon] = React.useState(null);
  const {
    current: fade
  } = React.useRef(new _reactNative.Animated.Value(1));
  const {
    scale
  } = theme.animation;

  if (currentIcon !== icon) {
    setPreviousIcon(() => currentIcon);
    setCurrentIcon(() => icon);
  }

  React.useEffect(() => {
    if ((0, _SvgIcon.isValidIcon)(previousIcon) && !(0, _SvgIcon.isEqualIcon)(previousIcon, currentIcon)) {
      fade.setValue(1);

      _reactNative.Animated.timing(fade, {
        duration: scale * 200,
        toValue: 0,
        useNativeDriver: true
      }).start();
    }
  }, [currentIcon, previousIcon, fade, scale]);
  const opacityPrev = fade;
  const opacityNext = previousIcon ? fade.interpolate({
    inputRange: [0, 1],
    outputRange: [1, 0]
  }) : 1;
  const rotatePrev = fade.interpolate({
    inputRange: [0, 1],
    outputRange: ["-90deg", "0deg"]
  });
  const rotateNext = previousIcon ? fade.interpolate({
    inputRange: [0, 1],
    outputRange: ["0deg", "-180deg"]
  }) : "0deg";
  return /*#__PURE__*/React.createElement(CrossFadeIconWrapperView, {
    style: {
      width: size,
      height: size
    },
    testID: "icon_fade_view"
  }, previousIcon ? /*#__PURE__*/React.createElement(_reactNative.Animated.View, {
    style: [{
      position: "absolute",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    }, {
      opacity: opacityPrev,
      transform: [{
        rotate: rotatePrev
      }]
    }],
    testID: "icon_fade_animated_view"
  }, /*#__PURE__*/React.createElement(_SvgIcon.default, {
    icon: previousIcon,
    size: size,
    color: color
  })) : null, /*#__PURE__*/React.createElement(_reactNative.Animated.View, {
    style: [{
      position: "absolute",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    }, {
      opacity: opacityNext,
      transform: [{
        rotate: rotateNext
      }]
    }],
    testID: "icon_fade_animated_view"
  }, /*#__PURE__*/React.createElement(_SvgIcon.default, {
    icon: currentIcon,
    size: size,
    color: color
  })));
};

var _default = CrossFadeIcon;
exports.default = _default;
//# sourceMappingURL=CrossFadeIcon.js.map