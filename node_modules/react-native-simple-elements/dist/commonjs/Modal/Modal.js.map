{"version":3,"sources":["Modal.tsx"],"names":["WindowHeight","Dimensions","get","height","SUPPORTED_ORIENTATIONS","defaultProps","animationType","openDuration","closeDuration","closeOnDragDown","dragFromTopOnly","closeOnPressBack","keyboardAvoidingViewEnabled","Platform","OS","customStyles","onDismiss","onOpen","children","backdropColor","AlertDialog","visible","dismissable","contentContainerStyle","contentStyle","isVisible","setIsVisible","React","useState","theme","useContext","ThemeContext","opacityValue","useRef","Animated","Value","current","pan","ValueXY","panResponder","undefined","useEffect","setModalVisible","timing","toValue","duration","useNativeDriver","start","setValue","x","y","createPanResponder","PanResponder","create","onStartShouldSetPanResponder","onPanResponderMove","e","gestureState","dy","event","onPanResponderRelease","spring","close","panStyle","transform","getTranslateTransform","flex","backgroundColor","wrapper","styles","backdrop","colors","opacity","panHandlers","width","overflow","flexDirection","position","top","bottom","left","right","contentContainer","container","alignItems","borderRadius","margin","draggableIcon","StyleSheet","content","marginHorizontal"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    View,\r\n    KeyboardAvoidingView,\r\n    Modal as RNModal,\r\n    TouchableWithoutFeedback,\r\n    Animated,\r\n    PanResponder,\r\n    Platform,\r\n    StyleProp,\r\n    ViewStyle,\r\n    StyleSheet,\r\n    Dimensions\r\n} from \"react-native\";\r\nimport { ThemeContext } from \"styled-components\";\r\n\r\nconst WindowHeight = Dimensions.get(\"window\").height;\r\n\r\nconst SUPPORTED_ORIENTATIONS = [\r\n    \"portrait\",\r\n    \"portrait-upside-down\",\r\n    \"landscape\",\r\n    \"landscape-left\",\r\n    \"landscape-right\"\r\n];\r\n\r\nexport type Props = {\r\n    animationType?: \"none\" | \"slide\" | \"fade\",\r\n    visible: boolean,\r\n    dismissable?: boolean,\r\n    openDuration?: number,\r\n    closeDuration?: number,\r\n    closeOnDragDown?: boolean,\r\n    dragFromTopOnly?: boolean,\r\n    closeOnPressBack?: boolean,\r\n    keyboardAvoidingViewEnabled?: boolean,\r\n    customStyles?: Record<string, unknown>,\r\n    onDismiss?: (evt?) => void,\r\n    onOpen?: (evt?) => void,\r\n    children?: React.ReactNode,\r\n    backdropColor?: string,\r\n    contentContainerStyle?: StyleProp<ViewStyle>,\r\n    contentStyle?: StyleProp<ViewStyle>,\r\n};\r\n\r\n// type State = {\r\n//     animatedHeight: Animated.Value,\r\n//     pan: Animated.ValueXY,\r\n//     modalVisible: boolean,\r\n// }\r\n\r\nconst defaultProps = {\r\n    animationType: \"none\",\r\n    openDuration: 100,\r\n    closeDuration: 100,\r\n    closeOnDragDown: false,\r\n    dragFromTopOnly: false,\r\n    closeOnPressBack: true,\r\n    keyboardAvoidingViewEnabled: Platform.OS === \"ios\",\r\n    customStyles: {},\r\n    onDismiss: null,\r\n    onOpen: null,\r\n    children: <View />,\r\n    backdropColor: \"#00000077\",\r\n};\r\n\r\nconst AlertDialog = ({\r\n    visible,\r\n    dismissable,\r\n    animationType,\r\n    closeOnDragDown,\r\n    dragFromTopOnly,\r\n    closeOnPressBack,\r\n    children,\r\n    customStyles,\r\n    keyboardAvoidingViewEnabled,\r\n    openDuration,\r\n    closeDuration,\r\n    onOpen,\r\n    onDismiss,\r\n    backdropColor,\r\n    contentContainerStyle,\r\n    contentStyle,\r\n}: Props) => {\r\n\r\n    const [ isVisible, setIsVisible ] = React.useState(false);\r\n    const theme = React.useContext(ThemeContext);\r\n    const opacityValue = React.useRef(new Animated.Value(0)).current;\r\n\r\n    const pan = React.useRef(new Animated.ValueXY());\r\n\r\n    const panResponder = React.useRef(undefined);\r\n\r\n    React.useEffect(() => {\r\n        if (!isVisible && visible) {\r\n            setModalVisible(true);\r\n        } else if (isVisible && !visible) {\r\n            setModalVisible(false);\r\n        }\r\n    }, [ visible ]);\r\n\r\n    // state: State = {\r\n    //     modalVisible: false,\r\n    //     animatedHeight: new Animated.Value(0),\r\n    //     pan: new Animated.ValueXY()\r\n    // };\r\n\r\n    // panResponder;\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n\r\n    //     this.createPanResponder(props);\r\n    // }\r\n\r\n    const setModalVisible = (visible) => {\r\n        // const { height, minClosingHeight, openDuration, closeDuration, onDismiss, onOpen } = this.props;\r\n        // const { animatedHeight, pan } = this.state;\r\n        if (visible) {\r\n            setIsVisible(visible);\r\n            if (typeof onOpen === \"function\") onOpen();\r\n            Animated.timing(opacityValue, {\r\n                toValue: 1,\r\n                duration: openDuration || 100,\r\n                useNativeDriver: true,\r\n            }).start();\r\n        } else {\r\n            Animated.timing(opacityValue, {\r\n                toValue: 0,\r\n                duration: closeDuration || 100,\r\n                useNativeDriver: true,\r\n            })\r\n                .start(() => {\r\n                    pan.current.setValue({ x: 0, y: 0 });\r\n                    setIsVisible(visible);\r\n\r\n                    // this.setState({\r\n                    //     modalVisible: visible,\r\n                    //     animatedHeight: new Animated.Value(0)\r\n                    // });\r\n\r\n                    if (typeof onDismiss === \"function\") onDismiss();\r\n                });\r\n        }\r\n    };\r\n\r\n    const createPanResponder = () => {\r\n        // const { closeOnDragDown, height } = props;\r\n        // const { pan } = this.state;\r\n        panResponder.current = PanResponder.create({\r\n            onStartShouldSetPanResponder: () => closeOnDragDown,\r\n            onPanResponderMove: (e, gestureState) => {\r\n                if (gestureState.dy > 0) {\r\n                    Animated.event([null, { dy: pan.current.y }], { useNativeDriver: false })(e, gestureState);\r\n                }\r\n            },\r\n            onPanResponderRelease: (e, gestureState) => {\r\n                // if (height / 4 - gestureState.dy < 0) {\r\n                if (gestureState.dy > 15) {\r\n                    setModalVisible(false);\r\n                } else {\r\n                    Animated.spring(pan.current, { toValue: { x: 0, y: 0 }, useNativeDriver: false }).start();\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    // const open = (props?) => {\r\n    //     setModalVisible(true, props);\r\n    // }\r\n\r\n    const close = () => {\r\n        setModalVisible(false);\r\n    };\r\n\r\n    // const { animatedHeight, pan } = this.state;\r\n\r\n    if (!visible && !panResponder.current) {\r\n        createPanResponder();\r\n    }\r\n\r\n    const panStyle = {\r\n        transform: pan.current.getTranslateTransform()\r\n    };\r\n\r\n    return (\r\n        <RNModal\r\n            transparent\r\n            animationType={animationType}\r\n            visible={isVisible}\r\n            dismissable={dismissable}\r\n            // @ts-ignore\r\n            supportedOrientations={SUPPORTED_ORIENTATIONS}\r\n            onRequestClose={() => {\r\n                if (closeOnPressBack) setModalVisible(false);\r\n            }}\r\n        >\r\n            <KeyboardAvoidingView\r\n                enabled={keyboardAvoidingViewEnabled}\r\n                behavior=\"padding\"\r\n                style={[\r\n                    {\r\n                        flex: 1,\r\n                        backgroundColor: backdropColor,\r\n                    },\r\n                    customStyles.wrapper,\r\n                ]}\r\n            >\r\n                <TouchableWithoutFeedback\r\n                    // accessibilityLabel={overlayAccessibilityLabel}\r\n                    accessibilityRole=\"button\"\r\n                    disabled={!dismissable}\r\n                    onPress={dismissable ? close : undefined}\r\n                >\r\n                    <Animated.View\r\n                        style={[\r\n                            styles.backdrop,\r\n                            {\r\n                                flex: 1,\r\n                            },\r\n                            { backgroundColor: theme.colors.backdrop, opacity: opacityValue },\r\n                        ]}\r\n                    />\r\n                </TouchableWithoutFeedback>\r\n                <Animated.View\r\n                    {...(!dragFromTopOnly && panResponder.current?.panHandlers ? panResponder.current.panHandlers : {} )}\r\n                    style={[\r\n                        panStyle,\r\n                        {\r\n                            backgroundColor: theme.colors.backdrop,\r\n                            width: \"100%\",\r\n                            overflow: \"hidden\"\r\n                        },\r\n                        {\r\n                            flexDirection: \"column\",\r\n                            flex: 1,\r\n                            position: \"absolute\",\r\n                            top: 0,\r\n                            bottom: 0,\r\n                            left: 0,\r\n                            right: 0,\r\n                        },\r\n                        styles.contentContainer,\r\n                        contentContainerStyle,\r\n                        customStyles.container\r\n                    ]}\r\n                    pointerEvents=\"box-none\"\r\n                >\r\n                    {closeOnDragDown && (\r\n                        <View\r\n                            {...(dragFromTopOnly && panResponder.current?.panHandlers ? panResponder.current.panHandlers : {} )}\r\n                            style={{\r\n                                width: \"100%\",\r\n                                alignItems: \"center\",\r\n                                backgroundColor: \"transparent\"\r\n                            }}\r\n                        >\r\n                            <View style={[\r\n                                {\r\n                                    width: 35,\r\n                                    height: 5,\r\n                                    borderRadius: 5,\r\n                                    margin: 10,\r\n                                    backgroundColor: \"#ccc\",\r\n                                },\r\n                                customStyles.draggableIcon,\r\n                            ]} />\r\n                        </View>\r\n                    )}\r\n                    <View\r\n                        style={{\r\n                            flex: 1,\r\n                        }}\r\n                        pointerEvents=\"none\"\r\n                    >\r\n                    </View>\r\n                    {children}\r\n                    <View\r\n                        style={{\r\n                            flex: 1,\r\n                        }}\r\n                        pointerEvents=\"none\"\r\n                    >\r\n                    </View>\r\n                </Animated.View>\r\n            </KeyboardAvoidingView>\r\n        </RNModal>\r\n    );\r\n};\r\n\r\nAlertDialog.defaultProps = defaultProps;\r\n\r\nexport default AlertDialog;\r\n\r\nconst styles = StyleSheet.create({\r\n    backdrop: {\r\n\r\n    },\r\n    contentContainer: {\r\n        height: WindowHeight,\r\n        alignItems: \"center\",\r\n    },\r\n    content: {\r\n        marginHorizontal: 16,\r\n    },\r\n});\r\n"]}