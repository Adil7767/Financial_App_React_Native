{"version":3,"sources":["Modalbk.tsx"],"names":["defaultProps","dismissable","visible","overlayAccessibilityLabel","DEFAULT_DURATION","TOP_INSET","BOTTOM_INSET","Modal","onDismiss","children","style","contentContainerStyle","rendered","setRendered","React","useState","opacity","Animated","Value","theme","useContext","ThemeContext","colors","useEffect","showModal","hideModal","BackHandler","removeEventListener","handleBack","addEventListener","scale","animation","timing","toValue","duration","easing","Easing","out","cubic","useNativeDriver","start","finished","StyleSheet","absoluteFill","undefined","styles","backdrop","backgroundColor","wrapper","marginTop","marginBottom","content","create","flex","absoluteFillObject","justifyContent"],"mappings":";;;;;;;AAAA;;AACA;;AAUA;;AAIA;;AACA;;;;;;;;AAsCA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAE,IADI;AAEjBC,EAAAA,OAAO,EAAE,KAFQ;AAGjBC,EAAAA,yBAAyB,EAAE;AAHV,CAArB;AAMA,MAAMC,gBAAgB,GAAG,GAAzB;AACA,MAAMC,SAAS,GAAG,kDAAmB,IAAnB,CAAlB;AACA,MAAMC,YAAY,GAAG,+CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,KAAK,GAAG,CAAC;AACXL,EAAAA,OADW;AAEXD,EAAAA,WAFW;AAGXO,EAAAA,SAHW;AAIXC,EAAAA,QAJW;AAKXC,EAAAA,KALW;AAMXC,EAAAA,qBANW;AAOXR,EAAAA;AAPW,CAAD,KAQD;AAET,QAAM,CAAES,QAAF,EAAYC,WAAZ,IAA4BC,KAAK,CAACC,QAAN,CAAeb,OAAf,CAAlC;AACA,QAAM,CAAEc,OAAF,IAAeF,KAAK,CAACC,QAAN,CAAe,IAAIE,sBAASC,KAAb,CAAmBhB,OAAO,GAAG,CAAH,GAAO,CAAjC,CAAf,CAArB;AAEA,QAAMiB,KAAK,GAAGL,KAAK,CAACM,UAAN,CAAiBC,8BAAjB,CAAd;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAaH,KAAnB;AAEAL,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AAClB,QAAIrB,OAAJ,EAAa;AACTW,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAW,MAAAA,SAAS;AACZ,KAHD,MAGO;AACHC,MAAAA,SAAS;AACZ;;AAED,WAAO,MAAM;AACTC,+BAAYC,mBAAZ,CAAgC,mBAAhC,EAAqDC,UAArD;AACH,KAFD;AAGH,GAXD,EAWG,CAAE1B,OAAF,CAXH;;AAaA,QAAM0B,UAAU,GAAG,MAAM;AACrB,QAAI3B,WAAJ,EAAiB;AACbwB,MAAAA,SAAS;AACZ;;AACD,WAAO,IAAP;AACH,GALD;;AAOA,QAAMD,SAAS,GAAG,MAAM;AACpBE,6BAAYC,mBAAZ,CAAgC,mBAAhC,EAAqDC,UAArD;;AACAF,6BAAYG,gBAAZ,CAA6B,mBAA7B,EAAkDD,UAAlD;;AAEA,UAAM;AAAEE,MAAAA;AAAF,QAAYX,KAAK,CAACY,SAAxB;;AAEAd,0BAASe,MAAT,CAAgBhB,OAAhB,EAAyB;AACrBiB,MAAAA,OAAO,EAAE,CADY;AAErBC,MAAAA,QAAQ,EAAEJ,KAAK,GAAG1B,gBAFG;AAGrB+B,MAAAA,MAAM,EAAEC,oBAAOC,GAAP,CAAWD,oBAAOE,KAAlB,CAHa;AAIrBC,MAAAA,eAAe,EAAE;AAJI,KAAzB,EAKGC,KALH;AAMH,GAZD;;AAcA,QAAMf,SAAS,GAAG,MAAM;AACpBC,6BAAYC,mBAAZ,CAAgC,mBAAhC,EAAqDC,UAArD;;AAEA,UAAM;AAAEE,MAAAA;AAAF,QAAYX,KAAK,CAACY,SAAxB;;AAEAd,0BAASe,MAAT,CAAgBhB,OAAhB,EAAyB;AACrBiB,MAAAA,OAAO,EAAE,CADY;AAErBC,MAAAA,QAAQ,EAAEJ,KAAK,GAAG1B,gBAFG;AAGrB+B,MAAAA,MAAM,EAAEC,oBAAOC,GAAP,CAAWD,oBAAOE,KAAlB,CAHa;AAIrBC,MAAAA,eAAe,EAAE;AAJI,KAAzB,EAKGC,KALH,CAKS,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAkB;AACvB,UAAI,CAACA,QAAL,EAAe;AACX;AACH;;AAED,UAAIvC,OAAO,IAAIM,SAAf,EAA0B;AACtBA,QAAAA,SAAS;AACZ;;AAED,UAAIN,OAAJ,EAAa;AACTsB,QAAAA,SAAS;AACZ,OAFD,MAEO;AACHX,QAAAA,WAAW,CAAC,KAAD,CAAX;AACH;AACJ,KAnBD;AAoBH,GAzBD;;AA2BA,MAAI,CAACD,QAAL,EAAe,OAAO,IAAP;AAEf,sBACI,oBAAC,qBAAD,CAAU,IAAV;AACI,IAAA,aAAa,EAAEV,OAAO,GAAG,MAAH,GAAY,MADtC;AAEI,IAAA,wBAAwB,MAF5B;AAGI,IAAA,uBAAuB,EAAC,QAH5B;AAII,IAAA,KAAK,EAAEwC,wBAAWC,YAJtB;AAKI,IAAA,qBAAqB,EAAElB;AAL3B,kBAOI,oBAAC,qCAAD;AACI,IAAA,kBAAkB,EAAEtB,yBADxB;AAEI,IAAA,iBAAiB,EAAC,QAFtB;AAGI,IAAA,QAAQ,EAAE,CAACF,WAHf;AAII,IAAA,OAAO,EAAEA,WAAW,GAAGwB,SAAH,GAAemB;AAJvC,kBAMI,oBAAC,qBAAD,CAAU,IAAV;AACI,IAAA,KAAK,EAAE,CACHC,MAAM,CAACC,QADJ,EAEH;AAAEC,MAAAA,eAAe,EAAEzB,MAAM,CAACwB,QAA1B;AAAoC9B,MAAAA;AAApC,KAFG;AADX,IANJ,CAPJ,eAoBI,oBAAC,iBAAD;AACI,IAAA,KAAK,EAAE,CACH6B,MAAM,CAACG,OADJ,EAEH;AAAEC,MAAAA,SAAS,EAAE5C,SAAb;AAAwB6C,MAAAA,YAAY,EAAE5C;AAAtC,KAFG,EAGHI,KAHG,CADX;AAMI,IAAA,aAAa,EAAC;AANlB,kBAQI,oBAAC,gBAAD;AACI,IAAA,KAAK,EACD,CAAC;AAAEM,MAAAA;AAAF,KAAD,EAAc6B,MAAM,CAACM,OAArB,EAA8BxC,qBAA9B;AAFR,KAOKF,QAPL,CARJ,CApBJ,CADJ;AAyCH,CAxHD;;AA0HAF,KAAK,CAACP,YAAN,GAAqBA,YAArB;eAEeO,K;;;AAEf,MAAMsC,MAAM,GAAGH,wBAAWU,MAAX,CAAkB;AAC7BN,EAAAA,QAAQ,EAAE;AACNO,IAAAA,IAAI,EAAE;AADA,GADmB;AAI7BL,EAAAA,OAAO,EAAE,EACL,GAAGN,wBAAWY,kBADT;AAELC,IAAAA,cAAc,EAAE;AAFX,GAJoB;AAQ7BJ,EAAAA,OAAO,EAAE;AACLJ,IAAAA,eAAe,EAAE,aADZ;AAELQ,IAAAA,cAAc,EAAE;AAFX;AARoB,CAAlB,CAAf","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    Animated,\r\n    BackHandler,\r\n    Easing,\r\n    StyleProp,\r\n    StyleSheet,\r\n    TouchableWithoutFeedback,\r\n    ViewStyle,\r\n    View,\r\n} from \"react-native\";\r\nimport {\r\n    getStatusBarHeight,\r\n    getBottomSpace,\r\n} from \"react-native-iphone-x-helper\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\nimport Surface from \"../Surface\";\r\n\r\ntype Props = {\r\n    /**\r\n     * Determines whether clicking outside the modal dismiss it.\r\n     */\r\n    dismissable?: boolean;\r\n    /**\r\n     * Callback that is called when the user dismisses the modal.\r\n     */\r\n    onDismiss?: () => void;\r\n    /**\r\n     * Accessibility label for the overlay. This is read by the screen reader when the user taps outside the modal.\r\n     */\r\n    overlayAccessibilityLabel?: string;\r\n    /**\r\n     * Determines Whether the modal is visible.\r\n     */\r\n    visible: boolean;\r\n    /**\r\n     * Content of the `Modal`.\r\n     */\r\n    children: React.ReactNode;\r\n    /**\r\n     * Style for the content of the modal\r\n     */\r\n    contentContainerStyle?: StyleProp<ViewStyle>;\r\n    /**\r\n     * Style for the wrapper of the modal.\r\n     * Use this prop to change the default wrapper style or to override safe area insets with marginTop and marginBottom.\r\n     */\r\n    style?: StyleProp<ViewStyle>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n};\r\n\r\nconst defaultProps = {\r\n    dismissable: true,\r\n    visible: false,\r\n    overlayAccessibilityLabel: \"Close modal\",\r\n};\r\n\r\nconst DEFAULT_DURATION = 220;\r\nconst TOP_INSET = getStatusBarHeight(true);\r\nconst BOTTOM_INSET = getBottomSpace();\r\n\r\n/**\r\n * The Modal component is a simple way to present content above an enclosing view.\r\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img class=\"medium\" src=\"screenshots/modal.gif\" />\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import Button from 'react-native-simple-elements/components/Button';\r\n * import Text from 'react-native-simple-elements/components/Text';\r\n * import Modal from 'react-native-simple-elements/components/Modal';\r\n * import Divider from 'react-native-simple-elements/components/Divider';\r\n * import Provider from 'react-native-simple-elements/components/theme/Provider';\r\n *\r\n * const MyComponent = () => {\r\n *   const [visible, setVisible] = React.useState(false);\r\n *\r\n *   const showModal = () => setVisible(true);\r\n *   const hideModal = () => setVisible(false);\r\n *   const containerStyle = {backgroundColor: 'white', padding: 20};\r\n *\r\n *   return (\r\n *     <Provider>\r\n *       <Portal>\r\n *         <Modal visible={visible} onDismiss={hideModal} contentContainerStyle={containerStyle}>\r\n *           <Text>Example Modal.  Click outside this area to dismiss.</Text>\r\n *         </Modal>\r\n *       </Portal>\r\n *       <Button style={{marginTop: 30}} onPress={showModal}>\r\n *         Show\r\n *       </Button>\r\n *     </Provider>\r\n *   );\r\n * };\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst Modal = ({\r\n    visible,\r\n    dismissable,\r\n    onDismiss,\r\n    children,\r\n    style,\r\n    contentContainerStyle,\r\n    overlayAccessibilityLabel,\r\n}: Props) => {\r\n\r\n    const [ rendered, setRendered ] = React.useState(visible);\r\n    const [ opacity, ] = React.useState(new Animated.Value(visible ? 1 : 0));\r\n\r\n    const theme = React.useContext(ThemeContext);\r\n    const { colors } = theme;\r\n\r\n    React.useEffect(() => {\r\n        if (visible) {\r\n            setRendered(true);\r\n            showModal();\r\n        } else {\r\n            hideModal();\r\n        }\r\n\r\n        return () => {\r\n            BackHandler.removeEventListener(\"hardwareBackPress\", handleBack);\r\n        };\r\n    }, [ visible ]);\r\n\r\n    const handleBack = () => {\r\n        if (dismissable) {\r\n            hideModal();\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const showModal = () => {\r\n        BackHandler.removeEventListener(\"hardwareBackPress\", handleBack);\r\n        BackHandler.addEventListener(\"hardwareBackPress\", handleBack);\r\n\r\n        const { scale } = theme.animation;\r\n\r\n        Animated.timing(opacity, {\r\n            toValue: 1,\r\n            duration: scale * DEFAULT_DURATION,\r\n            easing: Easing.out(Easing.cubic),\r\n            useNativeDriver: true,\r\n        }).start();\r\n    };\r\n\r\n    const hideModal = () => {\r\n        BackHandler.removeEventListener(\"hardwareBackPress\", handleBack);\r\n\r\n        const { scale } = theme.animation;\r\n\r\n        Animated.timing(opacity, {\r\n            toValue: 0,\r\n            duration: scale * DEFAULT_DURATION,\r\n            easing: Easing.out(Easing.cubic),\r\n            useNativeDriver: true,\r\n        }).start(({ finished }) => {\r\n            if (!finished) {\r\n                return;\r\n            }\r\n\r\n            if (visible && onDismiss) {\r\n                onDismiss();\r\n            }\r\n\r\n            if (visible) {\r\n                showModal();\r\n            } else {\r\n                setRendered(false);\r\n            }\r\n        });\r\n    };\r\n\r\n    if (!rendered) return null;\r\n\r\n    return (\r\n        <Animated.View\r\n            pointerEvents={visible ? \"auto\" : \"none\"}\r\n            accessibilityViewIsModal\r\n            accessibilityLiveRegion=\"polite\"\r\n            style={StyleSheet.absoluteFill}\r\n            onAccessibilityEscape={hideModal}\r\n        >\r\n            <TouchableWithoutFeedback\r\n                accessibilityLabel={overlayAccessibilityLabel}\r\n                accessibilityRole=\"button\"\r\n                disabled={!dismissable}\r\n                onPress={dismissable ? hideModal : undefined}\r\n            >\r\n                <Animated.View\r\n                    style={[\r\n                        styles.backdrop,\r\n                        { backgroundColor: colors.backdrop, opacity },\r\n                    ]}\r\n                />\r\n            </TouchableWithoutFeedback>\r\n            <View\r\n                style={[\r\n                    styles.wrapper,\r\n                    { marginTop: TOP_INSET, marginBottom: BOTTOM_INSET },\r\n                    style,\r\n                ]}\r\n                pointerEvents=\"box-none\"\r\n            >\r\n                <Surface\r\n                    style={\r\n                        [{ opacity }, styles.content, contentContainerStyle] as StyleProp<\r\n                            ViewStyle\r\n                        >\r\n                    }\r\n                >\r\n                    {children}\r\n                </Surface>\r\n            </View>\r\n        </Animated.View>\r\n    );\r\n};\r\n\r\nModal.defaultProps = defaultProps;\r\n\r\nexport default Modal;\r\n\r\nconst styles = StyleSheet.create({\r\n    backdrop: {\r\n        flex: 1,\r\n    },\r\n    wrapper: {\r\n        ...StyleSheet.absoluteFillObject,\r\n        justifyContent: \"center\",\r\n    },\r\n    content: {\r\n        backgroundColor: \"transparent\",\r\n        justifyContent: \"center\",\r\n    },\r\n});\r\n"]}