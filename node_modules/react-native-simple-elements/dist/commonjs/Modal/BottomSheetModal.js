"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const SUPPORTED_ORIENTATIONS = ["portrait", "portrait-upside-down", "landscape", "landscape-left", "landscape-right"];
// type State = {
//     animatedHeight: Animated.Value,
//     pan: Animated.ValueXY,
//     modalVisible: boolean,
// }
const defaultProps = {
  animationType: "none",
  height: 260,
  minClosingHeight: 0,
  openDuration: 300,
  closeDuration: 200,
  closeOnDragDown: false,
  dragFromTopOnly: false,
  closeOnPressMask: true,
  closeOnPressBack: true,
  keyboardAvoidingViewEnabled: _reactNative.Platform.OS === "ios",
  customStyles: {},
  onClose: null,
  onOpen: null,
  children: /*#__PURE__*/React.createElement(_reactNative.View, null)
};

const BottomSheetModal = props => {
  var _panResponder$current, _panResponder$current2;

  const {
    animationType,
    closeOnDragDown,
    dragFromTopOnly,
    closeOnPressMask,
    closeOnPressBack,
    children,
    customStyles,
    keyboardAvoidingViewEnabled,
    height,
    openDuration,
    closeDuration,
    minClosingHeight,
    onOpen,
    onClose
  } = props;
  const [visible, setVisible] = React.useState(false);
  const animatedHeight = React.useRef(new _reactNative.Animated.Value(0));
  const pan = React.useRef(new _reactNative.Animated.ValueXY());
  const panResponder = React.useRef(undefined);
  React.useEffect(() => {
    if (!visible && props.visible) {
      setModalVisible(true, props);
    } else if (visible && !props.visible) {
      setModalVisible(false, props);
    }
  }, [props.visible]); // state: State = {
  //     modalVisible: false,
  //     animatedHeight: new Animated.Value(0),
  //     pan: new Animated.ValueXY()
  // };
  // panResponder;
  // constructor(props) {
  //     super(props);
  //     this.createPanResponder(props);
  // }

  const setModalVisible = (visible, props) => {
    // const { height, minClosingHeight, openDuration, closeDuration, onClose, onOpen } = this.props;
    // const { animatedHeight, pan } = this.state;
    if (visible) {
      setVisible(visible);
      if (typeof onOpen === "function") onOpen(props);

      _reactNative.Animated.timing(animatedHeight.current, {
        useNativeDriver: false,
        toValue: height,
        duration: openDuration
      }).start();
    } else {
      _reactNative.Animated.timing(animatedHeight.current, {
        useNativeDriver: false,
        toValue: minClosingHeight,
        duration: closeDuration
      }).start(() => {
        pan.current.setValue({
          x: 0,
          y: 0
        });
        animatedHeight.current = new _reactNative.Animated.Value(0), setVisible(visible); // this.setState({
        //     modalVisible: visible,
        //     animatedHeight: new Animated.Value(0)
        // });

        if (typeof onClose === "function") onClose(props);
      });
    }
  };

  const createPanResponder = props => {
    const {
      closeOnDragDown,
      height
    } = props; // const { pan } = this.state;

    panResponder.current = _reactNative.PanResponder.create({
      onStartShouldSetPanResponder: () => closeOnDragDown,
      onPanResponderMove: (e, gestureState) => {
        if (gestureState.dy > 0) {
          _reactNative.Animated.event([null, {
            dy: pan.current.y
          }], {
            useNativeDriver: false
          })(e, gestureState);
        }
      },
      onPanResponderRelease: (e, gestureState) => {
        if (height / 4 - gestureState.dy < 0) {
          setModalVisible(false);
        } else {
          _reactNative.Animated.spring(pan.current, {
            toValue: {
              x: 0,
              y: 0
            },
            useNativeDriver: false
          }).start();
        }
      }
    });
  }; // const open = (props?) => {
  //     setModalVisible(true, props);
  // }


  const close = props => {
    setModalVisible(false, props);
  }; // const { animatedHeight, pan } = this.state;


  if (!props.visible && !panResponder.current) {
    createPanResponder(props);
  }

  const panStyle = {
    transform: pan.current.getTranslateTransform()
  };
  return /*#__PURE__*/React.createElement(_reactNative.Modal, {
    transparent: true,
    animationType: animationType,
    visible: visible // @ts-ignore
    ,
    supportedOrientations: SUPPORTED_ORIENTATIONS,
    onRequestClose: () => {
      if (closeOnPressBack) setModalVisible(false);
    }
  }, /*#__PURE__*/React.createElement(_reactNative.KeyboardAvoidingView, {
    enabled: keyboardAvoidingViewEnabled,
    behavior: "padding",
    style: [{
      flex: 1,
      backgroundColor: "#00000077"
    }, customStyles.wrapper]
  }, /*#__PURE__*/React.createElement(_reactNative.TouchableOpacity, {
    style: {
      flex: 1,
      backgroundColor: "transparent"
    },
    activeOpacity: 1,
    onPress: () => closeOnPressMask ? close() : null
  }), /*#__PURE__*/React.createElement(_reactNative.Animated.View, _extends({}, !dragFromTopOnly && (_panResponder$current = panResponder.current) !== null && _panResponder$current !== void 0 && _panResponder$current.panHandlers ? panResponder.current.panHandlers : {}, {
    style: [panStyle, {
      backgroundColor: "#fff",
      width: "100%",
      height: 0,
      overflow: "hidden"
    }, {
      height: animatedHeight.current
    }, customStyles.container]
  }), closeOnDragDown && /*#__PURE__*/React.createElement(_reactNative.View, _extends({}, dragFromTopOnly && (_panResponder$current2 = panResponder.current) !== null && _panResponder$current2 !== void 0 && _panResponder$current2.panHandlers ? panResponder.current.panHandlers : {}, {
    style: {
      width: "100%",
      alignItems: "center",
      backgroundColor: "transparent"
    }
  }), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [{
      width: 35,
      height: 5,
      borderRadius: 5,
      margin: 10,
      backgroundColor: "#ccc"
    }, customStyles.draggableIcon]
  })), children)));
};

BottomSheetModal.defaultProps = defaultProps;
var _default = BottomSheetModal;
exports.default = _default;
//# sourceMappingURL=BottomSheetModal.js.map