{"version":3,"sources":["BottomSheetModal.tsx"],"names":["SUPPORTED_ORIENTATIONS","defaultProps","animationType","height","minClosingHeight","openDuration","closeDuration","closeOnDragDown","dragFromTopOnly","closeOnPressMask","closeOnPressBack","keyboardAvoidingViewEnabled","Platform","OS","customStyles","onClose","onOpen","children","BottomSheetModal","props","visible","setVisible","React","useState","animatedHeight","useRef","Animated","Value","pan","ValueXY","panResponder","undefined","useEffect","setModalVisible","timing","current","useNativeDriver","toValue","duration","start","setValue","x","y","createPanResponder","PanResponder","create","onStartShouldSetPanResponder","onPanResponderMove","e","gestureState","dy","event","onPanResponderRelease","spring","close","panStyle","transform","getTranslateTransform","flex","backgroundColor","wrapper","panHandlers","width","overflow","container","alignItems","borderRadius","margin","draggableIcon"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    View,\r\n    KeyboardAvoidingView,\r\n    Modal as RNModal,\r\n    TouchableOpacity,\r\n    Animated,\r\n    PanResponder,\r\n    Platform\r\n} from \"react-native\";\r\n\r\nconst SUPPORTED_ORIENTATIONS = [\r\n    \"portrait\",\r\n    \"portrait-upside-down\",\r\n    \"landscape\",\r\n    \"landscape-left\",\r\n    \"landscape-right\"\r\n];\r\n\r\ntype Props = {\r\n    animationType?: \"none\" | \"slide\" | \"fade\",\r\n    visible: boolean,\r\n    height?: number,\r\n    minClosingHeight?: number,\r\n    openDuration?: number,\r\n    closeDuration?: number,\r\n    closeOnDragDown?: boolean,\r\n    closeOnPressMask?: boolean,\r\n    dragFromTopOnly?: boolean,\r\n    closeOnPressBack?: boolean,\r\n    keyboardAvoidingViewEnabled?: boolean,\r\n    customStyles?: Record<string, unknown>,\r\n    onClose?: (evt) => void,\r\n    onOpen?: (evt) => void,\r\n    children?: React.ReactNode,\r\n};\r\n\r\n// type State = {\r\n//     animatedHeight: Animated.Value,\r\n//     pan: Animated.ValueXY,\r\n//     modalVisible: boolean,\r\n// }\r\n\r\nconst defaultProps = {\r\n    animationType: \"none\",\r\n    height: 260,\r\n    minClosingHeight: 0,\r\n    openDuration: 300,\r\n    closeDuration: 200,\r\n    closeOnDragDown: false,\r\n    dragFromTopOnly: false,\r\n    closeOnPressMask: true,\r\n    closeOnPressBack: true,\r\n    keyboardAvoidingViewEnabled: Platform.OS === \"ios\",\r\n    customStyles: {},\r\n    onClose: null,\r\n    onOpen: null,\r\n    children: <View />\r\n};\r\n\r\nconst BottomSheetModal = (props: Props) => {\r\n\r\n    const {\r\n        animationType,\r\n        closeOnDragDown,\r\n        dragFromTopOnly,\r\n        closeOnPressMask,\r\n        closeOnPressBack,\r\n        children,\r\n        customStyles,\r\n        keyboardAvoidingViewEnabled,\r\n        height,\r\n        openDuration,\r\n        closeDuration,\r\n        minClosingHeight,\r\n        onOpen,\r\n        onClose,\r\n    } = props;\r\n\r\n    const [ visible, setVisible ] = React.useState(false);\r\n    const animatedHeight = React.useRef(new Animated.Value(0));\r\n    const pan = React.useRef(new Animated.ValueXY());\r\n\r\n    const panResponder = React.useRef(undefined);\r\n\r\n    React.useEffect(() => {\r\n        if (!visible && props.visible) {\r\n            setModalVisible(true, props);\r\n        } else if (visible && !props.visible) {\r\n            setModalVisible(false, props);\r\n        }\r\n    }, [ props.visible ]);\r\n\r\n    // state: State = {\r\n    //     modalVisible: false,\r\n    //     animatedHeight: new Animated.Value(0),\r\n    //     pan: new Animated.ValueXY()\r\n    // };\r\n\r\n    // panResponder;\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n\r\n    //     this.createPanResponder(props);\r\n    // }\r\n\r\n    const setModalVisible = (visible, props?) => {\r\n        // const { height, minClosingHeight, openDuration, closeDuration, onClose, onOpen } = this.props;\r\n        // const { animatedHeight, pan } = this.state;\r\n        if (visible) {\r\n            setVisible(visible);\r\n            if (typeof onOpen === \"function\") onOpen(props);\r\n            Animated.timing(animatedHeight.current, {\r\n                useNativeDriver: false,\r\n                toValue: height,\r\n                duration: openDuration\r\n            }).start();\r\n        } else {\r\n            Animated.timing(animatedHeight.current, {\r\n                useNativeDriver: false,\r\n                toValue: minClosingHeight,\r\n                duration: closeDuration\r\n            }).start(() => {\r\n                pan.current.setValue({ x: 0, y: 0 });\r\n                animatedHeight.current = new Animated.Value(0),\r\n                setVisible(visible);\r\n\r\n                // this.setState({\r\n                //     modalVisible: visible,\r\n                //     animatedHeight: new Animated.Value(0)\r\n                // });\r\n\r\n                if (typeof onClose === \"function\") onClose(props);\r\n            });\r\n        }\r\n    };\r\n\r\n    const createPanResponder = (props) => {\r\n        const { closeOnDragDown, height } = props;\r\n        // const { pan } = this.state;\r\n        panResponder.current = PanResponder.create({\r\n            onStartShouldSetPanResponder: () => closeOnDragDown,\r\n            onPanResponderMove: (e, gestureState) => {\r\n                if (gestureState.dy > 0) {\r\n                    Animated.event([null, { dy: pan.current.y }], { useNativeDriver: false })(e, gestureState);\r\n                }\r\n            },\r\n            onPanResponderRelease: (e, gestureState) => {\r\n                if (height / 4 - gestureState.dy < 0) {\r\n                    setModalVisible(false);\r\n                } else {\r\n                    Animated.spring(pan.current, { toValue: { x: 0, y: 0 }, useNativeDriver: false }).start();\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    // const open = (props?) => {\r\n    //     setModalVisible(true, props);\r\n    // }\r\n\r\n    const close = (props?) => {\r\n        setModalVisible(false, props);\r\n    };\r\n\r\n    // const { animatedHeight, pan } = this.state;\r\n\r\n    if (!props.visible && !panResponder.current) {\r\n        createPanResponder(props);\r\n    }\r\n\r\n    const panStyle = {\r\n        transform: pan.current.getTranslateTransform()\r\n    };\r\n\r\n    return (\r\n        <RNModal\r\n            transparent\r\n            animationType={animationType}\r\n            visible={visible}\r\n\r\n            // @ts-ignore\r\n            supportedOrientations={SUPPORTED_ORIENTATIONS}\r\n            onRequestClose={() => {\r\n                if (closeOnPressBack) setModalVisible(false);\r\n            }}\r\n        >\r\n            <KeyboardAvoidingView\r\n                enabled={keyboardAvoidingViewEnabled}\r\n                behavior=\"padding\"\r\n                style={[\r\n                    {\r\n                        flex: 1,\r\n                        backgroundColor: \"#00000077\",\r\n                    },\r\n                    customStyles.wrapper,\r\n                ]}\r\n            >\r\n                <TouchableOpacity\r\n                    style={{\r\n                        flex: 1,\r\n                        backgroundColor: \"transparent\"\r\n                    }}\r\n                    activeOpacity={1}\r\n                    onPress={() => (closeOnPressMask ? close() : null)}\r\n                />\r\n                <Animated.View\r\n                    {...(!dragFromTopOnly && panResponder.current?.panHandlers ? panResponder.current.panHandlers : {} )}\r\n                    style={[\r\n                        panStyle,\r\n                        {\r\n                            backgroundColor: \"#fff\",\r\n                            width: \"100%\",\r\n                            height: 0,\r\n                            overflow: \"hidden\"\r\n                        },\r\n                        { height: animatedHeight.current },\r\n                        customStyles.container\r\n                    ]}\r\n                >\r\n                    {closeOnDragDown && (\r\n                        <View\r\n                            {...(dragFromTopOnly && panResponder.current?.panHandlers ? panResponder.current.panHandlers : {} )}\r\n                            style={{\r\n                                width: \"100%\",\r\n                                alignItems: \"center\",\r\n                                backgroundColor: \"transparent\"\r\n                            }}\r\n                        >\r\n                            <View style={[\r\n                                {\r\n                                    width: 35,\r\n                                    height: 5,\r\n                                    borderRadius: 5,\r\n                                    margin: 10,\r\n                                    backgroundColor: \"#ccc\",\r\n                                },\r\n                                customStyles.draggableIcon,\r\n                            ]} />\r\n                        </View>\r\n                    )}\r\n                    {children}\r\n                </Animated.View>\r\n            </KeyboardAvoidingView>\r\n        </RNModal>\r\n    );\r\n};\r\n\r\nBottomSheetModal.defaultProps = defaultProps;\r\n\r\nexport default BottomSheetModal;\r\n"]}