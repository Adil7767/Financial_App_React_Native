{"version":3,"sources":["FullscreenModal.tsx"],"names":["WindowHeight","Dimensions","get","height","SUPPORTED_ORIENTATIONS","defaultProps","animationType","minClosingHeight","openDuration","closeDuration","closeOnDragDown","dragFromTopOnly","closeOnPressMask","closeOnPressBack","keyboardAvoidingViewEnabled","Platform","OS","customStyles","onClose","onOpen","children","FullscreenModal","visible","modalVisible","setModalVisible","React","useState","pan","useRef","Animated","ValueXY","panResponder","undefined","useEffect","_setModalVisible","props","createPanResponder","current","PanResponder","create","onStartShouldSetPanResponder","onPanResponderMove","e","gestureState","dy","event","y","useNativeDriver","onPanResponderRelease","spring","toValue","x","start","panStyle","transform","getTranslateTransform","flex","backgroundColor","wrapper","panHandlers","width","overflow","container","alignItems","borderRadius","margin","draggableIcon"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    View,\r\n    KeyboardAvoidingView,\r\n    Modal as RNModal,\r\n    Animated,\r\n    PanResponder,\r\n    Dimensions,\r\n    Platform\r\n} from \"react-native\";\r\n\r\nconst WindowHeight = Dimensions.get(\"window\").height;\r\n\r\nconst SUPPORTED_ORIENTATIONS = [\r\n    \"portrait\",\r\n    \"portrait-upside-down\",\r\n    \"landscape\",\r\n    \"landscape-left\",\r\n    \"landscape-right\"\r\n];\r\n\r\ntype Props = {\r\n    animationType?: \"none\" | \"slide\" | \"fade\",\r\n    visible: boolean,\r\n    height?: number,\r\n    minClosingHeight?: number,\r\n    openDuration?: number,\r\n    closeDuration?: number,\r\n    closeOnDragDown?: boolean,\r\n    closeOnPressMask?: boolean,\r\n    dragFromTopOnly?: boolean,\r\n    closeOnPressBack?: boolean,\r\n    keyboardAvoidingViewEnabled?: boolean,\r\n    customStyles?: Record<string, unknown>,\r\n    onClose?: (evt) => void,\r\n    onOpen?: (evt) => void,\r\n    children?: React.ReactNode,\r\n};\r\n\r\n// type State = {\r\n//     animatedHeight: Animated.Value,\r\n//     pan: Animated.ValueXY,\r\n//     modalVisible: boolean,\r\n// }\r\n\r\nconst defaultProps = {\r\n    animationType: \"none\",\r\n    height: WindowHeight,\r\n    minClosingHeight: 0,\r\n    openDuration: 300,\r\n    closeDuration: 200,\r\n    closeOnDragDown: false,\r\n    dragFromTopOnly: false,\r\n    closeOnPressMask: true,\r\n    closeOnPressBack: true,\r\n    keyboardAvoidingViewEnabled: Platform.OS === \"ios\",\r\n    customStyles: {},\r\n    onClose: null,\r\n    onOpen: null,\r\n    children: <View />\r\n};\r\n\r\nconst FullscreenModal = ({\r\n    visible,\r\n    animationType,\r\n    closeOnDragDown,\r\n    dragFromTopOnly,\r\n    closeOnPressBack,\r\n    children,\r\n    customStyles,\r\n    keyboardAvoidingViewEnabled,\r\n    height,\r\n    onOpen,\r\n    onClose,\r\n}: Props) => {\r\n\r\n    const [ modalVisible, setModalVisible ] = React.useState(false);\r\n    const pan = React.useRef(new Animated.ValueXY());\r\n\r\n    const panResponder = React.useRef(undefined);\r\n\r\n    React.useEffect(() => {\r\n        if (!modalVisible && visible) {\r\n            _setModalVisible(true);\r\n        } else if (modalVisible && !visible) {\r\n            _setModalVisible(false);\r\n        }\r\n    }, [ visible ]);\r\n\r\n    const _setModalVisible = (visible, props?) => {\r\n        if (visible) {\r\n            setModalVisible(visible);\r\n            if (typeof onOpen === \"function\") onOpen(props);\r\n        } else {\r\n            setModalVisible(visible);\r\n            if (typeof onClose === \"function\") onClose(props);\r\n        }\r\n    };\r\n\r\n    const createPanResponder = () => {\r\n        panResponder.current = PanResponder.create({\r\n            onStartShouldSetPanResponder: () => closeOnDragDown,\r\n            onPanResponderMove: (e, gestureState) => {\r\n                if (gestureState.dy > 0) {\r\n                    Animated.event([null, { dy: pan.current.y }], { useNativeDriver: false })(e, gestureState);\r\n                }\r\n            },\r\n            onPanResponderRelease: (e, gestureState) => {\r\n                if (height / 4 - gestureState.dy < 0) {\r\n                    _setModalVisible(false);\r\n                } else {\r\n                    Animated.spring(pan.current, { toValue: { x: 0, y: 0 }, useNativeDriver: false }).start();\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    if (!visible && !panResponder.current) {\r\n        createPanResponder();\r\n    }\r\n\r\n    const panStyle = {\r\n        transform: pan.current.getTranslateTransform()\r\n    };\r\n\r\n    return (\r\n        <RNModal\r\n            transparent\r\n            animationType={animationType}\r\n            visible={modalVisible}\r\n            // @ts-ignore\r\n            supportedOrientations={SUPPORTED_ORIENTATIONS}\r\n            onRequestClose={() => {\r\n                if (closeOnPressBack) _setModalVisible(false);\r\n            }}\r\n        >\r\n            <KeyboardAvoidingView\r\n                enabled={keyboardAvoidingViewEnabled}\r\n                behavior=\"padding\"\r\n                style={[\r\n                    {\r\n                        flex: 1,\r\n                        backgroundColor: \"#00000077\",\r\n                    },\r\n                    customStyles.wrapper,\r\n                ]}\r\n            >\r\n                <Animated.View\r\n                    {...(!dragFromTopOnly && panResponder.current?.panHandlers ? panResponder.current.panHandlers : {} )}\r\n                    style={[\r\n                        panStyle,\r\n                        {\r\n                            backgroundColor: \"#fff\",\r\n                            width: \"100%\",\r\n                            height: WindowHeight,\r\n                            overflow: \"hidden\"\r\n                        },\r\n                        customStyles.container\r\n                    ]}\r\n                >\r\n                    {closeOnDragDown && (\r\n                        <View\r\n                            {...(dragFromTopOnly && panResponder.current?.panHandlers ? panResponder.current.panHandlers : {} )}\r\n                            style={{\r\n                                width: \"100%\",\r\n                                alignItems: \"center\",\r\n                                backgroundColor: \"transparent\"\r\n                            }}\r\n                        >\r\n                            <View style={[\r\n                                {\r\n                                    width: 35,\r\n                                    height: 5,\r\n                                    borderRadius: 5,\r\n                                    margin: 10,\r\n                                    backgroundColor: \"#ccc\",\r\n                                },\r\n                                customStyles.draggableIcon,\r\n                            ]} />\r\n                        </View>\r\n                    )}\r\n                    {children}\r\n                </Animated.View>\r\n            </KeyboardAvoidingView>\r\n        </RNModal>\r\n    );\r\n};\r\n\r\nFullscreenModal.defaultProps = defaultProps;\r\n\r\nexport default FullscreenModal;\r\n"]}