{"version":3,"sources":["TextInputOutlined.tsx"],"names":["OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","React","Component","render","disabled","editable","label","error","selectionColor","underlineColor","dense","style","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","props","theme","context","adornmentConfig","colors","fonts","font","regular","hasActiveOutline","focused","fontSize","fontSizeStyle","fontWeight","height","backgroundColor","background","textAlign","viewStyle","StyleSheet","flatten","MAXIMIZED_LABEL_FONT_SIZE","inputTextColor","activeColor","outlineColor","placeholderColor","errorColor","text","alpha","rgb","string","primary","placeholder","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","type","AdornmentSide","Left","AdornmentType","Icon","ADORNMENT_SIZE","ADORNMENT_OFFSET","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","Platform","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","measured","labelProps","placeholderStyle","wiggleOffsetX","LABEL_WIGGLE_X_OFFSET","minHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","paddingTop","paddingBottom","LabelBackground","ref","underlineColorAndroid","input","color","textAlignVertical","ThemeContext","Outline","outline","borderRadius","roundness","borderWidth","borderColor","create","position","paddingHorizontal","top","bottom","flexGrow","margin","zIndex"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    View,\r\n    TextInput as NativeTextInput,\r\n    StyleSheet,\r\n    I18nManager,\r\n    Platform,\r\n    TextStyle,\r\n} from \"react-native\";\r\nimport color from \"color\";\r\nimport TextInputAdornment, {\r\n    getAdornmentConfig,\r\n    getAdornmentStyleAdjustmentForNativeInput,\r\n    TextInputAdornmentProps,\r\n} from \"./Adornment/TextInputAdornment\";\r\n\r\nimport InputLabel from \"./Label/InputLabel\";\r\nimport LabelBackground from \"./Label/LabelBackground\";\r\nimport type { RenderProps, ChildTextInputProps } from \"./types\";\r\n\r\nimport {\r\n    MAXIMIZED_LABEL_FONT_SIZE,\r\n    MINIMIZED_LABEL_FONT_SIZE,\r\n    LABEL_WIGGLE_X_OFFSET,\r\n    ADORNMENT_SIZE,\r\n    ADORNMENT_OFFSET,\r\n} from \"./constants\";\r\n\r\nimport {\r\n    calculateLabelTopPosition,\r\n    calculateInputHeight,\r\n    calculatePadding,\r\n    adjustPaddingOut,\r\n    Padding,\r\n    interpolatePlaceholder,\r\n    calculateOutlinedIconAndAffixTopPosition,\r\n} from \"./helpers\";\r\nimport { AdornmentType, AdornmentSide } from \"./Adornment/enums\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\n\r\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\r\nconst LABEL_PADDING_TOP = 8;\r\nconst MIN_HEIGHT = 64;\r\nconst MIN_DENSE_HEIGHT = 48;\r\nconst INPUT_PADDING_HORIZONTAL = 14;\r\n\r\nclass TextInputOutlined extends React.Component<ChildTextInputProps> {\r\n\r\n    static contextType = ThemeContext as any;\r\n    static defaultProps = {\r\n        disabled: false,\r\n        error: false,\r\n        multiline: false,\r\n        editable: true,\r\n        render: (props: RenderProps) => <NativeTextInput {...props} />,\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            disabled,\r\n            editable,\r\n            label,\r\n            error,\r\n            selectionColor,\r\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n            underlineColor,\r\n            dense,\r\n            style,\r\n            render,\r\n            multiline,\r\n            parentState,\r\n            innerRef,\r\n            onFocus,\r\n            forceFocus,\r\n            onBlur,\r\n            onChangeText,\r\n            onLayoutAnimatedText,\r\n            onLeftAffixLayoutChange,\r\n            onRightAffixLayoutChange,\r\n            left,\r\n            right,\r\n            placeholderTextColor,\r\n            ...rest\r\n        } = this.props;\r\n        const theme = this.context;\r\n\r\n        const adornmentConfig = getAdornmentConfig({ left, right });\r\n\r\n        const { colors, fonts } = theme;\r\n        const font = fonts.regular;\r\n        const hasActiveOutline = parentState.focused || error;\r\n\r\n        const {\r\n            fontSize: fontSizeStyle,\r\n            fontWeight,\r\n            height,\r\n            backgroundColor = colors.background,\r\n            textAlign,\r\n            ...viewStyle\r\n        } = (StyleSheet.flatten(style) || {}) as TextStyle;\r\n        const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\r\n\r\n        let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\r\n\r\n        if (disabled) {\r\n            inputTextColor = activeColor = color(colors.text)\r\n                .alpha(0.54)\r\n                .rgb()\r\n                .string();\r\n            placeholderColor = outlineColor = colors.disabled;\r\n        } else {\r\n            inputTextColor = colors.text;\r\n            activeColor = error ? colors.error : colors.primary;\r\n            placeholderColor = outlineColor = colors.placeholder;\r\n            errorColor = colors.error;\r\n        }\r\n\r\n        const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\r\n        const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\r\n\r\n        const labelWidth = parentState.labelLayout.width;\r\n        const labelHeight = parentState.labelLayout.height;\r\n        const labelHalfWidth = labelWidth / 2;\r\n        const labelHalfHeight = labelHeight / 2;\r\n\r\n        const baseLabelTranslateX =\r\n            (I18nManager.isRTL ? 1 : -1) *\r\n            (labelHalfWidth -\r\n                (labelScale * labelWidth) / 2 -\r\n                (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\r\n\r\n        let labelTranslationXOffset = 0;\r\n        const isAdornmentLeftIcon = adornmentConfig.some(\r\n            ({ side, type }) =>\r\n                side === AdornmentSide.Left && type === AdornmentType.Icon\r\n        );\r\n        if (isAdornmentLeftIcon) {\r\n            labelTranslationXOffset =\r\n                (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\r\n        }\r\n\r\n        const minInputHeight =\r\n            (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\r\n\r\n        const inputHeight = calculateInputHeight(\r\n            labelHeight,\r\n            height,\r\n            minInputHeight\r\n        );\r\n\r\n        const topPosition = calculateLabelTopPosition(\r\n            labelHeight,\r\n            inputHeight,\r\n            LABEL_PADDING_TOP\r\n        );\r\n\r\n        if (height && typeof height !== \"number\") {\r\n            // eslint-disable-next-line\r\n            console.warn('Currently we support only numbers in height prop');\r\n        }\r\n\r\n        const paddingSettings = {\r\n            height: height ? +height : null,\r\n            labelHalfHeight,\r\n            offset: LABEL_PADDING_TOP,\r\n            multiline: multiline ? multiline : null,\r\n            dense: dense ? dense : null,\r\n            topPosition,\r\n            fontSize,\r\n            label,\r\n            scale: fontScale,\r\n            isAndroid: Platform.OS === \"android\",\r\n            styles: StyleSheet.flatten(\r\n                dense ? styles.inputOutlinedDense : styles.inputOutlined\r\n            ) as Padding,\r\n        };\r\n\r\n        const pad = calculatePadding(paddingSettings);\r\n\r\n        const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\r\n\r\n        const baseLabelTranslateY =\r\n            -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\r\n\r\n        const placeholderOpacity = hasActiveOutline\r\n            ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\r\n            : parentState.labelLayout.measured\r\n                ? 1\r\n                : 0;\r\n\r\n        const labelProps = {\r\n            label,\r\n            onLayoutAnimatedText,\r\n            placeholderOpacity,\r\n            error,\r\n            placeholderStyle: styles.placeholder,\r\n            baseLabelTranslateY,\r\n            baseLabelTranslateX,\r\n            font,\r\n            fontSize,\r\n            fontWeight,\r\n            labelScale,\r\n            wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\r\n            topPosition,\r\n            hasActiveOutline,\r\n            activeColor,\r\n            placeholderColor,\r\n            backgroundColor,\r\n            errorColor,\r\n            labelTranslationXOffset,\r\n        };\r\n\r\n        const minHeight = (height ||\r\n            (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\r\n\r\n        const { leftLayout, rightLayout } = parentState;\r\n\r\n        const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\r\n            height: minHeight,\r\n            affixHeight: leftLayout.height || 0,\r\n            labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\r\n        });\r\n\r\n        const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\r\n            height: minHeight,\r\n            affixHeight: rightLayout.height || 0,\r\n            labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\r\n        });\r\n        const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\r\n            height: minHeight,\r\n            affixHeight: ADORNMENT_SIZE,\r\n            labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\r\n        });\r\n\r\n        const rightAffixWidth = right\r\n            ? rightLayout.width || ADORNMENT_SIZE\r\n            : ADORNMENT_SIZE;\r\n\r\n        const leftAffixWidth = left\r\n            ? leftLayout.width || ADORNMENT_SIZE\r\n            : ADORNMENT_SIZE;\r\n\r\n        const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput(\r\n            {\r\n                adornmentConfig,\r\n                rightAffixWidth,\r\n                leftAffixWidth,\r\n                mode: \"outlined\",\r\n            }\r\n        );\r\n        const affixTopPosition = {\r\n            [AdornmentSide.Left]: leftAffixTopPosition,\r\n            [AdornmentSide.Right]: rightAffixTopPosition,\r\n        };\r\n        const onAffixChange = {\r\n            [AdornmentSide.Left]: onLeftAffixLayoutChange,\r\n            [AdornmentSide.Right]: onRightAffixLayoutChange,\r\n        };\r\n\r\n        let adornmentProps: TextInputAdornmentProps = {\r\n            adornmentConfig,\r\n            forceFocus,\r\n            topPosition: {\r\n                [AdornmentType.Icon]: iconTopPosition,\r\n                [AdornmentType.Affix]: affixTopPosition,\r\n            },\r\n            onAffixChange,\r\n            isTextInputFocused: parentState.focused,\r\n        };\r\n        if (adornmentConfig.length) {\r\n            adornmentProps = {\r\n                ...adornmentProps,\r\n                left,\r\n                right,\r\n                textStyle: { ...font, fontSize, fontWeight },\r\n                visible: this.props.parentState.labeled,\r\n            };\r\n        }\r\n\r\n        return (\r\n            <View style={viewStyle}>\r\n                {/*\r\n          Render the outline separately from the container\r\n          This is so that the label can overlap the outline\r\n          Otherwise the border will cut off the label on Android\r\n          */}\r\n                <View>\r\n                    <Outline\r\n                        theme={theme}\r\n                        hasActiveOutline={hasActiveOutline}\r\n                        activeColor={activeColor}\r\n                        outlineColor={outlineColor}\r\n                        backgroundColor={backgroundColor as any}\r\n                    />\r\n                    <View\r\n                        style={{\r\n                            paddingTop: LABEL_PADDING_TOP,\r\n                            paddingBottom: 0,\r\n                            minHeight,\r\n                        }}\r\n                    >\r\n                        <InputLabel\r\n                            parentState={parentState}\r\n                            labelProps={labelProps as any}\r\n                            labelBackground={LabelBackground}\r\n                        />\r\n                        {render?.({\r\n                            ...rest,\r\n                            ref: innerRef,\r\n                            onChangeText,\r\n                            placeholder: label\r\n                                ? parentState.placeholder\r\n                                : this.props.placeholder,\r\n                            placeholderTextColor: placeholderTextColor || placeholderColor,\r\n                            editable: !disabled && editable,\r\n                            selectionColor:\r\n                                typeof selectionColor === \"undefined\"\r\n                                    ? activeColor\r\n                                    : selectionColor,\r\n                            onFocus,\r\n                            onBlur,\r\n                            underlineColorAndroid: \"transparent\",\r\n                            multiline,\r\n                            style: [\r\n                                styles.input,\r\n                                !multiline || (multiline && height)\r\n                                    ? { height: inputHeight }\r\n                                    : {},\r\n                                paddingOut,\r\n                                {\r\n                                    ...font,\r\n                                    fontSize,\r\n                                    fontWeight,\r\n                                    color: inputTextColor,\r\n                                    textAlignVertical: multiline ? \"top\" : \"center\",\r\n                                    textAlign: textAlign\r\n                                        ? textAlign\r\n                                        : I18nManager.isRTL\r\n                                            ? \"right\"\r\n                                            : \"left\",\r\n                                },\r\n                                adornmentStyleAdjustmentForNativeInput,\r\n                            ],\r\n                        } as RenderProps)}\r\n                    </View>\r\n                    <TextInputAdornment {...adornmentProps} />\r\n                </View>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextInputOutlined;\r\n\r\ntype OutlineType = {\r\n    activeColor: string;\r\n    hasActiveOutline?: boolean;\r\n    outlineColor?: string;\r\n    backgroundColor?: string;\r\n    theme: DefaultTheme;\r\n};\r\n\r\nconst Outline = ({\r\n    theme,\r\n    hasActiveOutline,\r\n    activeColor,\r\n    outlineColor,\r\n    backgroundColor,\r\n}: OutlineType) => (\r\n    <View\r\n        pointerEvents=\"none\"\r\n        style={[\r\n            styles.outline,\r\n            {\r\n                backgroundColor,\r\n                borderRadius: theme.roundness,\r\n                borderWidth: hasActiveOutline ? 2 : 1,\r\n                borderColor: hasActiveOutline ? activeColor : outlineColor,\r\n            },\r\n        ]}\r\n    />\r\n);\r\n\r\nconst styles = StyleSheet.create({\r\n    placeholder: {\r\n        position: \"absolute\",\r\n        left: 0,\r\n        paddingHorizontal: INPUT_PADDING_HORIZONTAL,\r\n    },\r\n    outline: {\r\n        position: \"absolute\",\r\n        left: 0,\r\n        right: 0,\r\n        top: 6,\r\n        bottom: 0,\r\n    },\r\n    input: {\r\n        flexGrow: 1,\r\n        paddingHorizontal: INPUT_PADDING_HORIZONTAL,\r\n        margin: 0,\r\n        zIndex: 1,\r\n    },\r\n    inputOutlined: {\r\n        paddingTop: 8,\r\n        paddingBottom: 8,\r\n    },\r\n    inputOutlinedDense: {\r\n        paddingTop: 4,\r\n        paddingBottom: 4,\r\n    },\r\n});\r\n"]}