{"version":3,"sources":["TextInput.tsx"],"names":["BLUR_ANIMATION_DURATION","FOCUS_ANIMATION_DURATION","TextInput","React","Component","props","value","undefined","defaultValue","labeled","Animated","Value","validInputValue","error","focused","placeholder","labelLayout","measured","width","height","leftLayout","rightLayout","timer","clearTimeout","setTimeout","setState","theme","context","scale","animation","timing","state","toValue","duration","useNativeDriver","Platform","select","ios","default","start","event","nativeEvent","layout","args","disabled","editable","onFocus","onBlur","onChangeText","e","root","focus","getDerivedStateFromProps","nextProps","prevState","componentDidUpdate","prevProps","isFocusChanged","isValueChanged","isLabelLayoutChanged","isLabelChanged","label","isErrorChanged","minimizeLabel","restoreLabel","showPlaceholder","hidePlaceholder","showError","hideError","componentWillUnmount","setNativeProps","isFocused","clear","blur","render","mode","rest","ref","handleFocus","forceFocus","handleBlur","handleChangeText","handleLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","ThemeContext","dense","multiline"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    Animated,\r\n    TextInput as NativeTextInput,\r\n    Platform,\r\n    LayoutChangeEvent,\r\n    StyleProp,\r\n    TextStyle,\r\n} from \"react-native\";\r\nimport TextInputOutlined from \"./TextInputOutlined\";\r\nimport TextInputFlat from \"./TextInputFlat\";\r\n// import TextInputIcon from \"./Adornment/TextInputIcon\";\r\n// import TextInputAffix from \"./Adornment/TextInputAffix\";\r\nimport type { RenderProps, State } from \"./types\";\r\nimport { $Omit } from \"../types\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\n\r\nconst BLUR_ANIMATION_DURATION = 180;\r\nconst FOCUS_ANIMATION_DURATION = 150;\r\n\r\nexport type TextInputProps = React.ComponentPropsWithRef<\r\n    typeof NativeTextInput\r\n> & {\r\n    /**\r\n     * Mode of the TextInput.\r\n     * - `flat` - flat input with an underline.\r\n     * - `outlined` - input with an outline.\r\n     *\r\n     * In `outlined` mode, the background color of the label is derived from `colors.background` in theme or the `backgroundColor` style.\r\n     * This component render TextInputOutlined or TextInputFlat based on that props\r\n     */\r\n    mode?: \"flat\" | \"outlined\";\r\n    left?: React.ReactNode;\r\n    right?: React.ReactNode;\r\n    /**\r\n     * If true, user won't be able to interact with the component.\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * The text to use for the floating label.\r\n     */\r\n    label?: string;\r\n    /**\r\n     * Placeholder for the input.\r\n     */\r\n    placeholder?: string;\r\n    /**\r\n     * Whether to style the TextInput with error style.\r\n     */\r\n    error?: boolean;\r\n    /**\r\n     * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\r\n     */\r\n    onChangeText?: (val?) => void;\r\n    /**\r\n     * Selection color of the input\r\n     */\r\n    selectionColor?: string;\r\n    /**\r\n     * Underline color of the input.\r\n     */\r\n    underlineColor?: string;\r\n    /**\r\n     * Sets min height with densed layout. For `TextInput` in `flat` mode\r\n     * height is `64dp` or in dense layout - `52dp` with label or `40dp` without label.\r\n     * For `TextInput` in `outlined` mode\r\n     * height is `56dp` or in dense layout - `40dp` regardless of label.\r\n     * When you apply `heigh` prop in style the `dense` prop affects only `paddingVertical` inside `TextInput`\r\n     */\r\n    dense?: boolean;\r\n    /**\r\n     * Whether the input can have multiple lines.\r\n     */\r\n    multiline?: boolean;\r\n    /**\r\n     * The number of lines to show in the input (Android only).\r\n     */\r\n    numberOfLines?: number;\r\n    /**\r\n     * Callback that is called when the text input is focused.\r\n     */\r\n    onFocus?: (args: any) => void;\r\n    /**\r\n     * Callback that is called when the text input is blurred.\r\n     */\r\n    onBlur?: (args: any) => void;\r\n    /**\r\n     *\r\n     * Callback to render a custom input component such as `react-native-text-input-mask`\r\n     * instead of the default `TextInput` component from `react-native`.\r\n     *\r\n     * Example:\r\n     * ```js\r\n     * <TextInput\r\n     *   label=\"Phone number\"\r\n     *   render={props =>\r\n     *     <TextInputMask\r\n     *       {...props}\r\n     *       mask=\"+[00] [000] [000] [000]\"\r\n     *     />\r\n     *   }\r\n     * />\r\n     * ```\r\n     */\r\n    render?: (props: RenderProps) => React.ReactNode;\r\n    /**\r\n     * Value of the text input.\r\n     */\r\n    value?: string;\r\n    /**\r\n     * Pass `fontSize` prop to modify the font size inside `TextInput`.\r\n     * Pass `height` prop to set `TextInput` height. When `height` is passed,\r\n     * `dense` prop will affect only input's `paddingVertical`.\r\n     * Pass `paddingHorizontal` to modify horizontal padding.\r\n     * This can be used to get MD Guidelines v1 TextInput look.\r\n     */\r\n    style?: StyleProp<TextStyle>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n};\r\n\r\n/**\r\n * A component to allow users to input text.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\r\n *     <figcaption>Flat (focused)</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\r\n *     <figcaption>Flat (disabled)</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\r\n *     <figcaption>Outlined (focused)</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\r\n *     <figcaption>Outlined (disabled)</figcaption>\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import TextInput from 'react-native-simple-elements/components/TextInput';\r\n *\r\n * const MyComponent = () => {\r\n *   const [text, setText] = React.useState('');\r\n *\r\n *   return (\r\n *     <TextInput\r\n *       label=\"Email\"\r\n *       value={text}\r\n *       onChangeText={text => setText(text)}\r\n *     />\r\n *   );\r\n * };\r\n *\r\n * export default MyComponent;\r\n * ```\r\n *\r\n * @extends TextInput props https://reactnative.dev/docs/textinput#props\r\n */\r\n\r\nclass TextInput extends React.Component<TextInputProps, State> {\r\n\r\n    static contextType = ThemeContext as any;\r\n\r\n    // @component ./Adornment/TextInputIcon.tsx\r\n    // ts-ignore\r\n    // static Icon = TextInputIcon;\r\n\r\n    // @component ./Adornment/TextInputAffix.tsx\r\n    // ts-ignore\r\n    // static Affix = TextInputAffix;\r\n\r\n    static defaultProps: Partial<TextInputProps> = {\r\n        mode: \"flat\",\r\n        dense: false,\r\n        disabled: false,\r\n        error: false,\r\n        multiline: false,\r\n        editable: true,\r\n        render: (props: RenderProps) => <NativeTextInput {...props} />,\r\n    };\r\n\r\n    static getDerivedStateFromProps(nextProps: TextInputProps, prevState: State) {\r\n        return {\r\n            value:\r\n                typeof nextProps.value !== \"undefined\"\r\n                    ? nextProps.value\r\n                    : prevState.value,\r\n        };\r\n    }\r\n    validInputValue =\r\n        this.props.value !== undefined ? this.props.value : this.props.defaultValue;\r\n\r\n    state = {\r\n        labeled: new Animated.Value(this.validInputValue ? 0 : 1),\r\n        error: new Animated.Value(this.props.error ? 1 : 0),\r\n        focused: false,\r\n        placeholder: \"\",\r\n        value: this.validInputValue,\r\n        labelLayout: {\r\n            measured: false,\r\n            width: 0,\r\n            height: 0,\r\n        },\r\n        leftLayout: {\r\n            width: null,\r\n            height: null,\r\n        },\r\n        rightLayout: {\r\n            width: null,\r\n            height: null,\r\n        },\r\n    };\r\n\r\n    ref: NativeTextInput | undefined | null;\r\n\r\n    componentDidUpdate(prevProps: TextInputProps, prevState: State) {\r\n        const isFocusChanged = prevState.focused !== this.state.focused;\r\n        const isValueChanged = prevState.value !== this.state.value;\r\n        const isLabelLayoutChanged =\r\n            prevState.labelLayout !== this.state.labelLayout;\r\n        const isLabelChanged = prevProps.label !== this.props.label;\r\n        const isErrorChanged = prevProps.error !== this.props.error;\r\n\r\n        if (\r\n            isFocusChanged ||\r\n            isValueChanged ||\r\n            // workaround for animated regression for react native > 0.61\r\n            // https://github.com/react-native-simple-widgets/react-native-simple-elements/pull/1440\r\n            isLabelLayoutChanged\r\n        ) {\r\n            // The label should be minimized if the text input is focused, or has text\r\n            // In minimized mode, the label moves up and becomes small\r\n            if (this.state.value || this.state.focused) {\r\n                this.minimizeLabel();\r\n            } else {\r\n                this.restoreLabel();\r\n            }\r\n        }\r\n\r\n        if (isFocusChanged || isLabelChanged) {\r\n            // Show placeholder text only if the input is focused, or there's no label\r\n            // We don't show placeholder if there's a label because the label acts as placeholder\r\n            // When focused, the label moves up, so we can show a placeholder\r\n            if (this.state.focused || !this.props.label) {\r\n                this.showPlaceholder();\r\n            } else {\r\n                this.hidePlaceholder();\r\n            }\r\n        }\r\n\r\n        if (isErrorChanged) {\r\n            // When the input has an error, we wiggle the label and apply error styles\r\n            if (this.props.error) {\r\n                this.showError();\r\n            } else {\r\n                this.hideError();\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.timer) {\r\n            clearTimeout(this.timer);\r\n        }\r\n    }\r\n\r\n    private showPlaceholder = () => {\r\n        if (this.timer) {\r\n            clearTimeout(this.timer);\r\n        }\r\n\r\n        // Set the placeholder in a delay to offset the label animation\r\n        // If we show it immediately, they'll overlap and look ugly\r\n        // @ts-ignore\r\n        this.timer = setTimeout(\r\n            () =>\r\n                this.setState({\r\n                    placeholder: this.props.placeholder,\r\n                }),\r\n            50\r\n        );\r\n    };\r\n\r\n    private hidePlaceholder = () =>\r\n        this.setState({\r\n            placeholder: \"\",\r\n        });\r\n\r\n    private timer?: number;\r\n    private root: NativeTextInput | undefined | null;\r\n\r\n    private showError = () => {\r\n        const theme = this.context;\r\n        const { scale } = theme.animation;\r\n        Animated.timing(this.state.error, {\r\n            toValue: 1,\r\n            duration: FOCUS_ANIMATION_DURATION * scale,\r\n            // To prevent this - https://github.com/react-native-simple-widgets/react-native-simple-elements/issues/941\r\n            useNativeDriver: Platform.select({\r\n                ios: false,\r\n                default: true,\r\n            }),\r\n        }).start();\r\n    };\r\n\r\n    private hideError = () => {\r\n        const theme = this.context;\r\n        const { scale } = theme.animation;\r\n        Animated.timing(this.state.error, {\r\n            toValue: 0,\r\n            duration: BLUR_ANIMATION_DURATION * scale,\r\n            // To prevent this - https://github.com/react-native-simple-widgets/react-native-simple-elements/issues/941\r\n            useNativeDriver: Platform.select({\r\n                ios: false,\r\n                default: true,\r\n            }),\r\n        }).start();\r\n    };\r\n\r\n    private restoreLabel = () => {\r\n        const theme = this.context;\r\n        const { scale } = theme.animation;\r\n        Animated.timing(this.state.labeled, {\r\n            toValue: 1,\r\n            duration: FOCUS_ANIMATION_DURATION * scale,\r\n            // To prevent this - https://github.com/react-native-simple-widgets/react-native-simple-elements/issues/941\r\n            useNativeDriver: Platform.select({\r\n                ios: false,\r\n                default: true,\r\n            }),\r\n        }).start();\r\n    };\r\n\r\n    private minimizeLabel = () => {\r\n        const theme = this.context;\r\n        const { scale } = theme.animation;\r\n        Animated.timing(this.state.labeled, {\r\n            toValue: 0,\r\n            duration: BLUR_ANIMATION_DURATION * scale,\r\n            // To prevent this - https://github.com/react-native-simple-widgets/react-native-simple-elements/issues/941\r\n            useNativeDriver: Platform.select({\r\n                ios: false,\r\n                default: true,\r\n            }),\r\n        }).start();\r\n    };\r\n\r\n    private onLeftAffixLayoutChange = (event: LayoutChangeEvent) => {\r\n        this.setState({\r\n            leftLayout: {\r\n                height: event.nativeEvent.layout.height,\r\n                width: event.nativeEvent.layout.width,\r\n            },\r\n        });\r\n    };\r\n\r\n    private onRightAffixLayoutChange = (event: LayoutChangeEvent) => {\r\n        this.setState({\r\n            rightLayout: {\r\n                width: event.nativeEvent.layout.width,\r\n                height: event.nativeEvent.layout.height,\r\n            },\r\n        });\r\n    };\r\n\r\n    private handleFocus = (args: any) => {\r\n        if (this.props.disabled || !this.props.editable) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ focused: true });\r\n\r\n        if (this.props.onFocus) {\r\n            this.props.onFocus(args);\r\n        }\r\n    };\r\n\r\n    private handleBlur = (args: Record<string, any>) => {\r\n        if (!this.props.editable) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ focused: false });\r\n\r\n        if (this.props.onBlur) {\r\n            this.props.onBlur(args);\r\n        }\r\n    };\r\n\r\n    private handleChangeText = (value: string) => {\r\n        if (!this.props.editable) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ value });\r\n        this.props.onChangeText && this.props.onChangeText(value);\r\n    };\r\n\r\n    private handleLayoutAnimatedText = (e: LayoutChangeEvent) => {\r\n        this.setState({\r\n            labelLayout: {\r\n                width: e.nativeEvent.layout.width,\r\n                height: e.nativeEvent.layout.height,\r\n                measured: true,\r\n            },\r\n        });\r\n    };\r\n\r\n    forceFocus = () => {\r\n        return this.root?.focus();\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    setNativeProps(args: Record<string, any>) {\r\n        return this.root && this.root.setNativeProps(args);\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the input is currently focused, `false` otherwise.\r\n     */\r\n    isFocused() {\r\n        return this.root && this.root.isFocused();\r\n    }\r\n\r\n    /**\r\n     * Removes all text from the TextInput.\r\n     */\r\n    clear() {\r\n        return this.root && this.root.clear();\r\n    }\r\n\r\n    /**\r\n     * Focuses the input.\r\n     */\r\n    focus() {\r\n        return this.root && this.root.focus();\r\n    }\r\n\r\n    /**\r\n     * Removes focus from the input.\r\n     */\r\n    blur() {\r\n        return this.root && this.root.blur();\r\n    }\r\n\r\n    render() {\r\n        const { mode, ...rest } = this.props as $Omit<TextInputProps, \"ref\">;\r\n\r\n        return mode === \"outlined\" ? (\r\n            <TextInputOutlined\r\n                {...rest}\r\n                value={this.state.value}\r\n                parentState={this.state}\r\n                innerRef={(ref) => {\r\n                    this.root = ref;\r\n                }}\r\n                onFocus={this.handleFocus}\r\n                forceFocus={this.forceFocus}\r\n                onBlur={this.handleBlur}\r\n                onChangeText={this.handleChangeText}\r\n                onLayoutAnimatedText={this.handleLayoutAnimatedText}\r\n                onLeftAffixLayoutChange={this.onLeftAffixLayoutChange}\r\n                onRightAffixLayoutChange={this.onRightAffixLayoutChange}\r\n            />\r\n        ) : (\r\n            <TextInputFlat\r\n                {...rest}\r\n                value={this.state.value}\r\n                parentState={this.state}\r\n                innerRef={(ref) => {\r\n                    this.root = ref;\r\n                }}\r\n                onFocus={this.handleFocus}\r\n                forceFocus={this.forceFocus}\r\n                onBlur={this.handleBlur}\r\n                onChangeText={this.handleChangeText}\r\n                onLayoutAnimatedText={this.handleLayoutAnimatedText}\r\n                onLeftAffixLayoutChange={this.onLeftAffixLayoutChange}\r\n                onRightAffixLayoutChange={this.onRightAffixLayoutChange}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextInput;\r\n"]}