"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AffixAdornment = exports.TextInputAffix = exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _color = _interopRequireDefault(require("color"));

var _reactNative = require("react-native");

var _enums = require("./enums");

var _styledComponents = require("styled-components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const AFFIX_OFFSET = 12;
const AffixContext = /*#__PURE__*/React.createContext({
  textStyle: {
    fontFamily: "",
    color: ""
  },
  topPosition: null,
  side: _enums.AdornmentSide.Left
});

const AffixAdornment = ({
  affix,
  side,
  textStyle,
  topPosition,
  onLayout,
  visible,
  paddingHorizontal
}) => {
  return /*#__PURE__*/React.createElement(AffixContext.Provider, {
    value: {
      side,
      textStyle,
      topPosition,
      onLayout,
      visible,
      paddingHorizontal
    }
  }, affix);
};

exports.AffixAdornment = AffixAdornment;

const TextInputAffix = ({
  text,
  textStyle: labelStyle
}) => {
  const {
    textStyle,
    onLayout,
    topPosition,
    side,
    visible,
    paddingHorizontal
  } = React.useContext(AffixContext);
  const theme = React.useContext(_styledComponents.ThemeContext);
  const textColor = (0, _color.default)(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();
  const offset = typeof paddingHorizontal === "number" ? paddingHorizontal : AFFIX_OFFSET;
  const style = {
    top: topPosition,
    [side]: offset
  };
  return /*#__PURE__*/React.createElement(_reactNative.Animated.View, {
    style: [styles.container, style, {
      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({
        inputRange: [0, 1],
        outputRange: [1, 0]
      })) || 1
    }],
    onLayout: onLayout
  }, /*#__PURE__*/React.createElement(_reactNative.Text, {
    style: [{
      color: textColor
    }, textStyle, labelStyle]
  }, " ", text, " "));
};

exports.TextInputAffix = TextInputAffix;
TextInputAffix.displayName = "TextInput.Affix";

const styles = _reactNative.StyleSheet.create({
  container: {
    position: "absolute",
    justifyContent: "center",
    alignItems: "center"
  }
});

var _default = TextInputAffix; // @component-docs ignore-next-line

exports.default = _default;
//# sourceMappingURL=TextInputAffix.js.map