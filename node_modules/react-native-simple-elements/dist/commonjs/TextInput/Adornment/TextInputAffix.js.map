{"version":3,"sources":["TextInputAffix.tsx"],"names":["AFFIX_OFFSET","AffixContext","React","createContext","textStyle","fontFamily","color","topPosition","side","AdornmentSide","Left","AffixAdornment","affix","onLayout","visible","paddingHorizontal","TextInputAffix","text","labelStyle","useContext","theme","ThemeContext","textColor","colors","alpha","dark","rgb","string","offset","style","top","styles","container","opacity","interpolate","inputRange","outputRange","displayName","StyleSheet","create","position","justifyContent","alignItems"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AASA;;AACA;;;;;;;;AAEA,MAAMA,YAAY,GAAG,EAArB;AAqBA,MAAMC,YAAY,gBAAGC,KAAK,CAACC,aAAN,CAAkC;AACnDC,EAAAA,SAAS,EAAE;AACPC,IAAAA,UAAU,EAAE,EADL;AAEPC,IAAAA,KAAK,EAAE;AAFA,GADwC;AAKnDC,EAAAA,WAAW,EAAE,IALsC;AAMnDC,EAAAA,IAAI,EAAEC,qBAAcC;AAN+B,CAAlC,CAArB;;AASA,MAAMC,cAAmG,GAAG,CAAC;AACzGC,EAAAA,KADyG;AAEzGJ,EAAAA,IAFyG;AAGzGJ,EAAAA,SAHyG;AAIzGG,EAAAA,WAJyG;AAKzGM,EAAAA,QALyG;AAMzGC,EAAAA,OANyG;AAOzGC,EAAAA;AAPyG,CAAD,KAQtG;AAEF,sBACI,oBAAC,YAAD,CAAc,QAAd;AACI,IAAA,KAAK,EAAE;AACHP,MAAAA,IADG;AAEHJ,MAAAA,SAFG;AAGHG,MAAAA,WAHG;AAIHM,MAAAA,QAJG;AAKHC,MAAAA,OALG;AAMHC,MAAAA;AANG;AADX,KAUMH,KAVN,CADJ;AAcH,CAxBD;;;;AA0BA,MAAMI,cAAc,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQb,EAAAA,SAAS,EAAEc;AAAnB,CAAD,KAA4C;AAC/D,QAAM;AACFd,IAAAA,SADE;AAEFS,IAAAA,QAFE;AAGFN,IAAAA,WAHE;AAIFC,IAAAA,IAJE;AAKFM,IAAAA,OALE;AAMFC,IAAAA;AANE,MAOFb,KAAK,CAACiB,UAAN,CAAiBlB,YAAjB,CAPJ;AAQA,QAAMmB,KAAK,GAAGlB,KAAK,CAACiB,UAAN,CAAiBE,8BAAjB,CAAd;AACA,QAAMC,SAAS,GAAG,oBAAMF,KAAK,CAACG,MAAN,CAAaN,IAAnB,EACbO,KADa,CACPJ,KAAK,CAACK,IAAN,GAAa,GAAb,GAAmB,IADZ,EAEbC,GAFa,GAGbC,MAHa,EAAlB;AAKA,QAAMC,MAAM,GACR,OAAOb,iBAAP,KAA6B,QAA7B,GAAwCA,iBAAxC,GAA4Df,YADhE;AAGA,QAAM6B,KAAK,GAAG;AACVC,IAAAA,GAAG,EAAEvB,WADK;AAEV,KAACC,IAAD,GAAQoB;AAFE,GAAd;AAKA,sBACI,oBAAC,qBAAD,CAAU,IAAV;AACI,IAAA,KAAK,EACD,CACIG,MAAM,CAACC,SADX,EAEIH,KAFJ,EAGI;AACII,MAAAA,OAAO,EACH,CAAAnB,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEoB,WAAT,CAAqB;AACjBC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADK;AAEjBC,QAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFI,OAArB,MAGM;AALd,KAHJ,CAFR;AAcI,IAAA,QAAQ,EAAGvB;AAdf,kBAgBI,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAG,CAAC;AAAEP,MAAAA,KAAK,EAAEgB;AAAT,KAAD,EAAuBlB,SAAvB,EAAkCc,UAAlC;AAAd,UAAiED,IAAjE,MAhBJ,CADJ;AAoBH,CA3CD;;;AA6CAD,cAAc,CAACqB,WAAf,GAA6B,iBAA7B;;AAEA,MAAMN,MAAM,GAAGO,wBAAWC,MAAX,CAAkB;AAC7BP,EAAAA,SAAS,EAAE;AACPQ,IAAAA,QAAQ,EAAE,UADH;AAEPC,IAAAA,cAAc,EAAE,QAFT;AAGPC,IAAAA,UAAU,EAAE;AAHL;AADkB,CAAlB,CAAf;;eAQe1B,c,EAEf","sourcesContent":["import * as React from \"react\";\r\nimport color from \"color\";\r\nimport {\r\n    Text,\r\n    StyleSheet,\r\n    StyleProp,\r\n    TextStyle,\r\n    LayoutChangeEvent,\r\n    Animated,\r\n} from \"react-native\";\r\n\r\nimport { AdornmentSide } from \"./enums\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\n\r\nconst AFFIX_OFFSET = 12;\r\n\r\ntype Props = {\r\n    text: string;\r\n    onLayout?: (event: LayoutChangeEvent) => void;\r\n    textStyle?: StyleProp<TextStyle>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n};\r\n\r\ntype ContextState = {\r\n    topPosition: number | null;\r\n    onLayout?: (event: LayoutChangeEvent) => void;\r\n    visible?: Animated.Value;\r\n    textStyle?: StyleProp<TextStyle>;\r\n    side: AdornmentSide;\r\n    paddingHorizontal?: number | string;\r\n};\r\n\r\nconst AffixContext = React.createContext<ContextState>({\r\n    textStyle: {\r\n        fontFamily: \"\",\r\n        color: \"\",\r\n    },\r\n    topPosition: null,\r\n    side: AdornmentSide.Left,\r\n});\r\n\r\nconst AffixAdornment: React.FunctionComponent<{ affix: React.ReactNode; testID: string; } & ContextState> = ({\r\n    affix,\r\n    side,\r\n    textStyle,\r\n    topPosition,\r\n    onLayout,\r\n    visible,\r\n    paddingHorizontal,\r\n}) => {\r\n\r\n    return (\r\n        <AffixContext.Provider\r\n            value={{\r\n                side,\r\n                textStyle,\r\n                topPosition,\r\n                onLayout,\r\n                visible,\r\n                paddingHorizontal,\r\n            }}\r\n        >\r\n            { affix }\r\n        </AffixContext.Provider>\r\n    );\r\n};\r\n\r\nconst TextInputAffix = ({ text, textStyle: labelStyle }: Props) => {\r\n    const {\r\n        textStyle,\r\n        onLayout,\r\n        topPosition,\r\n        side,\r\n        visible,\r\n        paddingHorizontal,\r\n    } = React.useContext(AffixContext);\r\n    const theme = React.useContext(ThemeContext);\r\n    const textColor = color(theme.colors.text)\r\n        .alpha(theme.dark ? 0.7 : 0.54)\r\n        .rgb()\r\n        .string();\r\n\r\n    const offset =\r\n        typeof paddingHorizontal === \"number\" ? paddingHorizontal : AFFIX_OFFSET;\r\n\r\n    const style = {\r\n        top: topPosition,\r\n        [side]: offset,\r\n    };\r\n\r\n    return (\r\n        <Animated.View\r\n            style={\r\n                [\r\n                    styles.container,\r\n                    style,\r\n                    {\r\n                        opacity:\r\n                            visible?.interpolate({\r\n                                inputRange: [0, 1],\r\n                                outputRange: [1, 0],\r\n                            }) || 1,\r\n                    },\r\n                ]\r\n            }\r\n            onLayout={ onLayout }\r\n        >\r\n            <Text style={ [{ color: textColor }, textStyle, labelStyle] }> { text } </Text>\r\n        </Animated.View>\r\n    );\r\n};\r\n\r\nTextInputAffix.displayName = \"TextInput.Affix\";\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        position: \"absolute\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n});\r\n\r\nexport default TextInputAffix;\r\n\r\n// @component-docs ignore-next-line\r\nexport { TextInputAffix, AffixAdornment };\r\n"]}