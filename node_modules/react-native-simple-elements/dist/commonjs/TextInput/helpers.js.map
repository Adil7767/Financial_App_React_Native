{"version":3,"sources":["helpers.ts"],"names":["calculateLabelTopPosition","labelHeight","height","optionalPadding","customHeight","Math","floor","calculateInputHeight","minHeight","finalHeight","calculatePadding","props","multiline","result","calculateTextAreaPadding","calculateInputPadding","max","dense","topPosition","fontSize","scale","offset","isAndroid","refFontSize","min","adjustPaddingOut","pad","label","paddingTop","paddingBottom","adjustPaddingFlat","styles","topResult","bottomResult","interpolatePlaceholder","labeled","hasActiveOutline","interpolate","inputRange","outputRange","calculateFlatAffixTopPosition","affixHeight","inputHeightWithoutPadding","halfOfTheInputHeightDecreasedByAffixHeight","calculateOutlinedIconAndAffixTopPosition","labelYOffset","calculateFlatInputHorizontalPadding","adornmentConfig","paddingLeft","LABEL_PADDING_HORIZONTAL","paddingRight","forEach","type","side","AdornmentType","Icon","AdornmentSide","Left","ADORNMENT_SIZE","ADORNMENT_OFFSET","FLAT_INPUT_OFFSET","Right","Affix"],"mappings":"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","sourcesContent":["import type { Animated } from \"react-native\";\r\nimport type { AdornmentConfig } from \"./Adornment/types\";\r\nimport {\r\n    LABEL_PADDING_HORIZONTAL,\r\n    ADORNMENT_OFFSET,\r\n    ADORNMENT_SIZE,\r\n    FLAT_INPUT_OFFSET,\r\n} from \"./constants\";\r\nimport { AdornmentType, AdornmentSide } from \"./Adornment/enums\";\r\n\r\ntype PaddingProps = {\r\n    height: number | null;\r\n    labelHalfHeight: number;\r\n    multiline: boolean | null;\r\n    dense: boolean | null;\r\n    topPosition: number;\r\n    fontSize: number;\r\n    label?: string | null;\r\n    scale: number;\r\n    offset: number;\r\n    isAndroid: boolean;\r\n    styles: { paddingTop: number; paddingBottom: number };\r\n};\r\n\r\ntype AdjProps = PaddingProps & {\r\n    pad: number;\r\n};\r\n\r\nexport type Padding = { paddingTop: number; paddingBottom: number };\r\n\r\nexport const calculateLabelTopPosition = (\r\n    labelHeight: number,\r\n    height = 0,\r\n    optionalPadding = 0\r\n): number => {\r\n    const customHeight = height > 0 ? height : 0;\r\n\r\n    return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);\r\n};\r\n\r\nexport const calculateInputHeight = (\r\n    labelHeight: number,\r\n    height: any = 0,\r\n    minHeight: number\r\n): number => {\r\n    const finalHeight = height > 0 ? height : labelHeight;\r\n\r\n    if (height > 0) return height;\r\n    return finalHeight < minHeight ? minHeight : finalHeight;\r\n};\r\n\r\nexport const calculatePadding = (props: PaddingProps): number => {\r\n    const { height, multiline = false } = props;\r\n\r\n    let result = 0;\r\n\r\n    if (multiline) {\r\n        if (height && multiline) {\r\n            result = calculateTextAreaPadding(props);\r\n        } else {\r\n            result = calculateInputPadding(props);\r\n        }\r\n    }\r\n\r\n    return Math.max(0, result);\r\n};\r\n\r\nconst calculateTextAreaPadding = (props: PaddingProps) => {\r\n    const { dense } = props;\r\n\r\n    return dense ? 10 : 20;\r\n};\r\n\r\nconst calculateInputPadding = ({\r\n    topPosition,\r\n    fontSize,\r\n    multiline,\r\n    scale,\r\n    dense,\r\n    offset,\r\n    isAndroid,\r\n}: PaddingProps): number => {\r\n    const refFontSize = scale * fontSize;\r\n    let result = Math.floor(topPosition / 2);\r\n\r\n    result =\r\n        result +\r\n        Math.floor((refFontSize - fontSize) / 2) -\r\n        (scale < 1 ? offset / 2 : 0);\r\n\r\n    if (multiline && isAndroid)\r\n        result = Math.min(dense ? offset / 2 : offset, result);\r\n\r\n    return result;\r\n};\r\n\r\nexport const adjustPaddingOut = ({\r\n    pad,\r\n    multiline,\r\n    label,\r\n    scale,\r\n    height,\r\n    fontSize,\r\n    dense,\r\n    offset,\r\n    isAndroid,\r\n}: AdjProps): Padding => {\r\n    const refFontSize = scale * fontSize;\r\n    let result = pad;\r\n\r\n    if (height) {\r\n        return {\r\n            paddingTop: Math.max(0, (height - fontSize) / 2),\r\n            paddingBottom: Math.max(0, (height - fontSize) / 2),\r\n        };\r\n    }\r\n    if (!isAndroid && multiline) {\r\n        if (dense) {\r\n            if (label) {\r\n                result += scale < 1 ? Math.min(offset, (refFontSize / 2) * scale) : 0;\r\n            } else {\r\n                result += 0;\r\n            }\r\n        }\r\n        if (!dense) {\r\n            if (label) {\r\n                result +=\r\n                    scale < 1\r\n                        ? Math.min(offset, refFontSize * scale)\r\n                        : Math.min(offset / 2, refFontSize * scale);\r\n            } else {\r\n                result += scale < 1 ? Math.min(offset / 2, refFontSize * scale) : 0;\r\n            }\r\n        }\r\n        result = Math.floor(result);\r\n    }\r\n    return { paddingTop: result, paddingBottom: result };\r\n};\r\n\r\nexport const adjustPaddingFlat = ({\r\n    pad,\r\n    scale,\r\n    multiline,\r\n    label,\r\n    height,\r\n    offset,\r\n    dense,\r\n    fontSize,\r\n    isAndroid,\r\n    styles,\r\n}: AdjProps): Padding => {\r\n    let result = pad;\r\n    let topResult = result;\r\n    let bottomResult = result;\r\n    const { paddingTop, paddingBottom } = styles;\r\n    const refFontSize = scale * fontSize;\r\n\r\n    if (!multiline) {\r\n        // do not modify padding if input is not multiline\r\n        if (label) {\r\n            // return const style for flat input with label\r\n            return { paddingTop, paddingBottom };\r\n        }\r\n        // return pad for flat input without label\r\n        return { paddingTop: result, paddingBottom: result };\r\n    }\r\n\r\n    if (label) {\r\n        // add paddings passed from styles\r\n        topResult = paddingTop;\r\n        bottomResult = paddingBottom;\r\n\r\n        // adjust top padding for iOS\r\n        if (!isAndroid) {\r\n            if (dense) {\r\n                topResult +=\r\n                    scale < 1\r\n                        ? Math.min(result, refFontSize * scale) - result / 2\r\n                        : Math.min(result, refFontSize * scale) - result / 2;\r\n            }\r\n            if (!dense) {\r\n                topResult +=\r\n                    scale < 1\r\n                        ? Math.min(offset / 2, refFontSize * scale)\r\n                        : Math.min(result, refFontSize * scale) - offset / 2;\r\n            }\r\n        }\r\n        topResult = Math.floor(topResult);\r\n    } else {\r\n        if (height) {\r\n            // center text when height is passed\r\n            return {\r\n                paddingTop: Math.max(0, (height - fontSize) / 2),\r\n                paddingBottom: Math.max(0, (height - fontSize) / 2),\r\n            };\r\n        }\r\n        // adjust paddings for iOS if no label\r\n        if (!isAndroid) {\r\n            if (dense) {\r\n                result +=\r\n                    scale < 1\r\n                        ? Math.min(offset / 2, (fontSize / 2) * scale)\r\n                        : Math.min(offset / 2, scale);\r\n            }\r\n            if (!dense) {\r\n                result +=\r\n                    scale < 1\r\n                        ? Math.min(offset, fontSize * scale)\r\n                        : Math.min(fontSize, (offset / 2) * scale);\r\n            }\r\n\r\n            result = Math.floor(result);\r\n            topResult = result;\r\n            bottomResult = result;\r\n        }\r\n    }\r\n\r\n    return {\r\n        paddingTop: Math.max(0, topResult),\r\n        paddingBottom: Math.max(0, bottomResult),\r\n    };\r\n};\r\n\r\nexport const interpolatePlaceholder = (\r\n    labeled: Animated.Value,\r\n    hasActiveOutline: boolean | undefined\r\n) =>\r\n    labeled.interpolate({\r\n        inputRange: [0, 1],\r\n        outputRange: [hasActiveOutline ? 0 : 1, 1],\r\n    });\r\n\r\nexport function calculateFlatAffixTopPosition({\r\n    height,\r\n    paddingTop,\r\n    paddingBottom,\r\n    affixHeight,\r\n}: {\r\n    height: number;\r\n    paddingTop: number;\r\n    paddingBottom: number;\r\n    affixHeight: number;\r\n}): number {\r\n    const inputHeightWithoutPadding = height - paddingTop - paddingBottom;\r\n\r\n    const halfOfTheInputHeightDecreasedByAffixHeight =\r\n        (inputHeightWithoutPadding - affixHeight) / 2;\r\n\r\n    return paddingTop + halfOfTheInputHeightDecreasedByAffixHeight;\r\n}\r\n\r\nexport function calculateOutlinedIconAndAffixTopPosition({\r\n    height,\r\n    affixHeight,\r\n    labelYOffset,\r\n}: {\r\n    height: number;\r\n    affixHeight: number;\r\n    labelYOffset: number;\r\n}): number {\r\n    return (height - affixHeight + labelYOffset) / 2;\r\n}\r\n\r\nexport const calculateFlatInputHorizontalPadding = ({\r\n    adornmentConfig,\r\n}: {\r\n    adornmentConfig: AdornmentConfig[];\r\n}) => {\r\n    let paddingLeft = LABEL_PADDING_HORIZONTAL;\r\n    let paddingRight = LABEL_PADDING_HORIZONTAL;\r\n\r\n    adornmentConfig.forEach(({ type, side }) => {\r\n        if (type === AdornmentType.Icon && side === AdornmentSide.Left) {\r\n            paddingLeft = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\r\n        } else if (side === AdornmentSide.Right) {\r\n            if (type === AdornmentType.Affix) {\r\n                paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\r\n            } else if (type === AdornmentType.Icon) {\r\n                paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\r\n            }\r\n        }\r\n    });\r\n\r\n    return { paddingLeft, paddingRight };\r\n};\r\n"]}