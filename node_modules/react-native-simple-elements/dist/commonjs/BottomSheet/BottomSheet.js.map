{"version":3,"sources":["BottomSheet.tsx"],"names":["WindowHeight","Dimensions","get","height","SUPPORTED_ORIENTATIONS","defaultProps","animationType","openDuration","closeDuration","closeOnDragDown","dragFromTopOnly","closeOnPressBack","keyboardAvoidingViewEnabled","Platform","OS","customStyles","onDismiss","onOpen","children","backdropColor","BottomSheet","visible","dismissable","contentContainerStyle","isVisible","setIsVisible","React","useState","theme","useContext","ThemeContext","scaleYValue","useRef","Animated","Value","pan","ValueXY","panResponder","undefined","useEffect","setModalVisible","timing","current","toValue","duration","useNativeDriver","start","setValue","x","y","createPanResponder","PanResponder","create","onStartShouldSetPanResponder","onPanResponderMove","e","gestureState","dy","event","onPanResponderRelease","spring","close","panStyle","transform","getTranslateTransform","styles","safeArea","flex","backgroundColor","wrapper","backdrop","colors","opacity","interpolate","inputRange","outputRange","panHandlers","width","overflow","translateY","flexDirection","justifyContent","position","bottom","left","right","container","alignItems","borderRadius","margin","draggableIcon","StyleSheet"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Dimensions, SafeAreaView } from \"react-native\";\r\nimport { TouchableWithoutFeedback } from \"react-native\";\r\nimport {\r\n    View,\r\n    KeyboardAvoidingView,\r\n    Modal as RNModal,\r\n    Animated,\r\n    PanResponder,\r\n    Platform,\r\n    StyleProp,\r\n    ViewStyle,\r\n    StyleSheet,\r\n} from \"react-native\";\r\nimport { ThemeContext } from \"styled-components\";\r\n\r\nconst WindowHeight = Dimensions.get(\"window\").height;\r\n\r\nconst SUPPORTED_ORIENTATIONS = [\r\n    \"portrait\",\r\n    \"portrait-upside-down\",\r\n    \"landscape\",\r\n    \"landscape-left\",\r\n    \"landscape-right\"\r\n];\r\n\r\nexport type Props = {\r\n    animationType?: \"none\" | \"slide\" | \"fade\",\r\n    visible: boolean,\r\n    dismissable?: boolean,\r\n    openDuration?: number,\r\n    closeDuration?: number,\r\n    closeOnDragDown?: boolean,\r\n    dragFromTopOnly?: boolean,\r\n    closeOnPressBack?: boolean,\r\n    keyboardAvoidingViewEnabled?: boolean,\r\n    customStyles?: Record<string, unknown>,\r\n    onDismiss: (evt?) => void,\r\n    onOpen?: (evt?) => void,\r\n    children?: React.ReactNode,\r\n    backdropColor?: string,\r\n    contentContainerStyle?: StyleProp<ViewStyle>,\r\n};\r\n\r\n// type State = {\r\n//     animatedHeight: Animated.Value,\r\n//     pan: Animated.ValueXY,\r\n//     modalVisible: boolean,\r\n// }\r\n\r\nconst defaultProps = {\r\n    animationType: \"none\",\r\n    openDuration: 100,\r\n    closeDuration: 100,\r\n    closeOnDragDown: false,\r\n    dragFromTopOnly: false,\r\n    closeOnPressBack: true,\r\n    keyboardAvoidingViewEnabled: Platform.OS === \"ios\",\r\n    customStyles: {},\r\n    onDismiss: null,\r\n    onOpen: null,\r\n    children: <View />,\r\n    backdropColor: \"#00000077\",\r\n};\r\n\r\nconst BottomSheet = ({\r\n    visible,\r\n    dismissable,\r\n    animationType,\r\n    closeOnDragDown,\r\n    dragFromTopOnly,\r\n    closeOnPressBack,\r\n    children,\r\n    customStyles,\r\n    keyboardAvoidingViewEnabled,\r\n    openDuration,\r\n    closeDuration,\r\n    onOpen,\r\n    onDismiss,\r\n    backdropColor,\r\n    contentContainerStyle,\r\n}: Props) => {\r\n\r\n    const [ isVisible, setIsVisible ] = React.useState(false);\r\n    const theme = React.useContext(ThemeContext);\r\n    const scaleYValue = React.useRef(new Animated.Value(0));\r\n\r\n    const pan = React.useRef(new Animated.ValueXY());\r\n\r\n    const panResponder = React.useRef(undefined);\r\n\r\n    React.useEffect(() => {\r\n        if (!isVisible && visible) {\r\n            setModalVisible(true);\r\n        } else if (isVisible && !visible) {\r\n            setModalVisible(false);\r\n        }\r\n    }, [ visible ]);\r\n\r\n    // state: State = {\r\n    //     modalVisible: false,\r\n    //     animatedHeight: new Animated.Value(0),\r\n    //     pan: new Animated.ValueXY()\r\n    // };\r\n\r\n    // panResponder;\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n\r\n    //     this.createPanResponder(props);\r\n    // }\r\n\r\n    const setModalVisible = (visible) => {\r\n        if (visible) {\r\n            setIsVisible(visible);\r\n            if (typeof onOpen === \"function\") onOpen();\r\n            Animated.timing(scaleYValue.current, {\r\n                toValue: WindowHeight,\r\n                duration: openDuration || 300,\r\n                useNativeDriver: true,\r\n            }).start();\r\n        } else {\r\n            Animated.timing(scaleYValue.current, {\r\n                toValue: 0,\r\n                duration: closeDuration || 100,\r\n                useNativeDriver: true,\r\n            })\r\n                .start(() => {\r\n                    pan.current.setValue({ x: 0, y: 0 });\r\n                    setIsVisible(visible);\r\n                    scaleYValue.current = new Animated.Value(0);\r\n\r\n                    // this.setState({\r\n                    //     modalVisible: visible,\r\n                    //     animatedHeight: new Animated.Value(0)\r\n                    // });\r\n\r\n                    if (typeof onDismiss === \"function\") onDismiss();\r\n                });\r\n        }\r\n    };\r\n\r\n    const createPanResponder = () => {\r\n        // const { closeOnDragDown, height } = props;\r\n        // const { pan } = this.state;\r\n        panResponder.current = PanResponder.create({\r\n            onStartShouldSetPanResponder: () => closeOnDragDown,\r\n            onPanResponderMove: (e, gestureState) => {\r\n                if (gestureState.dy > 0) {\r\n                    Animated.event([null, { dy: pan.current.y }], { useNativeDriver: false })(e, gestureState);\r\n                }\r\n            },\r\n            onPanResponderRelease: (e, gestureState) => {\r\n                // if (height / 4 - gestureState.dy < 0) {\r\n                if (gestureState.dy > 15) {\r\n                    setModalVisible(false);\r\n                } else {\r\n                    Animated.spring(pan.current, { toValue: { x: 0, y: 0 }, useNativeDriver: false }).start();\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    // const open = (props?) => {\r\n    //     setModalVisible(true, props);\r\n    // }\r\n\r\n    const close = () => {\r\n        if (onDismiss) {\r\n            onDismiss();\r\n        }\r\n    };\r\n\r\n    // const { animatedHeight, pan } = this.state;\r\n\r\n    if (!panResponder.current) {\r\n        createPanResponder();\r\n    }\r\n\r\n    const panStyle = {\r\n        transform: pan.current.getTranslateTransform()\r\n    };\r\n\r\n    return (\r\n        <RNModal\r\n            transparent\r\n            animationType={animationType}\r\n            visible={isVisible}\r\n            dismissable={dismissable}\r\n            // @ts-ignore\r\n            supportedOrientations={SUPPORTED_ORIENTATIONS}\r\n            onRequestClose={() => {\r\n                if (closeOnPressBack) setModalVisible(false);\r\n            }}\r\n        >\r\n            <SafeAreaView\r\n                style={styles.safeArea}\r\n            >\r\n                <KeyboardAvoidingView\r\n                    enabled={keyboardAvoidingViewEnabled}\r\n                    behavior=\"padding\"\r\n                    style={[\r\n                        {\r\n                            flex: 1,\r\n                            backgroundColor: backdropColor,\r\n                        },\r\n                        customStyles.wrapper,\r\n                    ]}\r\n                >\r\n                    <TouchableWithoutFeedback\r\n                        // accessibilityLabel={overlayAccessibilityLabel}\r\n                        accessibilityRole=\"button\"\r\n                        disabled={!dismissable}\r\n                        onPress={dismissable ? close : undefined}\r\n                    >\r\n                        <Animated.View\r\n                            style={[\r\n                                styles.backdrop,\r\n                                {\r\n                                    flex: 1,\r\n                                },\r\n                                { backgroundColor: theme.colors.backdrop, opacity: scaleYValue.current.interpolate({\r\n                                    inputRange: [0, WindowHeight],\r\n                                    outputRange: [0, 1],\r\n                                }) },\r\n                            ]}\r\n                        />\r\n                    </TouchableWithoutFeedback>\r\n                    <Animated.View\r\n                        {...(!dragFromTopOnly && panResponder.current?.panHandlers ? panResponder.current.panHandlers : {} )}\r\n                        style={[\r\n                            panStyle,\r\n                            {\r\n                                // backgroundColor: theme.colors.backdrop,\r\n                                backgroundColor: \"transparent\",\r\n                                width: \"100%\",\r\n                                overflow: \"hidden\",\r\n                                height: WindowHeight,\r\n                                transform: [\r\n                                    {\r\n                                        translateY: scaleYValue.current.interpolate({\r\n                                            inputRange: [0, WindowHeight],\r\n                                            outputRange: [WindowHeight, 0],\r\n                                        })\r\n                                    }\r\n                                ]\r\n                            },\r\n                            {\r\n                                flexDirection: \"column\",\r\n                                justifyContent: \"flex-end\",\r\n                                flex: 1,\r\n                                position: \"absolute\",\r\n                                bottom: 0,\r\n                                left: 0,\r\n                                right: 0,\r\n                            },\r\n                            contentContainerStyle,\r\n                            customStyles.container\r\n                        ]}\r\n                        pointerEvents=\"box-none\"\r\n                    >\r\n                        {closeOnDragDown && (\r\n                            <View\r\n                                {...(dragFromTopOnly && panResponder.current?.panHandlers ? panResponder.current.panHandlers : {} )}\r\n                                style={{\r\n                                    width: \"100%\",\r\n                                    alignItems: \"center\",\r\n                                    backgroundColor: \"transparent\"\r\n                                }}\r\n                            >\r\n                                <View style={[\r\n                                    {\r\n                                        width: 35,\r\n                                        height: 5,\r\n                                        borderRadius: 5,\r\n                                        margin: 10,\r\n                                        backgroundColor: \"#ccc\",\r\n                                    },\r\n                                    customStyles.draggableIcon,\r\n                                ]} />\r\n                            </View>\r\n                        )}\r\n                        <View\r\n                            style={{\r\n                                flex: 1,\r\n                            }}\r\n                            pointerEvents=\"none\"\r\n                        >\r\n                        </View>\r\n                        {children}\r\n                    </Animated.View>\r\n                </KeyboardAvoidingView>\r\n            </SafeAreaView>\r\n        </RNModal>\r\n    );\r\n};\r\n\r\nBottomSheet.defaultProps = defaultProps;\r\n\r\nconst styles = StyleSheet.create({\r\n    safeArea: {\r\n        flex: 1,\r\n    },\r\n    backdrop: {\r\n    },\r\n});\r\n\r\nexport default BottomSheet;\r\n"]}