{"version":3,"sources":["ListAccordion.tsx"],"names":["ListAccordion","left","title","description","children","titleStyle","descriptionStyle","titleNumberOfLines","descriptionNumberOfLines","style","id","testID","onPress","onLongPress","expanded","expandedProp","theme","React","useContext","ThemeContext","setExpanded","useState","handlePressAction","undefined","titleColor","colors","text","alpha","rgb","string","descriptionColor","expandedInternal","groupContext","ListAccordionGroupContext","Error","isExpanded","expandedId","handlePress","onAccordionPress","ChevronIcon","ChevronUpIcon","ChevronDownIcon","styles","container","row","color","primary","item","content","multiline","I18nManager","isRTL","Children","map","child","isValidElement","props","right","cloneElement","displayName","StyleSheet","create","padding","flexDirection","alignItems","height","justifyContent","fontSize","margin","paddingLeft","flex"],"mappings":"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","sourcesContent":["import color from \"color\";\r\nimport * as React from \"react\";\r\nimport {\r\n    View,\r\n    ViewStyle,\r\n    StyleSheet,\r\n    StyleProp,\r\n    TextStyle,\r\n    I18nManager,\r\n} from \"react-native\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\nimport ChevronUpIcon from \"@mdi/svg/svg/chevron-up.svg\";\r\nimport ChevronDownIcon from \"@mdi/svg/svg/chevron-down.svg\";\r\nimport TouchableRipple from \"../TouchableRipple\";\r\nimport Text from \"../Text\";\r\nimport { ListAccordionGroupContext } from \"./ListAccordionGroup\";\r\n\r\ntype Props = {\r\n    /**\r\n     * Title text for the list accordion.\r\n     */\r\n    title: React.ReactNode;\r\n    /**\r\n     * Description text for the list accordion.\r\n     */\r\n    description?: React.ReactNode;\r\n    /**\r\n     * Callback which returns a React element to display on the left side.\r\n     */\r\n    left?: (props: { color: string }) => React.ReactNode;\r\n    /**\r\n     * Whether the accordion is expanded\r\n     * If this prop is provided, the accordion will behave as a \"controlled component\".\r\n     * You'll need to update this prop when you want to toggle the component or on `onPress`.\r\n     */\r\n    expanded?: boolean;\r\n    /**\r\n     * Function to execute on press.\r\n     */\r\n    onPress?: () => void;\r\n    /**\r\n     * Function to execute on long press.\r\n     */\r\n    onLongPress?: () => void;\r\n    /**\r\n     * Content of the section.\r\n     */\r\n    children: React.ReactNode;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n    /**\r\n     * Style that is passed to the wrapping TouchableRipple element.\r\n     */\r\n    style?: StyleProp<ViewStyle>;\r\n    /**\r\n     * Style that is passed to Title element.\r\n     */\r\n    titleStyle?: StyleProp<TextStyle>;\r\n    /**\r\n     * Style that is passed to Description element.\r\n     */\r\n    descriptionStyle?: StyleProp<TextStyle>;\r\n    /**\r\n     * Truncate Title text such that the total number of lines does not\r\n     * exceed this number.\r\n     */\r\n    titleNumberOfLines?: number;\r\n    /**\r\n     * Truncate Description text such that the total number of lines does not\r\n     * exceed this number.\r\n     */\r\n    descriptionNumberOfLines?: number;\r\n    /**\r\n     * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\r\n     */\r\n    id?: string | number;\r\n    /**\r\n     * TestID used for testing purposes\r\n     */\r\n    testID?: string;\r\n};\r\n\r\n/**\r\n * A component used to display an expandable list item.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\r\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\r\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { ListItem } from 'react-native-simple-elements/components/List';\r\n *\r\n * const MyComponent = () => {\r\n *   const [expanded, setExpanded] = React.useState(true);\r\n *\r\n *   const handlePress = () => setExpanded(!expanded);\r\n *\r\n *   return (\r\n *     <List.Section title=\"Accordions\">\r\n *       <List.Accordion\r\n *         title=\"Uncontrolled Accordion\"\r\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\r\n *         <List.Item title=\"First item\" />\r\n *         <List.Item title=\"Second item\" />\r\n *       </List.Accordion>\r\n *\r\n *       <List.Accordion\r\n *         title=\"Controlled Accordion\"\r\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\r\n *         expanded={expanded}\r\n *         onPress={handlePress}>\r\n *         <List.Item title=\"First item\" />\r\n *         <List.Item title=\"Second item\" />\r\n *       </List.Accordion>\r\n *     </List.Section>\r\n *   );\r\n * };\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst ListAccordion = ({\r\n    left,\r\n    title,\r\n    description,\r\n    children,\r\n    titleStyle,\r\n    descriptionStyle,\r\n    titleNumberOfLines = 1,\r\n    descriptionNumberOfLines = 2,\r\n    style,\r\n    id,\r\n    testID,\r\n    onPress,\r\n    onLongPress,\r\n    expanded: expandedProp,\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n    const [expanded, setExpanded] = React.useState<boolean>(\r\n        expandedProp || false\r\n    );\r\n\r\n    const handlePressAction = () => {\r\n        onPress?.();\r\n\r\n        if (expandedProp === undefined) {\r\n            // Only update state of the `expanded` prop was not passed\r\n            // If it was passed, the component will act as a controlled component\r\n            setExpanded((expanded) => !expanded);\r\n        }\r\n    };\r\n\r\n    const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\r\n    const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\r\n\r\n    const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\r\n\r\n    const groupContext = React.useContext(ListAccordionGroupContext);\r\n    if (groupContext !== null && !id) {\r\n        throw new Error(\r\n            \"List.Accordion is used inside a List.AccordionGroup without specifying an id prop.\"\r\n        );\r\n    }\r\n    const isExpanded = groupContext\r\n        ? groupContext.expandedId === id\r\n        : expandedInternal;\r\n    const handlePress =\r\n        groupContext && id !== undefined\r\n            ? () => groupContext.onAccordionPress(id)\r\n            : handlePressAction;\r\n\r\n    const ChevronIcon = isExpanded ? ChevronUpIcon : ChevronDownIcon;\r\n\r\n    return (\r\n        <View>\r\n            <TouchableRipple\r\n                style={[styles.container, style]}\r\n                onPress={handlePress}\r\n                onLongPress={onLongPress}\r\n                // accessibilityTraits=\"button\"\r\n                // accessibilityComponentType=\"button\"\r\n                accessibilityRole=\"button\"\r\n                testID={testID}\r\n            >\r\n                <View style={styles.row} pointerEvents=\"none\">\r\n                    {left\r\n                        ? left({\r\n                            color: isExpanded ? theme.colors.primary : descriptionColor,\r\n                        })\r\n                        : null}\r\n                    <View style={[styles.item, styles.content]}>\r\n                        <Text\r\n                            selectable={false}\r\n                            numberOfLines={titleNumberOfLines}\r\n                            style={[\r\n                                styles.title,\r\n                                {\r\n                                    color: isExpanded ? theme.colors.primary : titleColor,\r\n                                },\r\n                                titleStyle,\r\n                            ]}\r\n                        >\r\n                            {title}\r\n                        </Text>\r\n                        {description && (\r\n                            <Text\r\n                                selectable={false}\r\n                                numberOfLines={descriptionNumberOfLines}\r\n                                style={[\r\n                                    styles.description,\r\n                                    {\r\n                                        color: descriptionColor,\r\n                                    },\r\n                                    descriptionStyle,\r\n                                ]}\r\n                            >\r\n                                {description}\r\n                            </Text>\r\n                        )}\r\n                    </View>\r\n                    <View\r\n                        style={[styles.item, description ? styles.multiline : undefined]}\r\n                    >\r\n                        <ChevronIcon\r\n                            color={titleColor}\r\n                            size={24}\r\n                            direction={I18nManager.isRTL ? \"rtl\" : \"ltr\"}\r\n                        />\r\n                    </View>\r\n                </View>\r\n            </TouchableRipple>\r\n            {isExpanded\r\n                ? React.Children.map(children, (child) => {\r\n                    if (\r\n                        left &&\r\n                        React.isValidElement(child) &&\r\n                        !child.props.left &&\r\n                        !child.props.right\r\n                    ) {\r\n                        return React.cloneElement(child, {\r\n                            style: [styles.child, child.props.style],\r\n                        });\r\n                    }\r\n\r\n                    return child;\r\n                })\r\n                : null}\r\n        </View>\r\n    );\r\n};\r\n\r\nListAccordion.displayName = \"List.Accordion\";\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        padding: 8,\r\n    },\r\n    row: {\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n    },\r\n    multiline: {\r\n        height: 40,\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    title: {\r\n        fontSize: 16,\r\n    },\r\n    description: {\r\n        fontSize: 14,\r\n    },\r\n    item: {\r\n        margin: 8,\r\n    },\r\n    child: {\r\n        paddingLeft: 64,\r\n    },\r\n    content: {\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n    },\r\n});\r\n\r\nexport default ListAccordion;\r\n"]}