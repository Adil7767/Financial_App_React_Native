{"version":3,"sources":["ListItem.tsx"],"names":["ListItem","left","right","content","title","description","onPress","style","focusedStyle","hoveredStyle","pressedStyle","rowStyle","contentStyle","titleStyle","titleNumberOfLines","descriptionNumberOfLines","titleEllipsizeMode","descriptionEllipsizeMode","descriptionStyle","rest","theme","React","useContext","ThemeContext","renderDescription","descriptionColor","selectable","ellipsizeMode","color","fontSize","styles","titleColor","colors","text","alpha","rgb","string","container","row","iconMarginLeft","marginVerticalNone","item","iconMarginRight","displayName","StyleSheet","create","padding","flexDirection","alignItems","marginVertical","marginLeft","marginRight","paddingLeft","flexBasis","flexGrow","justifyContent"],"mappings":"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","sourcesContent":["import color from \"color\";\r\nimport * as React from \"react\";\r\nimport {\r\n    StyleProp,\r\n    StyleSheet,\r\n    TextStyle,\r\n    View,\r\n    ViewStyle,\r\n} from \"react-native\";\r\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\r\nimport Text from \"../Text\";\r\nimport { $RemoveChildren, EllipsizeProp } from \"../types\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\n\r\ntype Description =\r\n    | React.ReactNode\r\n    | ((props: {\r\n        selectable: boolean;\r\n        ellipsizeMode: EllipsizeProp | undefined;\r\n        color: string;\r\n        fontSize: number;\r\n    }) => React.ReactNode);\r\n\r\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\r\n    /**\r\n     * Title text for the list item.\r\n     */\r\n    title?: React.ReactNode;\r\n    /**\r\n     * Description text for the list item or callback which returns a React element to display the description.\r\n     */\r\n    description?: Description | null;\r\n    /**\r\n     * Callback which returns a React element to display on the left side.\r\n     */\r\n    left?: (props: {\r\n        color: string;\r\n        style: {\r\n            marginLeft: number;\r\n            marginRight: number;\r\n            marginVertical?: number;\r\n        };\r\n    }) => React.ReactNode;\r\n    /**\r\n     * Callback which returns a React element to display on the right side.\r\n     */\r\n    right?: (props: {\r\n        color: string;\r\n        style?: {\r\n            marginRight: number;\r\n            marginVertical?: number;\r\n        };\r\n    }) => React.ReactNode;\r\n    /**\r\n     * Callback which returns a React element to display on the right side.\r\n     */\r\n    content?: (props: {\r\n        color: string;\r\n        style?: {\r\n            marginRight?: number;\r\n            marginVertical?: number;\r\n        };\r\n    }) => React.ReactNode;\r\n    /**\r\n     * Function to execute on press.\r\n     */\r\n    onPress?: () => void;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n    /**\r\n     * Style that is passed to the wrapping TouchableRipple element.\r\n     */\r\n    style?: StyleProp<ViewStyle>;\r\n\r\n    focusedStyle?: StyleProp<ViewStyle>;\r\n    hoveredStyle?: StyleProp<ViewStyle>;\r\n    pressedStyle?: StyleProp<ViewStyle>;\r\n\r\n    /**\r\n     * Style that is passed to wrap content.\r\n     */\r\n    rowStyle?: StyleProp<ViewStyle>;\r\n    /**\r\n     * Style that is passed to wrap content.\r\n     */\r\n    contentStyle?: StyleProp<ViewStyle>;\r\n    /**\r\n     * Style that is passed to Title element.\r\n     */\r\n    titleStyle?: StyleProp<TextStyle>;\r\n    /**\r\n     * Style that is passed to Description element.\r\n     */\r\n    descriptionStyle?: StyleProp<TextStyle>;\r\n    /**\r\n     * Truncate Title text such that the total number of lines does not\r\n     * exceed this number.\r\n     */\r\n    titleNumberOfLines?: number;\r\n    /**\r\n     * Truncate Description text such that the total number of lines does not\r\n     * exceed this number.\r\n     */\r\n    descriptionNumberOfLines?: number;\r\n    /**\r\n     * Ellipsize Mode for the Title.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\r\n     *\r\n     * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\r\n     */\r\n    titleEllipsizeMode?: EllipsizeProp;\r\n    /**\r\n     * Ellipsize Mode for the Description.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\r\n     *\r\n     * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\r\n     */\r\n    descriptionEllipsizeMode?: EllipsizeProp;\r\n};\r\n\r\n/**\r\n * A component to show tiles inside a List.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\r\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\r\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { ListItem } from 'react-native-simple-elements/components/List';\r\n *\r\n * const MyComponent = () => (\r\n *   <ListItem\r\n *     title=\"First Item\"\r\n *     description=\"Item description\"\r\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\r\n *   />\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n *\r\n */\r\nconst ListItem = ({\r\n    left,\r\n    right,\r\n    content,\r\n    title,\r\n    description,\r\n    onPress,\r\n    style,\r\n    focusedStyle,\r\n    hoveredStyle,\r\n    pressedStyle,\r\n    rowStyle,\r\n    contentStyle,\r\n    titleStyle,\r\n    titleNumberOfLines = 1,\r\n    descriptionNumberOfLines = 2,\r\n    titleEllipsizeMode,\r\n    descriptionEllipsizeMode,\r\n    descriptionStyle,\r\n    ...rest\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n    const renderDescription = (\r\n        descriptionColor: string,\r\n        description?: Description | null\r\n    ) => {\r\n        return typeof description === \"function\" ? (\r\n            description({\r\n                selectable: false,\r\n                ellipsizeMode: descriptionEllipsizeMode,\r\n                color: descriptionColor,\r\n                fontSize: styles.description.fontSize,\r\n            })\r\n        ) : (\r\n            <Text\r\n                selectable={false}\r\n                numberOfLines={descriptionNumberOfLines}\r\n                ellipsizeMode={descriptionEllipsizeMode}\r\n                style={[\r\n                    styles.description,\r\n                    { color: descriptionColor },\r\n                    descriptionStyle,\r\n                ]}\r\n            >\r\n                {description}\r\n            </Text>\r\n        );\r\n    };\r\n\r\n    const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\r\n    const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\r\n\r\n    return (\r\n        <TouchableRipple\r\n            {...rest}\r\n            style={[styles.container, style]}\r\n            focusedStyle={focusedStyle}\r\n            hoveredStyle={hoveredStyle}\r\n            pressedStyle={pressedStyle}\r\n            onPress={onPress}\r\n        >\r\n            <View style={[styles.row, rowStyle]}>\r\n                {left\r\n                    ? left({\r\n                        color: descriptionColor,\r\n                        style: description\r\n                            ? styles.iconMarginLeft\r\n                            : {\r\n                                ...styles.iconMarginLeft,\r\n                                ...styles.marginVerticalNone,\r\n                            },\r\n                    })\r\n                    : null}\r\n                <View style={[styles.item, styles.content, contentStyle]}>\r\n                    {content\r\n                        ? content({\r\n                            color: titleColor,\r\n                            style: {\r\n                            }\r\n                        })\r\n                        : (\r\n                            <>\r\n                                <Text\r\n                                    selectable={false}\r\n                                    ellipsizeMode={titleEllipsizeMode}\r\n                                    numberOfLines={titleNumberOfLines}\r\n                                    style={[styles.title, { color: titleColor }, titleStyle]}\r\n                                >\r\n                                    {title}\r\n                                </Text>\r\n                                {description\r\n                                    ? renderDescription(descriptionColor, description)\r\n                                    : null}\r\n                            </>\r\n                        )\r\n                    }\r\n                </View>\r\n                {right\r\n                    ? right({\r\n                        color: descriptionColor,\r\n                        style: description\r\n                            ? styles.iconMarginRight\r\n                            : {\r\n                                ...styles.iconMarginRight,\r\n                                ...styles.marginVerticalNone,\r\n                            },\r\n                    })\r\n                    : null}\r\n            </View>\r\n        </TouchableRipple>\r\n    );\r\n};\r\n\r\nListItem.displayName = \"List.Item\";\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        padding: 8,\r\n    },\r\n    row: {\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n    },\r\n    title: {\r\n        fontSize: 16,\r\n    },\r\n    description: {\r\n        fontSize: 14,\r\n    },\r\n    marginVerticalNone: { marginVertical: 0 },\r\n    iconMarginLeft: { marginLeft: 0, marginRight: 16 },\r\n    iconMarginRight: { marginRight: 0 },\r\n    item: {\r\n        marginVertical: 6,\r\n        paddingLeft: 8,\r\n    },\r\n    content: {\r\n        flexBasis: \"auto\",\r\n        flexGrow: 1,\r\n        justifyContent: \"center\",\r\n    },\r\n});\r\n\r\nexport default ListItem;\r\n"]}