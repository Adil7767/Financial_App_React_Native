"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Input = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _styledComponents = require("styled-components");

var _helpers = require("../helpers");

var _Icon = require("../Icon");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const renderText = (content, defaultProps, style) => (0, _helpers.renderNode)(_reactNative.Text, content, { ...defaultProps,
  style: _reactNative.StyleSheet.flatten([style, defaultProps && defaultProps.style])
});

class Input extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "input", void 0);

    _defineProperty(this, "shakeAnimationValue", new _reactNative.Animated.Value(0));

    _defineProperty(this, "shake", () => {
      const {
        shakeAnimationValue
      } = this;
      shakeAnimationValue.setValue(0); // Animation duration based on Material Design
      // https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations

      _reactNative.Animated.timing(shakeAnimationValue, {
        duration: 375,
        toValue: 3,
        easing: _reactNative.Easing.bounce,
        useNativeDriver: true
      }).start();
    });
  }

  focus() {
    this.input.focus();
  }

  blur() {
    this.input.blur();
  }

  clear() {
    this.input.clear();
  }

  isFocused() {
    return this.input.isFocused();
  }

  setNativeProps(nativeProps) {
    this.input.setNativeProps(nativeProps);
  }

  render() {
    var _this$context$colors, _this$context$colors2;

    const {
      containerStyle,
      disabled,
      disabledInputStyle,
      inputContainerStyle,
      leftIcon,
      leftIconContainerStyle,
      rightIcon,
      rightIconContainerStyle,
      InputComponent = _reactNative.TextInput,
      inputStyle,
      errorProps,
      errorStyle,
      errorMessage,
      label,
      labelStyle,
      labelProps,
      renderErrorMessage = true,
      style,
      ...attributes
    } = this.props;
    const translateX = this.shakeAnimationValue.interpolate({
      inputRange: [0, 0.5, 1, 1.5, 2, 2.5, 3],
      outputRange: [0, -15, 0, 15, 0, -15, 0]
    });
    const hideErrorMessage = !renderErrorMessage && !errorMessage;
    return /*#__PURE__*/React.createElement(_reactNative.View, {
      testID: "input__view-wrapper",
      style: _reactNative.StyleSheet.flatten([styles.container, containerStyle])
    }, renderText(label, {
      style: labelStyle,
      ...labelProps
    }, {
      fontSize: 16,
      color: this.context.colors.surface,
      ..._reactNative.Platform.select({
        android: {
          fontFamily: "sans-serif",
          fontWeight: "bold" // ...fonts.android.bold,

        },
        default: {
          fontWeight: "bold"
        }
      })
    }), /*#__PURE__*/React.createElement(_reactNative.Animated.View, {
      style: _reactNative.StyleSheet.flatten([{
        flexDirection: "row",
        borderBottomWidth: 1,
        alignItems: "center",
        borderColor: this.context.colors.surface
      }, inputContainerStyle, {
        transform: [{
          translateX
        }]
      }])
    }, leftIcon && /*#__PURE__*/React.createElement(_reactNative.View, {
      style: _reactNative.StyleSheet.flatten([styles.iconContainer, leftIconContainerStyle])
    }, (0, _helpers.renderNode)(_Icon.SvgIcon, leftIcon)), /*#__PURE__*/React.createElement(InputComponent, _extends({
      testID: "input__text-input",
      underlineColorAndroid: "transparent",
      editable: !disabled,
      ref: ref => {
        this.input = ref;
      },
      style: _reactNative.StyleSheet.flatten([{
        color: (_this$context$colors = this.context.colors) === null || _this$context$colors === void 0 ? void 0 : _this$context$colors.black,
        fontSize: 18,
        flex: 1,
        minHeight: 40
      }, inputStyle, disabled && styles.disabledInput, disabled && disabledInputStyle, style]),
      placeholderTextColor: (_this$context$colors2 = this.context.colors) === null || _this$context$colors2 === void 0 ? void 0 : _this$context$colors2.surface
    }, attributes)), rightIcon && /*#__PURE__*/React.createElement(_reactNative.View, {
      style: _reactNative.StyleSheet.flatten([styles.iconContainer, rightIconContainerStyle])
    }, (0, _helpers.renderNode)(_Icon.SvgIcon, rightIcon))), /*#__PURE__*/React.createElement(_reactNative.Text, _extends({}, errorProps, {
      style: _reactNative.StyleSheet.flatten([{
        margin: 5,
        fontSize: 12,
        color: this.context.colors.error
      }, errorStyle && errorStyle, hideErrorMessage && {
        height: 0,
        margin: 0,
        padding: 0
      }])
    }), errorMessage));
  }

}

exports.Input = Input;

_defineProperty(Input, "displayName", "Input");

_defineProperty(Input, "contextType", _styledComponents.ThemeContext);

const styles = _reactNative.StyleSheet.create({
  container: {
    width: "100%",
    paddingHorizontal: 10
  },
  disabledInput: {
    opacity: 0.5
  },
  iconContainer: {
    height: 40,
    justifyContent: "center",
    alignItems: "center",
    paddingRight: 4,
    marginVertical: 4
  }
});
//# sourceMappingURL=TextInput2.js.map