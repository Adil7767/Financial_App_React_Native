{"version":3,"sources":["ActivityIndicator.tsx"],"names":["ActivityIndicatorContainer","styled","View","DURATION","ActivityIndicator","animating","color","indicatorColor","hidesWhenStopped","size","indicatorSize","style","theme","React","useContext","ThemeContext","current","timer","useRef","Animated","Value","fade","rotation","undefined","animation","scale","startRotation","useCallback","timing","duration","toValue","isInteraction","useNativeDriver","start","setValue","loop","stopRotation","stop","useEffect","easing","Easing","linear","Platform","OS","colors","primary","frames","bezier","layerStyle0","StyleSheet","absoluteFillObject","justifyContent","alignItems","containerStyle","width","height","overflow","opacity","map","index","inputRange","Array","from","_","frameIndex","outputRange","progress","direction","layerStyle","transform","rotate","interpolate","viewportStyle","translateY","offsetStyle","top","lineStyle","borderColor","borderWidth","borderRadius"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    Animated,\r\n    Easing,\r\n    Platform,\r\n    StyleProp,\r\n    StyleSheet,\r\n    View,\r\n    ViewStyle,\r\n} from \"react-native\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\nimport styled from \"styled-components/native\";\r\n\r\nconst ActivityIndicatorContainer = styled.View`\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\ntype Props = React.ComponentPropsWithRef<typeof View> & {\r\n    /**\r\n     * Whether to show the indicator or hide it.\r\n     */\r\n    animating?: boolean;\r\n    /**\r\n     * The color of the spinner.\r\n     */\r\n    color?: string;\r\n    /**\r\n     * Size of the indicator.\r\n     */\r\n    size?: \"small\" | \"large\" | number;\r\n    /**\r\n     * Whether the indicator should hide when not animating.\r\n     */\r\n    hidesWhenStopped?: boolean;\r\n    style?: StyleProp<ViewStyle>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n};\r\n\r\nconst DURATION = 2400;\r\n\r\n/**\r\n * Activity indicator is used to present progress of some activity in the app.\r\n * It can be used as a drop-in for the ActivityIndicator shipped with React Native.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img src=\"screenshots/activity-indicator.gif\" style=\"width: 100px;\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import ActivityIndicator from \"react-native-simple-elements/components/ActivityIndicator\";\r\n * import * as Colors from 'react-native-simple-elements/components/theme/colors';\r\n *\r\n * const MyComponent = () => (\r\n *     <ActivityIndicator animating={true} color={Colors.red800} />\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst ActivityIndicator = ({\r\n    animating = true,\r\n    color: indicatorColor,\r\n    hidesWhenStopped = true,\r\n    size: indicatorSize = \"small\",\r\n    style,\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n\r\n    const { current: timer } = React.useRef<Animated.Value>(\r\n        new Animated.Value(0)\r\n    );\r\n    const { current: fade } = React.useRef<Animated.Value>(\r\n        new Animated.Value(!animating && hidesWhenStopped ? 0 : 1)\r\n    );\r\n\r\n    const rotation = React.useRef<Animated.CompositeAnimation | undefined>(\r\n        undefined\r\n    );\r\n\r\n    const {\r\n        animation: { scale },\r\n    } = theme;\r\n\r\n    const startRotation = React.useCallback(() => {\r\n        // Show indicator\r\n        Animated.timing(fade, {\r\n            duration: 200 * scale,\r\n            toValue: 1,\r\n            isInteraction: false,\r\n            useNativeDriver: true,\r\n        }).start();\r\n\r\n        // Circular animation in loop\r\n        if (rotation.current) {\r\n            timer.setValue(0);\r\n            // $FlowFixMe\r\n            Animated.loop(rotation.current).start();\r\n        }\r\n    }, [scale, fade, timer]);\r\n\r\n    const stopRotation = () => {\r\n        if (rotation.current) {\r\n            rotation.current.stop();\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (rotation.current === undefined) {\r\n            // Circular animation in loop\r\n            rotation.current = Animated.timing(timer, {\r\n                duration: DURATION,\r\n                easing: Easing.linear,\r\n                // Animated.loop does not work if useNativeDriver is true on web\r\n                useNativeDriver: Platform.OS !== \"web\",\r\n                toValue: 1,\r\n                isInteraction: false,\r\n            });\r\n        }\r\n\r\n        if (animating) {\r\n            startRotation();\r\n        } else if (hidesWhenStopped) {\r\n            // Hide indicator first and then stop rotation\r\n            Animated.timing(fade, {\r\n                duration: 200 * scale,\r\n                toValue: 0,\r\n                useNativeDriver: true,\r\n                isInteraction: false,\r\n            }).start(stopRotation);\r\n        } else {\r\n            stopRotation();\r\n        }\r\n    }, [animating, fade, hidesWhenStopped, startRotation, scale, timer]);\r\n\r\n    const color = indicatorColor || theme.colors.primary;\r\n    const size =\r\n        typeof indicatorSize === \"string\"\r\n            ? indicatorSize === \"small\"\r\n                ? 24\r\n                : 48\r\n            : indicatorSize\r\n                ? indicatorSize\r\n                : 24;\r\n\r\n    const frames = (60 * DURATION) / 1000;\r\n    const easing = Easing.bezier(0.4, 0.0, 0.7, 1.0);\r\n    const layerStyle0 = {\r\n        ...StyleSheet.absoluteFillObject,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    } as any;\r\n    const containerStyle = {\r\n        width: size,\r\n        height: size / 2,\r\n        overflow: \"hidden\",\r\n    } as any;\r\n\r\n    return (\r\n        <ActivityIndicatorContainer\r\n            accessible\r\n            accessibilityRole=\"progressbar\"\r\n            style={style}\r\n        >\r\n            <Animated.View\r\n                style={[{ width: size, height: size, opacity: fade }]}\r\n                collapsable={false}\r\n            >\r\n                {[0, 1].map((index) => {\r\n                    // Thanks to https://github.com/n4kz/react-native-indicators for the great work\r\n                    const inputRange = Array.from(\r\n                        new Array(frames),\r\n                        (_, frameIndex) => frameIndex / (frames - 1)\r\n                    );\r\n                    const outputRange = Array.from(new Array(frames), (_, frameIndex) => {\r\n                        let progress = (2 * frameIndex) / (frames - 1);\r\n                        const rotation = index ? +(360 - 15) : -(180 - 15);\r\n\r\n                        if (progress > 1.0) {\r\n                            progress = 2.0 - progress;\r\n                        }\r\n\r\n                        const direction = index ? -1 : +1;\r\n\r\n                        return `${direction * (180 - 30) * easing(progress) + rotation}deg`;\r\n                    });\r\n\r\n                    const layerStyle = {\r\n                        width: size,\r\n                        height: size,\r\n                        transform: [\r\n                            {\r\n                                rotate: timer.interpolate({\r\n                                    inputRange: [0, 1],\r\n                                    outputRange: [`${0 + 30 + 15}deg`, `${2 * 360 + 30 + 15}deg`],\r\n                                }),\r\n                            },\r\n                        ],\r\n                    };\r\n\r\n                    const viewportStyle = {\r\n                        width: size,\r\n                        height: size,\r\n                        transform: [\r\n                            {\r\n                                translateY: index ? -size / 2 : 0,\r\n                            },\r\n                            {\r\n                                rotate: timer.interpolate({ inputRange, outputRange }),\r\n                            },\r\n                        ],\r\n                    };\r\n\r\n                    const offsetStyle = index ? { top: size / 2 } : null;\r\n\r\n                    const lineStyle = {\r\n                        width: size,\r\n                        height: size,\r\n                        borderColor: color,\r\n                        borderWidth: size / 10,\r\n                        borderRadius: size / 2,\r\n                    };\r\n\r\n                    return (\r\n                        <Animated.View key={index} style={[layerStyle0]}>\r\n                            <Animated.View style={layerStyle}>\r\n                                <Animated.View\r\n                                    style={[containerStyle, offsetStyle]}\r\n                                    collapsable={false}\r\n                                >\r\n                                    <Animated.View style={viewportStyle}>\r\n                                        <Animated.View style={containerStyle} collapsable={false}>\r\n                                            <Animated.View style={lineStyle} />\r\n                                        </Animated.View>\r\n                                    </Animated.View>\r\n                                </Animated.View>\r\n                            </Animated.View>\r\n                        </Animated.View>\r\n                    );\r\n                })}\r\n            </Animated.View>\r\n        </ActivityIndicatorContainer>\r\n    );\r\n};\r\n\r\nexport default ActivityIndicator;\r\n"]}