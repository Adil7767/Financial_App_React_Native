{"version":3,"sources":["RadioButtonItem.tsx"],"names":["RadioButtonItem","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","accessibilityLabel","testID","mode","textAfterButton","theme","React","useContext","ThemeContext","colors","radioButtonProps","radioButton","context","undefined","onValueChange","styles","container","text","displayName","RadioButtonItemWithTheme","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingTop","paddingBottom","paddingHorizontal","paddingRight","paddingLeft","fontSize","flex"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    View,\r\n    StyleSheet,\r\n    StyleProp,\r\n    ViewStyle,\r\n    TextStyle,\r\n} from \"react-native\";\r\nimport { RadioButtonContext, RadioButtonContextType } from \"./RadioButtonGroup\";\r\nimport { handlePress } from \"./utils\";\r\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\r\nimport Text from \"../Text\";\r\nimport RadioButtonAndroid from \"./RadioButtonAndroid\";\r\nimport RadioButtonIOS from \"./RadioButtonIOS\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\n\r\nexport type Props = {\r\n    /**\r\n     * Value of the radio button.\r\n     */\r\n    value: string;\r\n    /**\r\n     * Label to be displayed on the item.\r\n     */\r\n    label: string;\r\n    /**\r\n     * Whether radio is disabled.\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * Function to execute on press.\r\n     */\r\n    onPress?: () => void;\r\n    /**\r\n     * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\r\n     */\r\n    accessibilityLabel?: string;\r\n    /**\r\n     * Custom color for unchecked radio.\r\n     */\r\n    uncheckedColor?: string;\r\n    /**\r\n     * Custom color for radio.\r\n     */\r\n    color?: string;\r\n    /**\r\n     * Status of radio button.\r\n     */\r\n    status?: \"checked\" | \"unchecked\";\r\n    /**\r\n     * Additional styles for container View.\r\n     */\r\n    style?: StyleProp<ViewStyle>;\r\n    /**\r\n     * Style that is passed to Label element.\r\n     */\r\n    labelStyle?: StyleProp<TextStyle>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n    /**\r\n     * testID to be used on tests.\r\n     */\r\n    testID?: string;\r\n    /**\r\n     * Whether `<RadioButton.Android />` or `<RadioButton.IOS />` should be used.\r\n     * Left undefined `<RadioButton />` will be used.\r\n     */\r\n    mode?: \"android\" | \"ios\";\r\n\r\n    textAfterButton?: boolean;\r\n};\r\n\r\n/**\r\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\r\n *     <figcaption>Pressed</figcaption>\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import RadioButton from 'react-native-simple-elements/components/RadioButton';\r\n *\r\n * const MyComponent = () => {\r\n *   const [value, setValue] = React.useState('first');\r\n *\r\n *   return (\r\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\r\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\r\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\r\n *     </RadioButton.Group>\r\n *   );\r\n * };\r\n *\r\n * export default MyComponent;\r\n *```\r\n */\r\nconst RadioButtonItem = ({\r\n    value,\r\n    label,\r\n    style,\r\n    labelStyle,\r\n    onPress,\r\n    disabled,\r\n    color,\r\n    uncheckedColor,\r\n    status,\r\n    accessibilityLabel,\r\n    testID,\r\n    mode,\r\n    textAfterButton,\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n    const { colors } = theme;\r\n    const radioButtonProps = { value, disabled, status, color, uncheckedColor };\r\n    let radioButton: any;\r\n\r\n    if (mode === \"android\") {\r\n        radioButton = <RadioButtonAndroid {...radioButtonProps} />;\r\n    } else if (mode === \"ios\") {\r\n        radioButton = <RadioButtonIOS {...radioButtonProps} />;\r\n    } else {\r\n        radioButton = <RadioButtonAndroid {...radioButtonProps} />;\r\n    }\r\n\r\n    return (\r\n        <RadioButtonContext.Consumer>\r\n            {(context?: RadioButtonContextType) => {\r\n                return (\r\n                    <TouchableRipple\r\n                        onPress={\r\n                            disabled\r\n                                ? undefined\r\n                                : () =>\r\n                                    handlePress({\r\n                                        onPress: onPress,\r\n                                        onValueChange: context?.onValueChange,\r\n                                        value,\r\n                                    })\r\n                        }\r\n                        accessibilityLabel={accessibilityLabel}\r\n                        testID={testID}\r\n                    >\r\n                        <View style={[styles.container, style]} pointerEvents=\"none\">\r\n                            {!textAfterButton ?\r\n                                <Text style={[styles.label, { color: colors.text }, labelStyle]}>\r\n                                    {label}\r\n                                </Text> : null\r\n                            }\r\n                            {radioButton}\r\n                            {textAfterButton ?\r\n                                <Text style={[styles.label, { color: colors.text }, labelStyle]}>\r\n                                    {label}\r\n                                </Text> : null\r\n                            }\r\n                        </View>\r\n                    </TouchableRipple>\r\n                );\r\n            }}\r\n        </RadioButtonContext.Consumer>\r\n    );\r\n};\r\n\r\nRadioButtonItem.displayName = \"RadioButton.Item\";\r\n\r\nexport default RadioButtonItem;\r\n\r\n// @component-docs ignore-next-line\r\nconst RadioButtonItemWithTheme = RadioButtonItem;\r\n// @component-docs ignore-next-line\r\nexport { RadioButtonItemWithTheme as RadioButtonItem };\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-between\",\r\n        paddingVertical: 8,\r\n        paddingTop: 8,\r\n        paddingBottom: 8,\r\n        paddingHorizontal: 16,\r\n        paddingRight: 16,\r\n        paddingLeft: 16,\r\n    },\r\n    label: {\r\n        fontSize: 16,\r\n        flex: 1,\r\n    },\r\n});\r\n"]}