{"version":3,"sources":["RadioButtonIOS.tsx"],"names":["RadioButtonIOS","disabled","onPress","status","value","testID","rest","theme","React","useContext","ThemeContext","checkedColor","colors","color","accent","rippleColor","text","alpha","rgb","string","fade","context","checked","contextValue","undefined","onValueChange","styles","container","opacity","CheckIcon","displayName","StyleSheet","create","borderRadius","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","RadioButtonIOSWithTheme"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,cAAc,GAAG,CAAC;AACpBC,EAAAA,QADoB;AAEpBC,EAAAA,OAFoB;AAGpBC,EAAAA,MAHoB;AAIpBC,EAAAA,KAJoB;AAKpBC,EAAAA,MALoB;AAMpB,KAAGC;AANiB,CAAD,KAOV;AACT,QAAMC,KAAK,GAAGC,KAAK,CAACC,UAAN,CAAiBC,8BAAjB,CAAd;AACA,QAAMC,YAAY,GAAGV,QAAQ,GACvBM,KAAK,CAACK,MAAN,CAAaX,QADU,GAEvBK,IAAI,CAACO,KAAL,IAAcN,KAAK,CAACK,MAAN,CAAaE,MAFjC;AAIA,MAAIC,WAAJ;;AAEA,MAAId,QAAJ,EAAc;AACVc,IAAAA,WAAW,GAAG,oBAAMR,KAAK,CAACK,MAAN,CAAaI,IAAnB,EAAyBC,KAAzB,CAA+B,IAA/B,EAAqCC,GAArC,GAA2CC,MAA3C,EAAd;AACH,GAFD,MAEO;AACHJ,IAAAA,WAAW,GAAG,oBAAMJ,YAAN,EAAoBS,IAApB,CAAyB,IAAzB,EAA+BF,GAA/B,GAAqCC,MAArC,EAAd;AACH;;AAED,sBACI,oBAAC,oCAAD,CAAoB,QAApB,QACME,OAAD,IAAsC;AACnC,UAAMC,OAAO,GACT,sBAAU;AACNC,MAAAA,YAAY,EAAEF,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEjB,KADjB;AAEND,MAAAA,MAFM;AAGNC,MAAAA;AAHM,KAAV,MAIO,SALX;AAOA,wBACI,oBAAC,wBAAD,eACQE,IADR;AAEI,MAAA,UAAU,MAFd;AAGI,MAAA,WAAW,EAAES,WAHjB;AAII,MAAA,OAAO,EACHd,QAAQ,GACFuB,SADE,GAEF,MAAM;AACJ,gCAAY;AACRtB,UAAAA,OADQ;AAERE,UAAAA,KAFQ;AAGRqB,UAAAA,aAAa,EAAEJ,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEI;AAHhB,SAAZ;AAKH,OAbb,CAeI;AACA;AACA;AACA;AAlBJ;AAmBI,MAAA,iBAAiB,EAAC,OAnBtB;AAoBI,MAAA,kBAAkB,EAAE;AAAExB,QAAAA,QAAF;AAAYqB,QAAAA;AAAZ,OApBxB;AAqBI,MAAA,uBAAuB,EAAC,QArB5B;AAsBI,MAAA,KAAK,EAAEI,MAAM,CAACC,SAtBlB;AAuBI,MAAA,MAAM,EAAEtB;AAvBZ,qBAyBI,oBAAC,iBAAD;AAAM,MAAA,KAAK,EAAE;AAAEuB,QAAAA,OAAO,EAAEN,OAAO,GAAG,CAAH,GAAO;AAAzB;AAAb,oBACI,oBAAC,aAAD;AACI,MAAA,IAAI,EAAEO,cADV;AAEI,MAAA,IAAI,EAAE,EAFV;AAGI,MAAA,KAAK,EAAElB,YAHX,CAII;;AAJJ,MADJ,CAzBJ,CADJ;AAoCH,GA7CL,CADJ;AAiDH,CAtED;;AAwEAX,cAAc,CAAC8B,WAAf,GAA6B,iBAA7B;;AAEA,MAAMJ,MAAM,GAAGK,wBAAWC,MAAX,CAAkB;AAC7BL,EAAAA,SAAS,EAAE;AACPM,IAAAA,YAAY,EAAE,EADP;AAEPC,IAAAA,OAAO,EAAE,CAFF;AAGPC,IAAAA,UAAU,EAAE,CAHL;AAIPC,IAAAA,YAAY,EAAE,CAJP;AAKPC,IAAAA,aAAa,EAAE,CALR;AAMPC,IAAAA,WAAW,EAAE;AANN;AADkB,CAAlB,CAAf;;eAWetC,c,EAEf;;;AACA,MAAMuC,uBAAuB,GAAGvC,cAAhC,C,CACA","sourcesContent":["import * as React from \"react\";\r\nimport { StyleSheet, View } from \"react-native\";\r\nimport color from \"color\";\r\nimport { RadioButtonContext, RadioButtonContextType } from \"./RadioButtonGroup\";\r\nimport { handlePress, isChecked } from \"./utils\";\r\nimport { SvgIcon } from \"../Icon\";\r\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\r\nimport { $RemoveChildren } from \"../types\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\nimport CheckIcon from \"@mdi/svg/svg/check.svg\";\r\n\r\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\r\n    /**\r\n     * Value of the radio button\r\n     */\r\n    value: string;\r\n    /**\r\n     * Status of radio button.\r\n     */\r\n    status?: \"checked\" | \"unchecked\";\r\n    /**\r\n     * Whether radio is disabled.\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * Function to execute on press.\r\n     */\r\n    onPress?: () => void;\r\n    /**\r\n     * Custom color for radio.\r\n     */\r\n    color?: string;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n    /**\r\n     * testID to be used on tests.\r\n     */\r\n    testID?: string;\r\n};\r\n\r\n/**\r\n * Radio buttons allow the selection a single option from a set.\r\n * This component follows platform guidelines for iOS, but can be used\r\n * on any platform.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\r\n *     <figcaption>Enabled</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\r\n *     <figcaption>Disabled</figcaption>\r\n *   </figure>\r\n * </div>\r\n */\r\nconst RadioButtonIOS = ({\r\n    disabled,\r\n    onPress,\r\n    status,\r\n    value,\r\n    testID,\r\n    ...rest\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n    const checkedColor = disabled\r\n        ? theme.colors.disabled\r\n        : rest.color || theme.colors.accent;\r\n\r\n    let rippleColor: string;\r\n\r\n    if (disabled) {\r\n        rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\r\n    } else {\r\n        rippleColor = color(checkedColor).fade(0.32).rgb().string();\r\n    }\r\n\r\n    return (\r\n        <RadioButtonContext.Consumer>\r\n            {(context?: RadioButtonContextType) => {\r\n                const checked =\r\n                    isChecked({\r\n                        contextValue: context?.value,\r\n                        status,\r\n                        value,\r\n                    }) === \"checked\";\r\n\r\n                return (\r\n                    <TouchableRipple\r\n                        {...rest}\r\n                        borderless\r\n                        rippleColor={rippleColor}\r\n                        onPress={\r\n                            disabled\r\n                                ? undefined\r\n                                : () => {\r\n                                    handlePress({\r\n                                        onPress,\r\n                                        value,\r\n                                        onValueChange: context?.onValueChange,\r\n                                    });\r\n                                }\r\n                        }\r\n                        // accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\r\n                        // accessibilityComponentType={\r\n                        //     checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\r\n                        // }\r\n                        accessibilityRole=\"radio\"\r\n                        accessibilityState={{ disabled, checked }}\r\n                        accessibilityLiveRegion=\"polite\"\r\n                        style={styles.container}\r\n                        testID={testID}\r\n                    >\r\n                        <View style={{ opacity: checked ? 1 : 0 }}>\r\n                            <SvgIcon\r\n                                icon={CheckIcon}\r\n                                size={24}\r\n                                color={checkedColor}\r\n                                // direction=\"ltr\"\r\n                            />\r\n                        </View>\r\n                    </TouchableRipple>\r\n                );\r\n            }}\r\n        </RadioButtonContext.Consumer>\r\n    );\r\n};\r\n\r\nRadioButtonIOS.displayName = \"RadioButton.IOS\";\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        borderRadius: 18,\r\n        padding: 6,\r\n        paddingTop: 6,\r\n        paddingRight: 6,\r\n        paddingBottom: 6,\r\n        paddingLeft: 6,\r\n    },\r\n});\r\n\r\nexport default RadioButtonIOS;\r\n\r\n// @component-docs ignore-next-line\r\nconst RadioButtonIOSWithTheme = RadioButtonIOS;\r\n// @component-docs ignore-next-line\r\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };\r\n"]}