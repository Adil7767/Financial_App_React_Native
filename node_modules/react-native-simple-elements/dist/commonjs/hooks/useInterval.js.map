{"version":3,"sources":["useInterval.tsx"],"names":["useInterval","callback","delay","savedCallback","React","useRef","useEffect","current","tick","id","setInterval","clearInterval"],"mappings":";;;;;;;AAAA;;;;;;AAEO,SAASA,WAAT,CAAqBC,QAArB,EAA+BC,KAA/B,EAAsC;AACzC,QAAMC,aAAa,GAAGC,KAAK,CAACC,MAAN,EAAtB,CADyC,CAGzC;;AACAD,EAAAA,KAAK,CAACE,SAAN,CAAgB,MAAM;AAClBH,IAAAA,aAAa,CAACI,OAAd,GAAwBN,QAAxB;AACH,GAFD,EAEG,CAACA,QAAD,CAFH,EAJyC,CAQzC;;AACAG,EAAAA,KAAK,CAACE,SAAN,CAAgB,MAAM;AAClB,aAASE,IAAT,GAAgB;AACZL,MAAAA,aAAa,CAACI,OAAd;AACH;;AACD,QAAIL,KAAK,KAAK,IAAd,EAAoB;AAChB,YAAMO,EAAE,GAAGC,WAAW,CAACF,IAAD,EAAON,KAAP,CAAtB;AACA,aAAO,MAAMS,aAAa,CAACF,EAAD,CAA1B;AACH;AACJ,GARD,EAQG,CAACP,KAAD,CARH;AASH","sourcesContent":["import * as React from \"react\";\r\n\r\nexport function useInterval(callback, delay) {\r\n    const savedCallback = React.useRef<any>();\r\n\r\n    // Remember the latest callback.\r\n    React.useEffect(() => {\r\n        savedCallback.current = callback;\r\n    }, [callback]);\r\n\r\n    // Set up the interval.\r\n    React.useEffect(() => {\r\n        function tick() {\r\n            savedCallback.current();\r\n        }\r\n        if (delay !== null) {\r\n            const id = setInterval(tick, delay);\r\n            return () => clearInterval(id);\r\n        }\r\n    }, [delay]);\r\n}\r\n"]}