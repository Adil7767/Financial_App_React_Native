"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const mobileBreakPoint = parseFloat("640px".replace("px", ""));

const useScreenSize = () => {
  const {
    height: viewportHeight,
    width: viewportWidth
  } = (0, _reactNative.useWindowDimensions)();
  const [width, setWidth] = React.useState(viewportWidth);
  const [height, setHeight] = React.useState(viewportHeight);
  const [screenSizeType, setScreenSizeType] = React.useState("small");
  const [isMobileView, setMobileView] = React.useState(!(viewportWidth > mobileBreakPoint));
  React.useEffect(() => {
    function updateSize() {
      setWidth(viewportWidth);
      setHeight(viewportHeight);
      setMobileView(viewportWidth < mobileBreakPoint);
      const SC_SM_WIDTH = 640;
      const SC_LG_WIDTH = 1024;

      if (viewportWidth < SC_SM_WIDTH) {
        setScreenSizeType("small");
      }

      if (viewportWidth >= SC_SM_WIDTH && viewportWidth < SC_LG_WIDTH) {
        setScreenSizeType("medium");
      }

      if (viewportWidth >= SC_LG_WIDTH) {
        setScreenSizeType("large");
      }
    }

    updateSize();
  }, [viewportWidth]);
  return {
    width,
    height,
    screenSizeType,
    isMobileView
  };
};

var _default = useScreenSize;
exports.default = _default;
//# sourceMappingURL=useScreenSize.js.map