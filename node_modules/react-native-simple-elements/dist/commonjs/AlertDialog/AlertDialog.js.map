{"version":3,"sources":["AlertDialog.tsx"],"names":["WindowHeight","Dimensions","get","height","SUPPORTED_ORIENTATIONS","defaultProps","animationType","openDuration","closeDuration","closeOnDragDown","dragFromTopOnly","closeOnPressBack","keyboardAvoidingViewEnabled","Platform","OS","customStyles","onDismiss","onOpen","children","backdropColor","AlertDialog","visible","dismissable","contentContainerStyle","contentStyle","isVisible","setIsVisible","React","useState","theme","useContext","ThemeContext","opacityValue","useRef","Animated","Value","current","pan","ValueXY","panResponder","undefined","useEffect","setModalVisible","timing","toValue","duration","useNativeDriver","start","setValue","x","y","createPanResponder","PanResponder","create","onStartShouldSetPanResponder","onPanResponderMove","e","gestureState","dy","event","onPanResponderRelease","spring","close","panStyle","transform","getTranslateTransform","flex","backgroundColor","wrapper","styles","backdrop","colors","opacity","panHandlers","width","overflow","flexDirection","position","top","bottom","left","right","contentContainer","container","alignItems","borderRadius","margin","draggableIcon","content","StyleSheet","marginHorizontal"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n    View,\n    KeyboardAvoidingView,\n    Modal as RNModal,\n    TouchableWithoutFeedback,\n    Animated,\n    PanResponder,\n    Platform,\n    StyleProp,\n    ViewStyle,\n    StyleSheet,\n    Dimensions\n} from \"react-native\";\nimport { ThemeContext } from \"styled-components\";\nimport Surface from \"../Surface\";\n\nconst WindowHeight = Dimensions.get(\"window\").height;\n\nconst SUPPORTED_ORIENTATIONS = [\n    \"portrait\",\n    \"portrait-upside-down\",\n    \"landscape\",\n    \"landscape-left\",\n    \"landscape-right\"\n];\n\nexport type Props = {\n    animationType?: \"none\" | \"slide\" | \"fade\",\n    visible: boolean,\n    dismissable?: boolean,\n    openDuration?: number,\n    closeDuration?: number,\n    closeOnDragDown?: boolean,\n    dragFromTopOnly?: boolean,\n    closeOnPressBack?: boolean,\n    keyboardAvoidingViewEnabled?: boolean,\n    customStyles?: Record<string, unknown>,\n    onDismiss?: (evt?) => void,\n    onOpen?: (evt?) => void,\n    children?: React.ReactNode,\n    backdropColor?: string,\n    contentContainerStyle?: StyleProp<ViewStyle>,\n    contentStyle?: StyleProp<ViewStyle>,\n};\n\n// type State = {\n//     animatedHeight: Animated.Value,\n//     pan: Animated.ValueXY,\n//     modalVisible: boolean,\n// }\n\nconst defaultProps = {\n    animationType: \"none\",\n    openDuration: 100,\n    closeDuration: 100,\n    closeOnDragDown: false,\n    dragFromTopOnly: false,\n    closeOnPressBack: true,\n    keyboardAvoidingViewEnabled: Platform.OS === \"ios\",\n    customStyles: {},\n    onDismiss: null,\n    onOpen: null,\n    children: <View />,\n    backdropColor: \"#00000077\",\n};\n\nconst AlertDialog = ({\n    visible,\n    dismissable,\n    animationType,\n    closeOnDragDown,\n    dragFromTopOnly,\n    closeOnPressBack,\n    children,\n    customStyles,\n    keyboardAvoidingViewEnabled,\n    openDuration,\n    closeDuration,\n    onOpen,\n    onDismiss,\n    backdropColor,\n    contentContainerStyle,\n    contentStyle,\n}: Props) => {\n\n    const [ isVisible, setIsVisible ] = React.useState(false);\n    const theme = React.useContext(ThemeContext);\n    const opacityValue = React.useRef(new Animated.Value(0)).current;\n\n    const pan = React.useRef(new Animated.ValueXY());\n\n    const panResponder = React.useRef(undefined);\n\n    React.useEffect(() => {\n        if (!isVisible && visible) {\n            setModalVisible(true);\n        } else if (isVisible && !visible) {\n            setModalVisible(false);\n        }\n    }, [ visible ]);\n\n    // state: State = {\n    //     modalVisible: false,\n    //     animatedHeight: new Animated.Value(0),\n    //     pan: new Animated.ValueXY()\n    // };\n\n    // panResponder;\n\n    // constructor(props) {\n    //     super(props);\n\n    //     this.createPanResponder(props);\n    // }\n\n    const setModalVisible = (visible) => {\n        // const { height, minClosingHeight, openDuration, closeDuration, onDismiss, onOpen } = this.props;\n        // const { animatedHeight, pan } = this.state;\n        if (visible) {\n            setIsVisible(visible);\n            if (typeof onOpen === \"function\") onOpen();\n            Animated.timing(opacityValue, {\n                toValue: 1,\n                duration: openDuration || 100,\n                useNativeDriver: true,\n            }).start();\n        } else {\n            Animated.timing(opacityValue, {\n                toValue: 0,\n                duration: closeDuration || 100,\n                useNativeDriver: true,\n            })\n                .start(() => {\n                    pan.current.setValue({ x: 0, y: 0 });\n                    setIsVisible(visible);\n\n                    // this.setState({\n                    //     modalVisible: visible,\n                    //     animatedHeight: new Animated.Value(0)\n                    // });\n\n                    if (typeof onDismiss === \"function\") onDismiss();\n                });\n        }\n    };\n\n    const createPanResponder = () => {\n        // const { closeOnDragDown, height } = props;\n        // const { pan } = this.state;\n        panResponder.current = PanResponder.create({\n            onStartShouldSetPanResponder: () => closeOnDragDown,\n            onPanResponderMove: (e, gestureState) => {\n                if (gestureState.dy > 0) {\n                    Animated.event([null, { dy: pan.current.y }], { useNativeDriver: false })(e, gestureState);\n                }\n            },\n            onPanResponderRelease: (e, gestureState) => {\n                // if (height / 4 - gestureState.dy < 0) {\n                if (gestureState.dy > 15) {\n                    setModalVisible(false);\n                } else {\n                    Animated.spring(pan.current, { toValue: { x: 0, y: 0 }, useNativeDriver: false }).start();\n                }\n            }\n        });\n    };\n\n    // const open = (props?) => {\n    //     setModalVisible(true, props);\n    // }\n\n    const close = () => {\n        setModalVisible(false);\n    };\n\n    // const { animatedHeight, pan } = this.state;\n\n    if (!visible && !panResponder.current) {\n        createPanResponder();\n    }\n\n    const panStyle = {\n        transform: pan.current.getTranslateTransform()\n    };\n\n    return (\n        <RNModal\n            transparent\n            animationType={animationType}\n            visible={isVisible}\n            dismissable={dismissable}\n            // @ts-ignore\n            supportedOrientations={SUPPORTED_ORIENTATIONS}\n            onRequestClose={() => {\n                if (closeOnPressBack) setModalVisible(false);\n            }}\n        >\n            <KeyboardAvoidingView\n                enabled={keyboardAvoidingViewEnabled}\n                behavior=\"padding\"\n                style={[\n                    {\n                        flex: 1,\n                        backgroundColor: backdropColor,\n                    },\n                    customStyles.wrapper,\n                ]}\n            >\n                <TouchableWithoutFeedback\n                    // accessibilityLabel={overlayAccessibilityLabel}\n                    accessibilityRole=\"button\"\n                    disabled={!dismissable}\n                    onPress={dismissable ? close : undefined}\n                >\n                    <Animated.View\n                        style={[\n                            styles.backdrop,\n                            {\n                                flex: 1,\n                            },\n                            { backgroundColor: theme.colors.backdrop, opacity: opacityValue },\n                        ]}\n                    />\n                </TouchableWithoutFeedback>\n                <Animated.View\n                    {...(!dragFromTopOnly && panResponder.current?.panHandlers ? panResponder.current.panHandlers : {} )}\n                    style={[\n                        panStyle,\n                        {\n                            backgroundColor: theme.colors.backdrop,\n                            width: \"100%\",\n                            height: WindowHeight,\n                            overflow: \"hidden\"\n                        },\n                        {\n                            flexDirection: \"column\",\n                            flex: 1,\n                            position: \"absolute\",\n                            top: 0,\n                            bottom: 0,\n                            left: 0,\n                            right: 0,\n                        },\n                        styles.contentContainer,\n                        contentContainerStyle,\n                        customStyles.container\n                    ]}\n                    pointerEvents=\"box-none\"\n                >\n                    {closeOnDragDown && (\n                        <View\n                            {...(dragFromTopOnly && panResponder.current?.panHandlers ? panResponder.current.panHandlers : {} )}\n                            style={{\n                                width: \"100%\",\n                                alignItems: \"center\",\n                                backgroundColor: \"transparent\"\n                            }}\n                        >\n                            <View style={[\n                                {\n                                    width: 35,\n                                    height: 5,\n                                    borderRadius: 5,\n                                    margin: 10,\n                                    backgroundColor: \"#ccc\",\n                                },\n                                customStyles.draggableIcon,\n                            ]} />\n                        </View>\n                    )}\n                    <View\n                        style={{\n                            flex: 1,\n                        }}\n                        pointerEvents=\"none\"\n                    >\n                    </View>\n                    <Surface\n                        style={[\n                            styles.content,\n                            contentStyle,\n                        ]}\n                    >\n                        {children}\n                    </Surface>\n                    <View\n                        style={{\n                            flex: 1,\n                        }}\n                        pointerEvents=\"none\"\n                    >\n                    </View>\n                </Animated.View>\n            </KeyboardAvoidingView>\n        </RNModal>\n    );\n};\n\nAlertDialog.defaultProps = defaultProps;\n\nexport default AlertDialog;\n\nconst styles = StyleSheet.create({\n    backdrop: {\n\n    },\n    contentContainer: {\n        alignItems: \"center\",\n    },\n    content: {\n        marginHorizontal: 16,\n    },\n});\n"]}