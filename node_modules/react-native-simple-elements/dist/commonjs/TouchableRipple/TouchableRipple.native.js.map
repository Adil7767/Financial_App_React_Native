{"version":3,"sources":["TouchableRipple.native.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","ANDROID_VERSION_PIE","TouchableRipple","style","background","borderless","disabled","disabledProp","rippleColor","underlayColor","children","rest","theme","React","useContext","ThemeContext","dark","colors","onPress","calculatedRippleColor","text","alpha","rgb","string","useForeground","Platform","OS","Version","supported","TouchableNativeFeedback","Ripple","overflow","Children","only","fade"],"mappings":";;;;;;;AAAA;;AACA;;AAUA;;AACA;;;;;;;;;;AAEA,MAAMA,wBAAwB,GAAG,EAAjC;AACA,MAAMC,mBAAmB,GAAG,EAA5B;;AAcA,MAAMC,eAAe,GAAG,CAAC;AACrBC,EAAAA,KADqB;AAErBC,EAAAA,UAFqB;AAGrBC,EAAAA,UAAU,GAAG,KAHQ;AAIrBC,EAAAA,QAAQ,EAAEC,YAJW;AAKrBC,EAAAA,WALqB;AAMrBC,EAAAA,aANqB;AAOrBC,EAAAA,QAPqB;AAQrB,KAAGC;AARkB,CAAD,KASX;AACT,QAAMC,KAAK,GAAGC,KAAK,CAACC,UAAN,CAAiBC,8BAAjB,CAAd;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBL,KAAzB;AACA,QAAMN,QAAQ,GAAGC,YAAY,IAAI,CAACI,IAAI,CAACO,OAAvC;AACA,QAAMC,qBAAqB,GACvBX,WAAW,IACX,oBAAMS,MAAM,CAACG,IAAb,EACKC,KADL,CACWL,IAAI,GAAG,IAAH,GAAU,GADzB,EAEKM,GAFL,GAGKC,MAHL,EAFJ,CAJS,CAWT;AACA;;AACA,QAAMC,aAAa,GACfC,sBAASC,EAAT,KAAgB,SAAhB,IACAD,sBAASE,OAAT,IAAoB1B,mBADpB,IAEAI,UAHJ;;AAKA,MAAIH,eAAe,CAAC0B,SAApB,EAA+B;AAC3B,wBACI,oBAAC,oCAAD,eACQjB,IADR;AAEI,MAAA,QAAQ,EAAEL,QAFd;AAGI,MAAA,aAAa,EAAEkB,aAHnB;AAII,MAAA,UAAU,EACNpB,UAAU,IAAI,IAAd,GACMA,UADN,GAEMyB,qCAAwBC,MAAxB,CAA+BX,qBAA/B,EAAsDd,UAAtD;AAPd,qBAUI,oBAAC,iBAAD;AAAM,MAAA,KAAK,EAAE,CAACA,UAAU,IAAI;AAAE0B,QAAAA,QAAQ,EAAE;AAAZ,OAAf,EAAuC5B,KAAvC;AAAb,OACKU,KAAK,CAACmB,QAAN,CAAeC,IAAf,CAAoBvB,QAApB,CADL,CAVJ,CADJ;AAgBH;;AAED,sBACI,oBAAC,+BAAD,eACQC,IADR;AAEI,IAAA,QAAQ,EAAEL,QAFd;AAGI,IAAA,KAAK,EAAE,CAACD,UAAU,IAAI;AAAE0B,MAAAA,QAAQ,EAAE;AAAZ,KAAf,EAAuC5B,KAAvC,CAHX;AAII,IAAA,aAAa,EACTM,aAAa,IAAI,IAAjB,GACMA,aADN,GAEM,oBAAMU,qBAAN,EAA6Be,IAA7B,CAAkC,GAAlC,EAAuCZ,GAAvC,GAA6CC,MAA7C;AAPd,MAUKV,KAAK,CAACmB,QAAN,CAAeC,IAAf,CAAoBvB,QAApB,CAVL,CADJ;AAcH,CA5DD;;AA8DAR,eAAe,CAAC0B,SAAhB,GACIH,sBAASC,EAAT,KAAgB,SAAhB,IAA6BD,sBAASE,OAAT,IAAoB3B,wBADrD;eAGeE,e","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    BackgroundPropType,\r\n    StyleProp,\r\n    Platform,\r\n    TouchableHighlight,\r\n    TouchableNativeFeedback,\r\n    TouchableWithoutFeedback,\r\n    View,\r\n    ViewStyle,\r\n} from \"react-native\";\r\nimport color from \"color\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\n\r\nconst ANDROID_VERSION_LOLLIPOP = 21;\r\nconst ANDROID_VERSION_PIE = 28;\r\n\r\ntype Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {\r\n    borderless?: boolean;\r\n    background?: BackgroundPropType;\r\n    disabled?: boolean;\r\n    onPress?: () => void | null;\r\n    rippleColor?: string;\r\n    underlayColor?: string;\r\n    children: React.ReactNode;\r\n    style?: StyleProp<ViewStyle>;\r\n    theme: DefaultTheme;\r\n};\r\n\r\nconst TouchableRipple = ({\r\n    style,\r\n    background,\r\n    borderless = false,\r\n    disabled: disabledProp,\r\n    rippleColor,\r\n    underlayColor,\r\n    children,\r\n    ...rest\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n    const { dark, colors } = theme;\r\n    const disabled = disabledProp || !rest.onPress;\r\n    const calculatedRippleColor =\r\n        rippleColor ||\r\n        color(colors.text)\r\n            .alpha(dark ? 0.32 : 0.2)\r\n            .rgb()\r\n            .string();\r\n\r\n    // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'\r\n    // https://github.com/facebook/react-native/issues/6480\r\n    const useForeground =\r\n        Platform.OS === \"android\" &&\r\n        Platform.Version >= ANDROID_VERSION_PIE &&\r\n        borderless;\r\n\r\n    if (TouchableRipple.supported) {\r\n        return (\r\n            <TouchableNativeFeedback\r\n                {...rest}\r\n                disabled={disabled}\r\n                useForeground={useForeground}\r\n                background={\r\n                    background != null\r\n                        ? background\r\n                        : TouchableNativeFeedback.Ripple(calculatedRippleColor, borderless)\r\n                }\r\n            >\r\n                <View style={[borderless && { overflow: \"hidden\" }, style]}>\r\n                    {React.Children.only(children)}\r\n                </View>\r\n            </TouchableNativeFeedback>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <TouchableHighlight\r\n            {...rest}\r\n            disabled={disabled}\r\n            style={[borderless && { overflow: \"hidden\" }, style]}\r\n            underlayColor={\r\n                underlayColor != null\r\n                    ? underlayColor\r\n                    : color(calculatedRippleColor).fade(0.5).rgb().string()\r\n            }\r\n        >\r\n            {React.Children.only(children)}\r\n        </TouchableHighlight>\r\n    );\r\n};\r\n\r\nTouchableRipple.supported =\r\n    Platform.OS === \"android\" && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\r\n\r\nexport default TouchableRipple;\r\n"]}