{"version":3,"sources":["PortalManager.tsx"],"names":["PortalManager","React","PureComponent","portals","key","children","setState","state","map","item","filter","render","StyleSheet","absoluteFill","overflowX"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAaA;AACA;AACA;AACe,MAAMA,aAAN,SAA4BC,KAAK,CAACC,aAAlC,CAA8D;AAAA;AAAA;;AAAA,mCAC1D;AACXC,MAAAA,OAAO,EAAE;AADE,KAD0D;;AAAA,mCAKjE,CAACC,GAAD,EAAcC,QAAd,KAA4C;AAChD,WAAKC,QAAL,CAAeC,KAAD,KAAY;AACtBJ,QAAAA,OAAO,EAAE,CAAC,GAAGI,KAAK,CAACJ,OAAV,EAAmB;AAAEC,UAAAA,GAAF;AAAOC,UAAAA;AAAP,SAAnB;AADa,OAAZ,CAAd;AAGH,KATwE;;AAAA,oCAWhE,CAACD,GAAD,EAAcC,QAAd,KACL,KAAKC,QAAL,CAAeC,KAAD,KAAY;AACtBJ,MAAAA,OAAO,EAAEI,KAAK,CAACJ,OAAN,CAAcK,GAAd,CAAmBC,IAAD,IAAU;AACjC,YAAIA,IAAI,CAACL,GAAL,KAAaA,GAAjB,EAAsB;AAClB,iBAAO,EAAE,GAAGK,IAAL;AAAWJ,YAAAA;AAAX,WAAP;AACH;;AACD,eAAOI,IAAP;AACH,OALQ;AADa,KAAZ,CAAd,CAZqE;;AAAA,qCAqB9DL,GAAD,IACN,KAAKE,QAAL,CAAeC,KAAD,KAAY;AACtBJ,MAAAA,OAAO,EAAEI,KAAK,CAACJ,OAAN,CAAcO,MAAd,CAAsBD,IAAD,IAAUA,IAAI,CAACL,GAAL,KAAaA,GAA5C;AADa,KAAZ,CAAd,CAtBqE;AAAA;;AA0BzEO,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKJ,KAAL,CAAWJ,OAAX,CAAmBK,GAAnB,CAAuB,CAAC;AAAEJ,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAAD,kBAC1B,oBAAC,iBAAD;AACI,MAAA,GAAG,EAAED,GADT;AAEI,MAAA,WAAW,EACP;AAAM;AAHd;AAKI,MAAA,aAAa,EAAC,UALlB;AAMI,MAAA,KAAK,EAAE,CACHQ,wBAAWC,YADR,EAEH;AACIC,QAAAA,SAAS,EAAE;AADf,OAFG,CANX;AAYI,MAAA,MAAM,EAAC;AAZX,OAcKT,QAdL,CADG,CAAP;AAkBH;;AA7CwE","sourcesContent":["import * as React from \"react\";\r\nimport { View, StyleSheet } from \"react-native\";\r\n\r\ntype Props = {\r\n\r\n};\r\n\r\ntype State = {\r\n    portals: Array<{\r\n        key: number;\r\n        children: React.ReactNode;\r\n    }>;\r\n};\r\n\r\n/**\r\n * Portal host is the component which actually renders all Portals.\r\n */\r\nexport default class PortalManager extends React.PureComponent<Props, State> {\r\n    state: State = {\r\n        portals: [],\r\n    };\r\n\r\n    mount = (key: number, children: React.ReactNode) => {\r\n        this.setState((state) => ({\r\n            portals: [...state.portals, { key, children }],\r\n        }));\r\n    };\r\n\r\n    update = (key: number, children: React.ReactNode) =>\r\n        this.setState((state) => ({\r\n            portals: state.portals.map((item) => {\r\n                if (item.key === key) {\r\n                    return { ...item, children };\r\n                }\r\n                return item;\r\n            }),\r\n        }));\r\n\r\n    unmount = (key: number) =>\r\n        this.setState((state) => ({\r\n            portals: state.portals.filter((item) => item.key !== key),\r\n        }));\r\n\r\n    render() {\r\n        return this.state.portals.map(({ key, children }) => (\r\n            <View\r\n                key={key}\r\n                collapsable={\r\n                    false /* Need collapsable=false here to clip the elevations, otherwise they appear above sibling components */\r\n                }\r\n                pointerEvents=\"box-none\"\r\n                style={[\r\n                    StyleSheet.absoluteFill,\r\n                    { \r\n                        overflowX: \"hidden\"\r\n                    } as any\r\n                ]}\r\n                testID=\"portal_manager\"\r\n            >\r\n                {children}\r\n            </View>\r\n        ));\r\n    }\r\n}\r\n"]}