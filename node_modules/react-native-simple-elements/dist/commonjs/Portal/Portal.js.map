{"version":3,"sources":["Portal.tsx"],"names":["Portal","children","theme","React","useContext","ThemeContext","settings","manager"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAIA;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAyB;AAEpC,QAAMC,KAAK,GAAGC,KAAK,CAACC,UAAN,CAAiBC,8BAAjB,CAAd;AAEA,sBACI,oBAAC,kBAAD,QACMC,QAAD,iBACG,oBAAC,yBAAD,CAAe,QAAf,QACMC,OAAD,iBACG,oBAAC,uBAAD;AAAgB,IAAA,OAAO,EAAEA;AAAzB,kBACI,oBAAC,kBAAD;AAAkB,IAAA,KAAK,EAAED;AAAzB,kBACI,oBAAC,+BAAD;AAAe,IAAA,KAAK,EAAEJ;AAAtB,KAA8BD,QAA9B,CADJ,CADJ,CAFR,CAFR,CADJ;AAeH,CAnBD;;eAqBeD,M","sourcesContent":["import * as React from \"react\";\r\nimport PortalConsumer from \"./PortalConsumer\";\r\nimport { PortalContext, PortalMethods } from \"./PortalHost\";\r\nimport {\r\n    Provider as SettingsProvider,\r\n    Consumer as SettingsConsumer,\r\n} from \"../theme/settings\";\r\nimport { DefaultTheme, ThemeContext, ThemeProvider } from \"styled-components\";\r\n\r\ntype Props = {\r\n    /**\r\n     * Content of the `Portal`.\r\n     */\r\n    children: React.ReactNode;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n};\r\n\r\n/**\r\n * Portal allows to render a component at a different place in the parent tree.\r\n * You can use it to render content which should appear above other elements, similar to `Modal`.\r\n * It requires a [`Portal.Host`](portal-host.html) component to be rendered somewhere in the parent tree.\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import Portal from 'react-native-simple-elements/components/Portal';\r\n * import Text from \"react-native-simple-elements/components/Text\";\r\n *\r\n * const MyComponent = () => (\r\n *   <Portal>\r\n *     <Text>This is rendered at a different place</Text>\r\n *   </Portal>\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst Portal = ({ children }: Props) => {\r\n\r\n    const theme = React.useContext(ThemeContext);\r\n\r\n    return (\r\n        <SettingsConsumer>\r\n            {(settings) => (\r\n                <PortalContext.Consumer>\r\n                    {(manager) => (\r\n                        <PortalConsumer manager={manager as PortalMethods}>\r\n                            <SettingsProvider value={settings}>\r\n                                <ThemeProvider theme={theme}>{children}</ThemeProvider>\r\n                            </SettingsProvider>\r\n                        </PortalConsumer>\r\n                    )}\r\n                </PortalContext.Consumer>\r\n            )}\r\n        </SettingsConsumer>\r\n    );\r\n};\r\n\r\nexport default Portal;\r\n"]}