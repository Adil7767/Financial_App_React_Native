"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.useToast = exports.ToastContext = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeIphoneXHelper = require("react-native-iphone-x-helper");

var _Box = _interopRequireDefault(require("../Box"));

var _Toast = _interopRequireDefault(require("../Toast"));

var _Utils = require("../Utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const ToastContext = /*#__PURE__*/React.createContext({
  toast: () => null
});
exports.ToastContext = ToastContext;

const useToast = () => React.useContext(ToastContext);

exports.useToast = useToast;
const originalOffset = (0, _reactNativeIphoneXHelper.getStatusBarHeight)();
_reactNative.UIManager && _reactNative.UIManager.setLayoutAnimationEnabledExperimental && _reactNative.UIManager.setLayoutAnimationEnabledExperimental(true);
const CustomLayoutConfig = {
  duration: 300,
  create: {
    type: _reactNative.LayoutAnimation.Types.easeInEaseOut,
    property: _reactNative.LayoutAnimation.Properties.opacity
  },
  update: {
    type: _reactNative.LayoutAnimation.Types.easeInEaseOut
  },
  delete: {
    type: _reactNative.LayoutAnimation.Types.easeInEaseOut,
    property: _reactNative.LayoutAnimation.Properties.opacity
  }
};

const ToastProvider = ({
  children,
  position,
  offset: offsetProp,
  maxToasts
}) => {
  const [toasts, setToasts] = React.useState([]);

  const toast = newToast => {
    _reactNative.LayoutAnimation.configureNext(CustomLayoutConfig);

    setToasts(prevToasts => {
      const toasts = position === "BOTTOM" ? [...prevToasts, {
        index: prevToasts.length,
        id: (0, _Utils.uuid)(),
        ...newToast
      }] : [{
        index: prevToasts.length,
        id: (0, _Utils.uuid)(),
        ...newToast
      }, ...prevToasts];

      if (maxToasts && prevToasts.length === maxToasts) {
        position === "BOTTOM" ? toasts.shift() : toasts.pop();
        return toasts;
      } else {
        return toasts;
      }
    });
  };

  const hideToast = id => {
    _reactNative.LayoutAnimation.configureNext(CustomLayoutConfig);

    setToasts(prevToasts => prevToasts.filter(el => el.id !== id));
  };

  const offset = offsetProp ? offsetProp + originalOffset : originalOffset;
  return /*#__PURE__*/React.createElement(ToastContext.Provider, {
    value: {
      toast
    }
  }, children, /*#__PURE__*/React.createElement(_Box.default, {
    px: 4,
    left: 0,
    right: 0,
    position: "absolute",
    pointerEvents: "box-none",
    pt: position === "BOTTOM" ? 0 : offset,
    pb: position === "BOTTOM" ? offset : 0,
    style: position === "BOTTOM" ? {
      bottom: 0
    } : {
      top: 0
    },
    testID: "toast_box"
  }, toasts.map(config => {
    return /*#__PURE__*/React.createElement(_Toast.default, _extends({
      position: position,
      key: config.id,
      onClose: id => hideToast(id)
    }, config));
  })));
};

var _default = ToastProvider;
exports.default = _default;
//# sourceMappingURL=index.js.map