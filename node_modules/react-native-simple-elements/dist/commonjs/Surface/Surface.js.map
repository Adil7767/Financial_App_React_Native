{"version":3,"sources":["Surface.tsx"],"names":["Surface","style","rest","theme","React","useContext","ThemeContext","flattenedStyles","StyleSheet","flatten","elevation","dark","isDarkTheme","mode","colors","backgroundColor","surface"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,OAAO,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAAS,KAAGC;AAAZ,CAAD,KAA+B;AAC3C,QAAMC,KAAK,GAAGC,KAAK,CAACC,UAAN,CAAiBC,8BAAjB,CAAd;AAEA,QAAMC,eAAe,GAAGC,wBAAWC,OAAX,CAAmBR,KAAnB,KAA6B,EAArD;AACA,QAAM;AAAES,IAAAA,SAAS,GAAG;AAAd,MAA+BH,eAArC;AACA,QAAM;AAAEI,IAAAA,IAAI,EAAEC,WAAR;AAAqBC,IAAAA,IAArB;AAA2BC,IAAAA;AAA3B,MAAsCX,KAA5C;AAEA;AAAA;AACI;AACA,wBAAC,qBAAD,CAAU,IAAV,eACQD,IADR;AAEI,MAAA,KAAK,EAAE,CACH;AACIa,QAAAA,eAAe,EACXH,WAAW,IAAIC,IAAI,KAAK,UAAxB,GACM,sBAAQH,SAAR,EAAmBI,MAAM,CAACE,OAA1B,CADN,GAEMF,MAAM,CAACE;AAJrB,OADG,EAOHN,SAAS,IAAI,qBAAOA,SAAP,CAPV,EAQHT,KARG;AAFX;AAFJ;AAgBH,CAvBD;;eAyBeD,O","sourcesContent":["import * as React from \"react\";\r\nimport { Animated, StyleSheet, View, StyleProp, ViewStyle } from \"react-native\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\nimport shadow from \"../theme/shadow\";\r\nimport overlay from \"../theme/overlay\";\r\n\r\ntype Props = React.ComponentPropsWithRef<typeof View> & {\r\n    /**\r\n     * Content of the `Surface`.\r\n     */\r\n    children: React.ReactNode;\r\n\r\n    style?: StyleProp<ViewStyle>;\r\n\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n};\r\n\r\n/**\r\n * Surface is a basic container that can give depth to an element with elevation shadow.\r\n * On dark theme with `adaptive` mode, surface is constructed by also placing a semi-transparent white overlay over a component surface.\r\n * Overlay and shadow can be applied by specifying the `elevation` property both on Android and iOS.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img src=\"screenshots/surface-1.png\" />\r\n *   <img src=\"screenshots/surface-2.png\" />\r\n *   <img src=\"screenshots/surface-3.png\" />\r\n * </div>\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img src=\"screenshots/surface-dark-1.png\" />\r\n *   <img src=\"screenshots/surface-dark-2.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import Surface from 'react-native-simple-elements/components/Surface';\r\n * import Text from \"react-native-simple-elements/components/Text\";\r\n * import { StyleSheet } from 'react-native';\r\n *\r\n * const MyComponent = () => (\r\n *   <Surface style={styles.surface}>\r\n *      <Text>Surface</Text>\r\n *   </Surface>\r\n * );\r\n *\r\n * export default MyComponent;\r\n *\r\n * const styles = StyleSheet.create({\r\n *   surface: {\r\n *     padding: 8,\r\n *     height: 80,\r\n *     width: 80,\r\n *     alignItems: 'center',\r\n *     justifyContent: 'center',\r\n *     elevation: 4,\r\n *   },\r\n * });\r\n * ```\r\n */\r\nconst Surface = ({ style, ...rest }: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n\r\n    const flattenedStyles = StyleSheet.flatten(style) || {};\r\n    const { elevation = 4 }: ViewStyle = flattenedStyles;\r\n    const { dark: isDarkTheme, mode, colors } = theme;\r\n\r\n    return (\r\n        // @ts-ignore\r\n        <Animated.View\r\n            {...rest}\r\n            style={[\r\n                {\r\n                    backgroundColor:\r\n                        isDarkTheme && mode === \"adaptive\"\r\n                            ? overlay(elevation, colors.surface)\r\n                            : colors.surface,\r\n                },\r\n                elevation && shadow(elevation),\r\n                style,\r\n            ]}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Surface;\r\n"]}