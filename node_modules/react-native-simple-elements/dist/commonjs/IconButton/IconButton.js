"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));

var _SvgIcon = _interopRequireDefault(require("../Icon/SvgIcon"));

var _CrossFadeIcon = _interopRequireDefault(require("../Icon/CrossFadeIcon"));

var _styledComponents = require("styled-components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * An icon button is a button which displays only an icon without a label.
 * By default button has 150% size of the icon.
 *
 * <div class="screenshots">
 *   <figure>
 *     <img src="screenshots/icon-button-1.png" />
 *     <figcaption>Icon button</figcaption>
 *   </figure>
 *   <figure>
 *     <img src="screenshots/icon-button-2.png" />
 *     <figcaption>Pressed icon button</figcaption>
 *   </figure>
 * </div>
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import IconButton from 'react-native-simple-elements/components/IconButton';
 * import * as Colors from "react-native-simple-elements/components/theme/colors";
 * import CameraIcon from "@mdi/svg/svg/camera.svg";
 *
 * const MyComponent = () => (
 *   <IconButton
 *     icon={CameraIcon}
 *     color={Colors.red500}
 *     size={20}
 *     onPress={() => console.log('Pressed')}
 *   />
 * );
 *
 * export default MyComponent;
 * ```
 *
 */
const IconButton = ({
  icon,
  color: customColor,
  size = 24,
  accessibilityLabel,
  disabled,
  onPress,
  animated = false,
  style,
  ...rest
}) => {
  const theme = React.useContext(_styledComponents.ThemeContext);
  const iconColor = typeof customColor !== "undefined" ? customColor : theme.colors.text;
  const rippleColor = (0, _color.default)(iconColor).alpha(0.32).rgb().string();
  const IconComponent = animated ? _CrossFadeIcon.default : _SvgIcon.default;
  const buttonSize = size * 1.5;
  return /*#__PURE__*/React.createElement(_TouchableRipple.default, _extends({
    borderless: true,
    centered: true,
    onPress: onPress,
    rippleColor: rippleColor,
    style: [{
      alignItems: "center",
      justifyContent: "center",
      overflow: "hidden",
      margin: 6
    }, {
      width: buttonSize,
      height: buttonSize,
      borderRadius: buttonSize / 2
    }, disabled && {
      opacity: 0.32
    }, style],
    accessibilityLabel: accessibilityLabel // accessibilityTraits={disabled ? ["button", "disabled"] : "button"}
    // accessibilityComponentType="button"
    ,
    accessibilityRole: "button",
    accessibilityState: {
      disabled
    },
    disabled: disabled,
    hitSlop: // @ts-ignore - this should be fixed in react-theme-providersince withTheme() is not forwarding static property types
    _TouchableRipple.default.supported ? {
      top: 10,
      left: 10,
      bottom: 10,
      right: 10
    } : {
      top: 6,
      left: 6,
      bottom: 6,
      right: 6
    }
  }, rest), /*#__PURE__*/React.createElement(_reactNative.View, {
    testID: "icon_view"
  }, /*#__PURE__*/React.createElement(IconComponent, {
    color: iconColor,
    icon: icon,
    size: size
  })));
};

var _default = IconButton;
exports.default = _default;
//# sourceMappingURL=IconButton.js.map