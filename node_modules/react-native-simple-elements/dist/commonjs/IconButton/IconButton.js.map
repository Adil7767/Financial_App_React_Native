{"version":3,"sources":["IconButton.tsx"],"names":["IconButton","icon","color","customColor","size","accessibilityLabel","disabled","onPress","animated","style","rest","theme","React","useContext","ThemeContext","iconColor","colors","text","rippleColor","alpha","rgb","string","IconComponent","CrossFadeIcon","Icon","buttonSize","alignItems","justifyContent","overflow","margin","width","height","borderRadius","opacity","TouchableRipple","supported","top","left","bottom","right"],"mappings":";;;;;;;AAAA;;AACA;;AAMA;;AAEA;;AACA;;AACA;;AAGA;;;;;;;;;;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,UAAU,GAAG,CAAC;AAChBC,EAAAA,IADgB;AAEhBC,EAAAA,KAAK,EAAEC,WAFS;AAGhBC,EAAAA,IAAI,GAAG,EAHS;AAIhBC,EAAAA,kBAJgB;AAKhBC,EAAAA,QALgB;AAMhBC,EAAAA,OANgB;AAOhBC,EAAAA,QAAQ,GAAG,KAPK;AAQhBC,EAAAA,KARgB;AAShB,KAAGC;AATa,CAAD,KAUN;AACT,QAAMC,KAAK,GAAGC,KAAK,CAACC,UAAN,CAAiBC,8BAAjB,CAAd;AACA,QAAMC,SAAS,GACX,OAAOZ,WAAP,KAAuB,WAAvB,GAAqCA,WAArC,GAAmDQ,KAAK,CAACK,MAAN,CAAaC,IADpE;AAEA,QAAMC,WAAW,GAAG,oBAAMH,SAAN,EAAiBI,KAAjB,CAAuB,IAAvB,EAA6BC,GAA7B,GAAmCC,MAAnC,EAApB;AACA,QAAMC,aAAa,GAAGd,QAAQ,GAAGe,sBAAH,GAAmBC,gBAAjD;AACA,QAAMC,UAAU,GAAGrB,IAAI,GAAG,GAA1B;AACA,sBACI,oBAAC,wBAAD;AACI,IAAA,UAAU,MADd;AAEI,IAAA,QAAQ,MAFZ;AAGI,IAAA,OAAO,EAAEG,OAHb;AAII,IAAA,WAAW,EAAEW,WAJjB;AAKI,IAAA,KAAK,EAAE,CACH;AACIQ,MAAAA,UAAU,EAAE,QADhB;AAEIC,MAAAA,cAAc,EAAE,QAFpB;AAGIC,MAAAA,QAAQ,EAAE,QAHd;AAIIC,MAAAA,MAAM,EAAE;AAJZ,KADG,EAOH;AAAEC,MAAAA,KAAK,EAAEL,UAAT;AAAqBM,MAAAA,MAAM,EAAEN,UAA7B;AAAyCO,MAAAA,YAAY,EAAEP,UAAU,GAAG;AAApE,KAPG,EAQHnB,QAAQ,IAAI;AAAE2B,MAAAA,OAAO,EAAE;AAAX,KART,EASHxB,KATG,CALX;AAgBI,IAAA,kBAAkB,EAAEJ,kBAhBxB,CAiBI;AACA;AAlBJ;AAmBI,IAAA,iBAAiB,EAAC,QAnBtB;AAoBI,IAAA,kBAAkB,EAAE;AAAEC,MAAAA;AAAF,KApBxB;AAqBI,IAAA,QAAQ,EAAEA,QArBd;AAsBI,IAAA,OAAO,EACH;AACA4B,6BAAgBC,SAAhB,GACM;AAAEC,MAAAA,GAAG,EAAE,EAAP;AAAWC,MAAAA,IAAI,EAAE,EAAjB;AAAqBC,MAAAA,MAAM,EAAE,EAA7B;AAAiCC,MAAAA,KAAK,EAAE;AAAxC,KADN,GAEM;AAAEH,MAAAA,GAAG,EAAE,CAAP;AAAUC,MAAAA,IAAI,EAAE,CAAhB;AAAmBC,MAAAA,MAAM,EAAE,CAA3B;AAA8BC,MAAAA,KAAK,EAAE;AAArC;AA1Bd,KA4BQ7B,IA5BR,gBA8BI,oBAAC,iBAAD;AAAM,IAAA,MAAM,EAAC;AAAb,kBACI,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEK,SAAtB;AAAiC,IAAA,IAAI,EAAEd,IAAvC;AAA6C,IAAA,IAAI,EAAEG;AAAnD,IADJ,CA9BJ,CADJ;AAoCH,CArDD;;eAuDeJ,U","sourcesContent":["import * as React from \"react\";\nimport {\n    View,\n    ViewStyle,\n    StyleProp,\n    GestureResponderEvent,\n} from \"react-native\";\nimport color from \"color\";\n\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Icon from \"../Icon/SvgIcon\";\nimport CrossFadeIcon from \"../Icon/CrossFadeIcon\";\n\nimport type { $RemoveChildren } from \"../types\";\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n    /**\n     * Icon to display.\n     */\n    icon: React.ReactElement;\n    /**\n     * Color of the icon.\n     */\n    color?: string;\n    /**\n     * Size of the icon.\n     */\n    size?: number;\n    /**\n     * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n     */\n    disabled?: boolean;\n    /**\n     * Whether an icon change is animated.\n     */\n    animated?: boolean;\n    /**\n     * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n     */\n    accessibilityLabel?: string;\n    /**\n     * Function to execute on press.\n     */\n    onPress?: (e: GestureResponderEvent) => void;\n\n    style?: StyleProp<ViewStyle>;\n\n    // ref?: React.RefObject<TouchableWithoutFeedback>;\n    ref?: React.RefObject<View>;\n    /**\n     * @optional\n     */\n    theme?: DefaultTheme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import IconButton from 'react-native-simple-elements/components/IconButton';\n * import * as Colors from \"react-native-simple-elements/components/theme/colors\";\n * import CameraIcon from \"@mdi/svg/svg/camera.svg\";\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon={CameraIcon}\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n */\nconst IconButton = ({\n    icon,\n    color: customColor,\n    size = 24,\n    accessibilityLabel,\n    disabled,\n    onPress,\n    animated = false,\n    style,\n    ...rest\n}: Props) => {\n    const theme = React.useContext(ThemeContext);\n    const iconColor =\n        typeof customColor !== \"undefined\" ? customColor : theme.colors.text;\n    const rippleColor = color(iconColor).alpha(0.32).rgb().string();\n    const IconComponent = animated ? CrossFadeIcon : Icon;\n    const buttonSize = size * 1.5;\n    return (\n        <TouchableRipple\n            borderless\n            centered\n            onPress={onPress}\n            rippleColor={rippleColor}\n            style={[\n                {\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    overflow: \"hidden\",\n                    margin: 6,\n                },\n                { width: buttonSize, height: buttonSize, borderRadius: buttonSize / 2 },\n                disabled && { opacity: 0.32 },\n                style,\n            ]}\n            accessibilityLabel={accessibilityLabel}\n            // accessibilityTraits={disabled ? [\"button\", \"disabled\"] : \"button\"}\n            // accessibilityComponentType=\"button\"\n            accessibilityRole=\"button\"\n            accessibilityState={{ disabled }}\n            disabled={disabled}\n            hitSlop={\n                // @ts-ignore - this should be fixed in react-theme-providersince withTheme() is not forwarding static property types\n                TouchableRipple.supported\n                    ? { top: 10, left: 10, bottom: 10, right: 10 }\n                    : { top: 6, left: 6, bottom: 6, right: 6 }\n            }\n            {...rest}\n        >\n            <View testID=\"icon_view\">\n                <IconComponent color={iconColor} icon={icon} size={size} />\n            </View>\n        </TouchableRipple>\n    );\n};\n\nexport default IconButton;\n"]}