{"version":3,"sources":["HelperText.tsx"],"names":["HelperText","style","type","visible","onLayout","padding","rest","theme","React","useContext","ThemeContext","current","shown","useRef","Animated","Value","textHeight","scale","animation","useEffect","timing","toValue","duration","useNativeDriver","start","handleTextLayout","e","nativeEvent","layout","height","colors","dark","textColor","error","text","alpha","rgb","string","styles","color","opacity","transform","translateY","interpolate","inputRange","outputRange","children","StyleSheet","create","fontSize","paddingVertical","paddingHorizontal"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport color from \"color\";\r\nimport {\r\n    Animated,\r\n    StyleSheet,\r\n    StyleProp,\r\n    TextStyle,\r\n    LayoutChangeEvent,\r\n} from \"react-native\";\r\nimport AnimatedText from \"../Text/AnimatedText\";\r\nimport type { $Omit } from \"../types\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\n\r\ntype Props = $Omit<\r\n    $Omit<React.ComponentPropsWithRef<typeof AnimatedText>, \"padding\">,\r\n    \"type\"\r\n> & {\r\n    /**\r\n     * Type of the helper text.\r\n     */\r\n    type: \"error\" | \"info\";\r\n    /**\r\n     * Whether to display the helper text.\r\n     */\r\n    visible?: boolean;\r\n    /**\r\n     * Whether to apply padding to the helper text.\r\n     */\r\n    padding?: \"none\" | \"normal\";\r\n    /**\r\n     * Text content of the HelperText.\r\n     */\r\n    children: React.ReactNode;\r\n    style?: StyleProp<TextStyle>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n    /**\r\n     * TestID used for testing purposes\r\n     */\r\n    testID?: string;\r\n};\r\n\r\n/**\r\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { View } from 'react-native';\r\n * import HelperText from 'react-native-simple-elements/components/HelperText';\r\n * import TextInput from \"react-native-simple-elements/components/TextInput\";\r\n *\r\n * const MyComponent = () => {\r\n *   const [text, setText] = React.useState('');\r\n *\r\n *    const onChangeText = text => setText(text);\r\n *\r\n *   const hasErrors = () => {\r\n *     return !text.includes('@');\r\n *   };\r\n *\r\n *  return (\r\n *     <View>\r\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\r\n *       <HelperText type=\"error\" visible={hasErrors()}>\r\n *         Email address is invalid!\r\n *       </HelperText>\r\n *     </View>\r\n *   );\r\n * };\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst HelperText = ({\r\n    style,\r\n    type = \"info\",\r\n    visible = true,\r\n    onLayout,\r\n    padding = \"normal\",\r\n    ...rest\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n    const { current: shown } = React.useRef<Animated.Value>(\r\n        new Animated.Value(visible ? 1 : 0)\r\n    );\r\n\r\n    let { current: textHeight } = React.useRef<number>(0);\r\n\r\n    const { scale } = theme.animation;\r\n\r\n    React.useEffect(() => {\r\n        if (visible) {\r\n            // show text\r\n            Animated.timing(shown, {\r\n                toValue: 1,\r\n                duration: 150 * scale,\r\n                useNativeDriver: true,\r\n            }).start();\r\n        } else {\r\n            // hide text\r\n            Animated.timing(shown, {\r\n                toValue: 0,\r\n                duration: 180 * scale,\r\n                useNativeDriver: true,\r\n            }).start();\r\n        }\r\n    }, [visible, scale, shown]);\r\n\r\n    const handleTextLayout = (e: LayoutChangeEvent) => {\r\n        //@ts-ignore Animated.Text typings are improved but something is still broken. It thinks onLayout is not callable.\r\n        onLayout?.(e);\r\n        textHeight = e.nativeEvent.layout.height;\r\n    };\r\n\r\n    const { colors, dark } = theme;\r\n\r\n    const textColor =\r\n        type === \"error\"\r\n            ? colors.error\r\n            : color(colors.text)\r\n                .alpha(dark ? 0.7 : 0.54)\r\n                .rgb()\r\n                .string();\r\n\r\n    return (\r\n        // @ts-ignore\r\n        <AnimatedText\r\n            onLayout={handleTextLayout}\r\n            style={[\r\n                styles.text,\r\n                padding !== \"none\" ? styles.padding : {},\r\n                {\r\n                    color: textColor,\r\n                    opacity: shown,\r\n                    transform:\r\n                        visible && type === \"error\"\r\n                            ? [\r\n                                {\r\n                                    translateY: shown.interpolate({\r\n                                        inputRange: [0, 1],\r\n                                        outputRange: [-textHeight / 2, 0],\r\n                                    }),\r\n                                },\r\n                            ]\r\n                            : [],\r\n                },\r\n                style,\r\n            ]}\r\n            {...rest}\r\n        >\r\n            {rest.children}\r\n        </AnimatedText>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    text: {\r\n        fontSize: 12,\r\n        paddingVertical: 4,\r\n    },\r\n    padding: {\r\n        paddingHorizontal: 12,\r\n    },\r\n});\r\n\r\nexport default HelperText;\r\n"]}