{"version":3,"sources":["CheckboxItem.tsx"],"names":["CheckboxItem","style","status","label","onPress","labelStyle","testID","mode","textAfterButton","props","theme","React","useContext","ThemeContext","checkboxProps","checkbox","styles","container","color","colors","text","displayName","CheckboxItemWithTheme","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingTop","paddingBottom","paddingHorizontal","paddingRight","paddingLeft","fontSize","flex"],"mappings":";;;;;;;AAAA;;AAEA;;AAQA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAoDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,YAAY,GAAG,CAAC;AAClBC,EAAAA,KADkB;AAElBC,EAAAA,MAFkB;AAGlBC,EAAAA,KAHkB;AAIlBC,EAAAA,OAJkB;AAKlBC,EAAAA,UALkB;AAMlBC,EAAAA,MANkB;AAOlBC,EAAAA,IAPkB;AAQlBC,EAAAA,eARkB;AASlB,KAAGC;AATe,CAAD,KAUR;AACT,QAAMC,KAAK,GAAGC,KAAK,CAACC,UAAN,CAAiBC,8BAAjB,CAAd;AACA,QAAMC,aAAa,GAAG,EAAE,GAAGL,KAAL;AAAYP,IAAAA,MAAZ;AAAoBQ,IAAAA;AAApB,GAAtB;AACA,MAAIK,QAAJ;;AAEA,MAAIR,IAAI,KAAK,SAAb,EAAwB;AACpBQ,IAAAA,QAAQ,gBAAG,oBAAC,wBAAD,EAAqBD,aAArB,CAAX;AACH,GAFD,MAEO,IAAIP,IAAI,KAAK,KAAb,EAAoB;AACvBQ,IAAAA,QAAQ,gBAAG,oBAAC,oBAAD,EAAiBD,aAAjB,CAAX;AACH,GAFM,MAEA;AACHC,IAAAA,QAAQ,gBAAG,oBAAC,wBAAD,EAAqBD,aAArB,CAAX;AACH;;AAED,sBACI,oBAAC,wBAAD;AAAiB,IAAA,OAAO,EAAEV,OAA1B;AAAmC,IAAA,MAAM,EAAEE;AAA3C,kBACI,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACU,MAAM,CAACC,SAAR,EAAmBhB,KAAnB,CAAb;AAAwC,IAAA,aAAa,EAAC;AAAtD,KACK,CAACO,eAAD,gBACG,oBAAC,aAAD;AAAM,IAAA,KAAK,EAAE,CAACQ,MAAM,CAACb,KAAR,EAAe;AAAEe,MAAAA,KAAK,EAAER,KAAK,CAACS,MAAN,CAAaC;AAAtB,KAAf,EAA6Cf,UAA7C;AAAb,KACKF,KADL,CADH,GAGa,IAJlB,EAMKY,QANL,EAOKP,eAAe,gBACZ,oBAAC,aAAD;AAAM,IAAA,KAAK,EAAE,CAACQ,MAAM,CAACb,KAAR,EAAe;AAAEe,MAAAA,KAAK,EAAER,KAAK,CAACS,MAAN,CAAaC;AAAtB,KAAf,EAA6Cf,UAA7C;AAAb,KACKF,KADL,CADY,GAGF,IAVlB,CADJ,CADJ;AAiBH,CAxCD;;AA0CAH,YAAY,CAACqB,WAAb,GAA2B,eAA3B;eAEerB,Y,EAEf;;;AACA,MAAMsB,qBAAqB,GAAGtB,YAA9B,C,CACA;;;;AAGA,MAAMgB,MAAM,GAAGO,wBAAWC,MAAX,CAAkB;AAC7BP,EAAAA,SAAS,EAAE;AACPQ,IAAAA,aAAa,EAAE,KADR;AAEPC,IAAAA,UAAU,EAAE,QAFL;AAGPC,IAAAA,cAAc,EAAE,eAHT;AAIPC,IAAAA,eAAe,EAAE,CAJV;AAKPC,IAAAA,UAAU,EAAE,CALL;AAMPC,IAAAA,aAAa,EAAE,CANR;AAOPC,IAAAA,iBAAiB,EAAE,EAPZ;AAQPC,IAAAA,YAAY,EAAE,EARP;AASPC,IAAAA,WAAW,EAAE;AATN,GADkB;AAY7B9B,EAAAA,KAAK,EAAE;AACH+B,IAAAA,QAAQ,EAAE,EADP;AAEHC,IAAAA,IAAI,EAAE;AAFH;AAZsB,CAAlB,CAAf","sourcesContent":["import * as React from \"react\";\r\n\r\nimport {\r\n    StyleProp,\r\n    StyleSheet,\r\n    TextStyle,\r\n    View,\r\n    ViewStyle,\r\n} from \"react-native\";\r\n\r\nimport CheckboxAndroid from \"./CheckboxAndroid\";\r\nimport CheckboxIOS from \"./CheckboxIOS\";\r\nimport Text from \"../Text\";\r\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\n\r\ntype Props = {\r\n    /**\r\n     * Status of checkbox.\r\n     */\r\n    status: \"checked\" | \"unchecked\" | \"indeterminate\";\r\n    /**\r\n     * Whether checkbox is disabled.\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * Label to be displayed on the item.\r\n     */\r\n    label: string;\r\n    /**\r\n     * Function to execute on press.\r\n     */\r\n    onPress?: () => void;\r\n    /**\r\n     * Custom color for unchecked checkbox.\r\n     */\r\n    uncheckedColor?: string;\r\n    /**\r\n     * Custom color for checkbox.\r\n     */\r\n    color?: string;\r\n    /**\r\n     * Additional styles for container View.\r\n     */\r\n    style?: StyleProp<ViewStyle>;\r\n    /**\r\n     * Style that is passed to Label element.\r\n     */\r\n    labelStyle?: StyleProp<TextStyle>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n    /**\r\n     * testID to be used on tests.\r\n     */\r\n    testID?: string;\r\n    /**\r\n     * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\r\n     * Left undefined `<Checkbox />` will be used.\r\n     */\r\n    mode?: \"android\" | \"ios\";\r\n\r\n    textAfterButton?: boolean;\r\n};\r\n\r\n/**\r\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { View } from 'react-native';\r\n * import Checkbox from 'react-native-simple-elements/components/Checkbox';\r\n *\r\n * const MyComponent = () => (\r\n *   <View>\r\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\r\n *   </View>\r\n * );\r\n *\r\n * export default MyComponent;\r\n *```\r\n */\r\n\r\nconst CheckboxItem = ({\r\n    style,\r\n    status,\r\n    label,\r\n    onPress,\r\n    labelStyle,\r\n    testID,\r\n    mode,\r\n    textAfterButton,\r\n    ...props\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n    const checkboxProps = { ...props, status, theme };\r\n    let checkbox;\r\n\r\n    if (mode === \"android\") {\r\n        checkbox = <CheckboxAndroid {...checkboxProps} />;\r\n    } else if (mode === \"ios\") {\r\n        checkbox = <CheckboxIOS {...checkboxProps} />;\r\n    } else {\r\n        checkbox = <CheckboxAndroid {...checkboxProps} />;\r\n    }\r\n\r\n    return (\r\n        <TouchableRipple onPress={onPress} testID={testID}>\r\n            <View style={[styles.container, style]} pointerEvents=\"none\">\r\n                {!textAfterButton ?\r\n                    <Text style={[styles.label, { color: theme.colors.text }, labelStyle]}>\r\n                        {label}\r\n                    </Text> : null\r\n                }\r\n                {checkbox}\r\n                {textAfterButton ?\r\n                    <Text style={[styles.label, { color: theme.colors.text }, labelStyle]}>\r\n                        {label}\r\n                    </Text> : null\r\n                }\r\n            </View>\r\n        </TouchableRipple>\r\n    );\r\n};\r\n\r\nCheckboxItem.displayName = \"Checkbox.Item\";\r\n\r\nexport default CheckboxItem;\r\n\r\n// @component-docs ignore-next-line\r\nconst CheckboxItemWithTheme = CheckboxItem;\r\n// @component-docs ignore-next-line\r\nexport { CheckboxItemWithTheme as CheckboxItem };\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-between\",\r\n        paddingVertical: 8,\r\n        paddingTop: 8,\r\n        paddingBottom: 8,\r\n        paddingHorizontal: 16,\r\n        paddingRight: 16,\r\n        paddingLeft: 16,\r\n    },\r\n    label: {\r\n        fontSize: 16,\r\n        flex: 1,\r\n    },\r\n});\r\n"]}