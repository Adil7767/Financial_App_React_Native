{"version":3,"sources":["Snackbar.tsx"],"names":["DURATION_SHORT","DURATION_MEDIUM","DURATION_LONG","Snackbar","visible","action","duration","onDismiss","children","wrapperStyle","style","rest","theme","React","useContext","ThemeContext","current","opacity","useRef","Animated","Value","hidden","setHidden","useState","hideTimeout","undefined","scale","animation","useEffect","clearTimeout","useLayoutEffect","timing","toValue","useNativeDriver","start","finished","isInfinity","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","setTimeout","colors","roundness","styles","wrapper","container","borderRadius","transform","interpolate","inputRange","outputRange","backgroundColor","onSurface","content","marginRight","color","surface","accessibilityLabel","onPress","button","accent","label","StyleSheet","create","position","bottom","width","elevation","flexDirection","justifyContent","alignItems","margin","marginLeft","marginVertical","flexWrap","flex","marginHorizontal"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    Animated,\r\n    SafeAreaView,\r\n    StyleProp,\r\n    StyleSheet,\r\n    ViewStyle,\r\n    View,\r\n} from \"react-native\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\nimport Button from \"../Button\";\r\nimport Surface from \"../Surface\";\r\nimport Text from \"../Text\";\r\n\r\ntype Props = React.ComponentProps<typeof Surface> & {\r\n    /**\r\n     * Whether the Snackbar is currently visible.\r\n     */\r\n    visible: boolean;\r\n    /**\r\n     * Label and press callback for the action button. It should contain the following properties:\r\n     * - `label` - Label of the action button\r\n     * - `onPress` - Callback that is called when action button is pressed.\r\n     */\r\n    action?: {\r\n        label: string;\r\n        accessibilityLabel?: string;\r\n        onPress: () => void;\r\n    };\r\n    /**\r\n     * The duration for which the Snackbar is shown.\r\n     */\r\n    duration?: number;\r\n    /**\r\n     * Callback called when Snackbar is dismissed. The `visible` prop needs to be updated when this is called.\r\n     */\r\n    onDismiss: () => void;\r\n    /**\r\n     * Text content of the Snackbar.\r\n     */\r\n    children: React.ReactNode;\r\n    /**\r\n     * Style for the wrapper of the snackbar\r\n     */\r\n    wrapperStyle?: StyleProp<ViewStyle>;\r\n    style?: StyleProp<ViewStyle>;\r\n    ref?: React.RefObject<View>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n};\r\n\r\nconst DURATION_SHORT = 4000;\r\nconst DURATION_MEDIUM = 7000;\r\nconst DURATION_LONG = 10000;\r\n\r\n/**\r\n * Snackbars provide brief feedback about an operation through a message at the bottom of the screen.\r\n * Snackbar by default uses `onSurface` color from theme.\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/snackbar.gif\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { View, StyleSheet } from 'react-native';\r\n * import Button from 'react-native-simple-elements/components/Button';\r\n * import Snackbar from \"react-native-simple-elements/components/Snackbar\"\r\n *\r\n * const MyComponent = () => {\r\n *   const [visible, setVisible] = React.useState(false);\r\n *\r\n *   const onToggleSnackBar = () => setVisible(!visible);\r\n *\r\n *   const onDismissSnackBar = () => setVisible(false);\r\n *\r\n *   return (\r\n *     <View style={styles.container}>\r\n *       <Button onPress={onToggleSnackBar}>{visible ? 'Hide' : 'Show'}</Button>\r\n *       <Snackbar\r\n *         visible={visible}\r\n *         onDismiss={onDismissSnackBar}\r\n *         action={{\r\n *           label: 'Undo',\r\n *           onPress: () => {\r\n *             // Do something\r\n *           },\r\n *         }}>\r\n *         Hey there! I'm a Snackbar.\r\n *       </Snackbar>\r\n *     </View>\r\n *   );\r\n * };\r\n *\r\n * const styles = StyleSheet.create({\r\n *   container: {\r\n *     flex: 1,\r\n *     justifyContent: 'space-between',\r\n *   },\r\n * });\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst Snackbar = ({\r\n    visible,\r\n    action,\r\n    duration = DURATION_MEDIUM,\r\n    onDismiss,\r\n    children,\r\n    wrapperStyle,\r\n    style,\r\n    ...rest\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n    const { current: opacity } = React.useRef<Animated.Value>(\r\n        new Animated.Value(0.0)\r\n    );\r\n    const [hidden, setHidden] = React.useState<boolean>(!visible);\r\n\r\n    const hideTimeout = React.useRef<NodeJS.Timeout | undefined>(undefined);\r\n\r\n    const { scale } = theme.animation;\r\n\r\n    React.useEffect(() => {\r\n        return () => {\r\n            if (hideTimeout.current) clearTimeout(hideTimeout.current);\r\n        };\r\n    }, []);\r\n\r\n    React.useLayoutEffect(() => {\r\n        if (visible) {\r\n            // show\r\n            if (hideTimeout.current) clearTimeout(hideTimeout.current);\r\n            setHidden(false);\r\n            Animated.timing(opacity, {\r\n                toValue: 1,\r\n                duration: 200 * scale,\r\n                useNativeDriver: true,\r\n            }).start(({ finished }) => {\r\n                if (finished) {\r\n                    const isInfinity =\r\n                        duration === Number.POSITIVE_INFINITY ||\r\n                        duration === Number.NEGATIVE_INFINITY;\r\n\r\n                    if (finished && !isInfinity) {\r\n                        hideTimeout.current = setTimeout(onDismiss, duration);\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            // hide\r\n            if (hideTimeout.current) clearTimeout(hideTimeout.current);\r\n\r\n            Animated.timing(opacity, {\r\n                toValue: 0,\r\n                duration: 100 * scale,\r\n                useNativeDriver: true,\r\n            }).start(({ finished }) => {\r\n                if (finished) setHidden(true);\r\n            });\r\n        }\r\n    }, [visible, duration, opacity, scale, onDismiss]);\r\n\r\n    const { colors, roundness } = theme;\r\n\r\n    if (hidden) return null;\r\n\r\n    return (\r\n        <SafeAreaView\r\n            pointerEvents=\"box-none\"\r\n            style={[styles.wrapper, wrapperStyle]}\r\n        >\r\n            <Surface\r\n                pointerEvents=\"box-none\"\r\n                accessibilityLiveRegion=\"polite\"\r\n                style={\r\n                    [\r\n                        styles.container,\r\n                        {\r\n                            borderRadius: roundness,\r\n                            opacity: opacity,\r\n                            transform: [\r\n                                {\r\n                                    scale: visible\r\n                                        ? opacity.interpolate({\r\n                                            inputRange: [0, 1],\r\n                                            outputRange: [0.9, 1],\r\n                                        })\r\n                                        : 1,\r\n                                },\r\n                            ],\r\n                        },\r\n                        { backgroundColor: colors.onSurface },\r\n                        style,\r\n                    ] as StyleProp<ViewStyle>\r\n                }\r\n                {...rest}\r\n            >\r\n                <Text\r\n                    style={[\r\n                        styles.content,\r\n                        { marginRight: action ? 0 : 16, color: colors.surface },\r\n                    ]}\r\n                >\r\n                    {children}\r\n                </Text>\r\n                {action ? (\r\n                    <Button\r\n                        accessibilityLabel={action.accessibilityLabel}\r\n                        onPress={() => {\r\n                            action.onPress();\r\n                            onDismiss();\r\n                        }}\r\n                        style={styles.button}\r\n                        color={colors.accent}\r\n                        compact\r\n                        mode=\"text\"\r\n                    >\r\n                        {action.label}\r\n                    </Button>\r\n                ) : null}\r\n            </Surface>\r\n        </SafeAreaView>\r\n    );\r\n};\r\n\r\n/**\r\n * Show the Snackbar for a short duration.\r\n */\r\nSnackbar.DURATION_SHORT = DURATION_SHORT;\r\n\r\n/**\r\n * Show the Snackbar for a medium duration.\r\n */\r\nSnackbar.DURATION_MEDIUM = DURATION_MEDIUM;\r\n\r\n/**\r\n * Show the Snackbar for a long duration.\r\n */\r\nSnackbar.DURATION_LONG = DURATION_LONG;\r\n\r\nconst styles = StyleSheet.create({\r\n    wrapper: {\r\n        position: \"absolute\",\r\n        bottom: 0,\r\n        width: \"100%\",\r\n    },\r\n    container: {\r\n        elevation: 6,\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n        alignItems: \"center\",\r\n        margin: 8,\r\n        borderRadius: 4,\r\n    },\r\n    content: {\r\n        marginLeft: 16,\r\n        marginVertical: 14,\r\n        flexWrap: \"wrap\",\r\n        flex: 1,\r\n    },\r\n    button: {\r\n        marginHorizontal: 8,\r\n        marginVertical: 6,\r\n    },\r\n});\r\n\r\nexport default Snackbar;\r\n"]}