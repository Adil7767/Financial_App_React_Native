{"version":3,"sources":["Chip.tsx"],"names":["Chip","mode","children","icon","avatar","selected","disabled","accessibilityLabel","closeIconAccessibilityLabel","onPress","onLongPress","onClose","textStyle","style","testID","selectedColor","ellipsizeMode","rest","theme","React","useContext","ThemeContext","current","elevation","useRef","Animated","Value","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","dark","colors","defaultBackgroundColor","surface","backgroundColor","borderRadius","StyleSheet","flatten","borderColor","undefined","white","black","alpha","rgb","string","textColor","text","iconColor","backgroundColorString","selectedBackgroundColor","lighten","darken","underlayColor","fade","accessibilityTraits","accessibilityState","push","styles","container","Platform","OS","content","paddingRight","avatarWrapper","opacity","isValidElement","cloneElement","props","avatarSelected","fonts","regular","color","marginRight","marginLeft","closeButtonStyle","closeIcon","create","borderWidth","hairlineWidth","borderStyle","flexDirection","alignItems","paddingLeft","position","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    AccessibilityState,\r\n    Animated,\r\n    Platform,\r\n    StyleProp,\r\n    StyleSheet,\r\n    TouchableWithoutFeedback,\r\n    View,\r\n    ViewStyle,\r\n} from \"react-native\";\r\nimport color from \"color\";\r\nimport { SvgIcon } from \"../Icon\";\r\nimport Surface from \"../Surface\";\r\nimport Text from \"../Text\";\r\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\r\nimport { black, white } from \"../theme/colors\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\nimport CheckIcon from \"@mdi/svg/svg/check.svg\";\r\nimport CloseCircleIcon from \"@mdi/svg/svg/close-circle.svg\";\r\nimport type { EllipsizeProp } from \"../types\";\r\n\r\ntype Props = React.ComponentProps<typeof Surface> & {\r\n    /**\r\n     * Mode of the chip.\r\n     * - `flat` - flat chip without outline.\r\n     * - `outlined` - chip with an outline.\r\n     */\r\n    mode?: \"flat\" | \"outlined\";\r\n    /**\r\n     * Text content of the `Chip`.\r\n     */\r\n    children: React.ReactNode;\r\n    /**\r\n     * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\r\n     */\r\n    icon?: React.ReactElement;\r\n    /**\r\n     * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\r\n     */\r\n    avatar?: React.ReactNode;\r\n    /**\r\n     * Whether chip is selected.\r\n     */\r\n    selected?: boolean;\r\n    /**\r\n     * Whether to style the chip color as selected.\r\n     */\r\n    selectedColor?: string;\r\n    /**\r\n     * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\r\n     */\r\n    accessibilityLabel?: string;\r\n    /**\r\n     * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\r\n     */\r\n    closeIconAccessibilityLabel?: string;\r\n    /**\r\n     * Function to execute on press.\r\n     */\r\n    onPress?: () => void;\r\n    /**\r\n     * Function to execute on long press.\r\n     */\r\n    onLongPress?: () => void;\r\n    /**\r\n     * Function to execute on close button press. The close button appears only when this prop is specified.\r\n     */\r\n    onClose?: () => void;\r\n    /**\r\n     * Style of chip's text\r\n     */\r\n    textStyle?: any;\r\n    style?: StyleProp<ViewStyle>;\r\n\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n    /**\r\n     * Pass down testID from chip props to touchable for Detox tests.\r\n     */\r\n    testID?: string;\r\n    /**\r\n     * Ellipsize Mode for the children text\r\n     */\r\n    ellipsizeMode?: EllipsizeProp;\r\n};\r\n\r\n/**\r\n * Chips can be used to display entities in small blocks.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\r\n *     <figcaption>Flat chip</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\r\n *     <figcaption>Outlined chip</figcaption>\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import Chip from 'react-native-simple-elements/components/Chip';\r\n *\r\n * const MyComponent = () => (\r\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst Chip = ({\r\n    mode = \"flat\",\r\n    children,\r\n    icon,\r\n    avatar,\r\n    selected = false,\r\n    disabled = false,\r\n    accessibilityLabel,\r\n    closeIconAccessibilityLabel = \"Close\",\r\n    onPress,\r\n    onLongPress,\r\n    onClose,\r\n    textStyle,\r\n    style,\r\n    testID,\r\n    selectedColor,\r\n    ellipsizeMode,\r\n    ...rest\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n    const { current: elevation } = React.useRef<Animated.Value>(\r\n        new Animated.Value(0)\r\n    );\r\n\r\n    const handlePressIn = () => {\r\n        const { scale } = theme.animation;\r\n        Animated.timing(elevation, {\r\n            toValue: 4,\r\n            duration: 200 * scale,\r\n            useNativeDriver: true,\r\n        }).start();\r\n    };\r\n\r\n    const handlePressOut = () => {\r\n        const { scale } = theme.animation;\r\n        Animated.timing(elevation, {\r\n            toValue: 0,\r\n            duration: 150 * scale,\r\n            useNativeDriver: true,\r\n        }).start();\r\n    };\r\n\r\n    const { dark, colors } = theme;\r\n    const defaultBackgroundColor =\r\n        mode === \"outlined\" ? colors.surface : dark ? \"#383838\" : \"#ebebeb\";\r\n\r\n    const {\r\n        backgroundColor = defaultBackgroundColor,\r\n        borderRadius = 16,\r\n    } = (StyleSheet.flatten(style) || {}) as ViewStyle;\r\n\r\n    const borderColor =\r\n        mode === \"outlined\"\r\n            ? color(\r\n                selectedColor !== undefined\r\n                    ? selectedColor\r\n                    : color(dark ? white : black)\r\n            )\r\n                .alpha(0.29)\r\n                .rgb()\r\n                .string()\r\n            : backgroundColor;\r\n    const textColor = disabled\r\n        ? colors.disabled\r\n        : color(selectedColor !== undefined ? selectedColor : colors.text)\r\n            .alpha(0.87)\r\n            .rgb()\r\n            .string();\r\n    const iconColor = disabled\r\n        ? colors.disabled\r\n        : color(selectedColor !== undefined ? selectedColor : colors.text)\r\n            .alpha(0.54)\r\n            .rgb()\r\n            .string();\r\n\r\n    const backgroundColorString =\r\n        typeof backgroundColor === \"string\"\r\n            ? backgroundColor\r\n            : defaultBackgroundColor;\r\n    const selectedBackgroundColor = (dark\r\n        ? color(backgroundColorString).lighten(mode === \"outlined\" ? 0.2 : 0.4)\r\n        : color(backgroundColorString).darken(mode === \"outlined\" ? 0.08 : 0.2)\r\n    )\r\n        .rgb()\r\n        .string();\r\n\r\n    const underlayColor = selectedColor\r\n        ? color(selectedColor).fade(0.5).rgb().string()\r\n        : selectedBackgroundColor;\r\n\r\n    const accessibilityTraits = [\"button\"];\r\n    const accessibilityState: AccessibilityState = {\r\n        selected,\r\n        disabled,\r\n    };\r\n\r\n    if (selected) {\r\n        accessibilityTraits.push(\"selected\");\r\n    }\r\n\r\n    if (disabled) {\r\n        accessibilityTraits.push(\"disabled\");\r\n    }\r\n\r\n    return (\r\n        <Surface\r\n            style={\r\n                [\r\n                    styles.container,\r\n                    {\r\n                        elevation: Platform.OS === \"android\" ? elevation : 0,\r\n                        backgroundColor: selected\r\n                            ? selectedBackgroundColor\r\n                            : backgroundColor,\r\n                        borderColor,\r\n                        borderRadius,\r\n                    },\r\n                    style,\r\n                ] as StyleProp<ViewStyle>\r\n            }\r\n            {...rest}\r\n        >\r\n            <TouchableRipple\r\n                borderless\r\n                // delayPressIn={0}\r\n                style={{ borderRadius }}\r\n                onPress={onPress}\r\n                onLongPress={onLongPress}\r\n                onPressIn={handlePressIn}\r\n                onPressOut={handlePressOut}\r\n                underlayColor={underlayColor}\r\n                disabled={disabled}\r\n                accessibilityLabel={accessibilityLabel}\r\n                // accessibilityTraits={accessibilityTraits}\r\n                // accessibilityComponentType=\"button\"\r\n                accessibilityRole=\"button\"\r\n                accessibilityState={accessibilityState}\r\n                testID={testID}\r\n            >\r\n                <View style={[styles.content, { paddingRight: onClose ? 32 : 4 }]}>\r\n                    {avatar && !icon ? (\r\n                        <View style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}>\r\n                            {React.isValidElement(avatar)\r\n                                ? React.cloneElement(avatar, {\r\n                                    style: [styles.avatar, avatar.props.style],\r\n                                })\r\n                                : avatar}\r\n                        </View>\r\n                    ) : null}\r\n                    {icon || selected ? (\r\n                        <View\r\n                            style={[\r\n                                styles.icon,\r\n                                avatar ? [styles.avatar, styles.avatarSelected] : null,\r\n                            ]}\r\n                        >\r\n                            {icon ? (\r\n                                <SvgIcon\r\n                                    icon={icon}\r\n                                    color={avatar ? white : iconColor}\r\n                                    size={18}\r\n                                />\r\n                            ) : (\r\n                                <CheckIcon\r\n                                    color={avatar ? white : iconColor}\r\n                                    size={18}\r\n                                    direction=\"ltr\"\r\n                                />\r\n                            )}\r\n                        </View>\r\n                    ) : null}\r\n                    <Text\r\n                        selectable={false}\r\n                        numberOfLines={1}\r\n                        style={[\r\n                            styles.text,\r\n                            {\r\n                                ...theme.fonts.regular,\r\n                                color: textColor,\r\n                                marginRight: onClose ? 0 : 8,\r\n                                marginLeft: avatar || icon || selected ? 4 : 8,\r\n                            },\r\n                            textStyle,\r\n                        ]}\r\n                        ellipsizeMode={ellipsizeMode}\r\n                    >\r\n                        {children}\r\n                    </Text>\r\n                </View>\r\n            </TouchableRipple>\r\n            {onClose ? (\r\n                <View style={styles.closeButtonStyle}>\r\n                    <TouchableWithoutFeedback\r\n                        onPress={onClose}\r\n                        // accessibilityTraits=\"button\"\r\n                        // accessibilityComponentType=\"button\"\r\n                        accessibilityRole=\"button\"\r\n                        accessibilityLabel={closeIconAccessibilityLabel}\r\n                    >\r\n                        <View style={[styles.icon, styles.closeIcon]}>\r\n                            <CloseCircleIcon\r\n                                size={16}\r\n                                color={iconColor}\r\n                                direction=\"ltr\"\r\n                            />\r\n\r\n                        </View>\r\n                    </TouchableWithoutFeedback>\r\n                </View>\r\n            ) : null}\r\n        </Surface>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        borderWidth: StyleSheet.hairlineWidth,\r\n        borderStyle: \"solid\",\r\n        flexDirection: \"row\",\r\n    },\r\n    content: {\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        paddingLeft: 4,\r\n        position: \"relative\",\r\n    },\r\n    icon: {\r\n        padding: 4,\r\n        alignSelf: \"center\",\r\n    },\r\n    closeIcon: {\r\n        marginRight: 4,\r\n    },\r\n    text: {\r\n        minHeight: 24,\r\n        lineHeight: 24,\r\n        textAlignVertical: \"center\",\r\n        marginVertical: 4,\r\n    },\r\n    avatar: {\r\n        width: 24,\r\n        height: 24,\r\n        borderRadius: 12,\r\n    },\r\n    avatarWrapper: {\r\n        marginRight: 4,\r\n    },\r\n    avatarSelected: {\r\n        position: \"absolute\",\r\n        top: 4,\r\n        left: 4,\r\n        backgroundColor: \"rgba(0, 0, 0, .29)\",\r\n    },\r\n    closeButtonStyle: {\r\n        position: \"absolute\",\r\n        right: 0,\r\n        height: \"100%\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n});\r\n\r\nexport default Chip;\r\n"]}