{"version":3,"sources":["Badge.tsx"],"names":["defaultSize","Badge","children","size","style","visible","rest","theme","React","useContext","ThemeContext","current","opacity","useRef","Animated","Value","isFirstRendering","animation","scale","useEffect","timing","toValue","duration","useNativeDriver","start","backgroundColor","colors","notification","restStyle","StyleSheet","flatten","textColor","isLight","black","white","borderRadius","color","fontSize","fonts","regular","lineHeight","height","minWidth","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,WAAW,GAAG,EAApB;;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,CAAC;AACXC,EAAAA,QADW;AAEXC,EAAAA,IAAI,GAAGH,WAFI;AAGXI,EAAAA,KAHW;AAIXC,EAAAA,OAAO,GAAG,IAJC;AAKX,KAAGC;AALQ,CAAD,KAMD;AACT,QAAMC,KAAK,GAAGC,KAAK,CAACC,UAAN,CAAiBC,8BAAjB,CAAd;AACA,QAAM;AAAEC,IAAAA,OAAO,EAAEC;AAAX,MAAuBJ,KAAK,CAACK,MAAN,CACzB,IAAIC,sBAASC,KAAb,CAAmBV,OAAO,GAAG,CAAH,GAAO,CAAjC,CADyB,CAA7B;AAGA,QAAMW,gBAAgB,GAAGR,KAAK,CAACK,MAAN,CAAsB,IAAtB,CAAzB;AAEA,QAAM;AACFI,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AADT,MAEFX,KAFJ;AAIAC,EAAAA,KAAK,CAACW,SAAN,CAAgB,MAAM;AAClB;AACA,QAAIH,gBAAgB,CAACL,OAArB,EAA8B;AAC1BK,MAAAA,gBAAgB,CAACL,OAAjB,GAA2B,KAA3B;AACA;AACH;;AAEDG,0BAASM,MAAT,CAAgBR,OAAhB,EAAyB;AACrBS,MAAAA,OAAO,EAAEhB,OAAO,GAAG,CAAH,GAAO,CADF;AAErBiB,MAAAA,QAAQ,EAAE,MAAMJ,KAFK;AAGrBK,MAAAA,eAAe,EAAE;AAHI,KAAzB,EAIGC,KAJH;AAKH,GAZD,EAYG,CAACnB,OAAD,EAAUO,OAAV,EAAmBM,KAAnB,CAZH;AAcA,QAAM;AACFO,IAAAA,eAAe,GAAGlB,KAAK,CAACmB,MAAN,CAAaC,YAD7B;AAEF,OAAGC;AAFD,MAGFC,wBAAWC,OAAX,CAAmB1B,KAAnB,KAAoC,EAHxC;AAIA,QAAM2B,SAAS,GAAG,oBAAMN,eAAN,EAAuBO,OAAvB,KAAmCC,aAAnC,GAA2CC,aAA7D;AAEA,QAAMC,YAAY,GAAGhC,IAAI,GAAG,CAA5B;AAEA;AAAA;AACI;AACA,wBAAC,qBAAD,CAAU,IAAV;AACI,MAAA,aAAa,EAAE,CADnB;AAEI,MAAA,KAAK,EAAE,CACH;AACIS,QAAAA,OADJ;AAEIa,QAAAA,eAFJ;AAGIW,QAAAA,KAAK,EAAEL,SAHX;AAIIM,QAAAA,QAAQ,EAAElC,IAAI,GAAG,GAJrB;AAKI,WAAGI,KAAK,CAAC+B,KAAN,CAAYC,OALnB;AAMIC,QAAAA,UAAU,EAAErC,IANhB;AAOIsC,QAAAA,MAAM,EAAEtC,IAPZ;AAQIuC,QAAAA,QAAQ,EAAEvC,IARd;AASIgC,QAAAA;AATJ,OADG,EAYH;AACIQ,QAAAA,SAAS,EAAE,UADf;AAEIC,QAAAA,SAAS,EAAE,QAFf;AAGIC,QAAAA,iBAAiB,EAAE,QAHvB;AAIIC,QAAAA,iBAAiB,EAAE,CAJvB;AAKIC,QAAAA,QAAQ,EAAE;AALd,OAZG,EAmBHnB,SAnBG;AAFX,OAuBQtB,IAvBR,GAyBKJ,QAzBL;AAFJ;AA8BH,CArED;;eAuEeD,K","sourcesContent":["import * as React from \"react\";\r\nimport { Animated, StyleSheet, StyleProp, TextStyle } from \"react-native\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\nimport color from \"color\";\r\nimport { black, white } from \"../theme/colors\";\r\n\r\nconst defaultSize = 20;\r\n\r\ntype Props = React.ComponentProps<typeof Animated.Text> & {\r\n    /**\r\n     * Whether the badge is visible\r\n     */\r\n    visible: boolean;\r\n    /**\r\n     * Content of the `Badge`.\r\n     */\r\n    children?: string | number;\r\n    /**\r\n     * Size of the `Badge`.\r\n     */\r\n    size?: number;\r\n\r\n    style?: StyleProp<TextStyle>;\r\n\r\n    ref?: React.RefObject<typeof Animated.Text>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n};\r\n\r\n/**\r\n * Badges are small status descriptors for UI elements.\r\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\r\n *     <figcaption>Badge with content</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\r\n *     <figcaption>Badge without content</figcaption>\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import Badge from 'react-native-simple-elements/components/Badge';\r\n *\r\n * const MyComponent = () => (\r\n *   <Badge>3</Badge>\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst Badge = ({\r\n    children,\r\n    size = defaultSize,\r\n    style,\r\n    visible = true,\r\n    ...rest\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n    const { current: opacity } = React.useRef<Animated.Value>(\r\n        new Animated.Value(visible ? 1 : 0)\r\n    );\r\n    const isFirstRendering = React.useRef<boolean>(true);\r\n\r\n    const {\r\n        animation: { scale },\r\n    } = theme;\r\n\r\n    React.useEffect(() => {\r\n        // Do not run animation on very first rendering\r\n        if (isFirstRendering.current) {\r\n            isFirstRendering.current = false;\r\n            return;\r\n        }\r\n\r\n        Animated.timing(opacity, {\r\n            toValue: visible ? 1 : 0,\r\n            duration: 150 * scale,\r\n            useNativeDriver: true,\r\n        }).start();\r\n    }, [visible, opacity, scale]);\r\n\r\n    const {\r\n        backgroundColor = theme.colors.notification,\r\n        ...restStyle\r\n    } = StyleSheet.flatten(style) as any || {};\r\n    const textColor = color(backgroundColor).isLight() ? black : white;\r\n\r\n    const borderRadius = size / 2;\r\n\r\n    return (\r\n        // @ts-ignore\r\n        <Animated.Text\r\n            numberOfLines={1}\r\n            style={[\r\n                {\r\n                    opacity,\r\n                    backgroundColor,\r\n                    color: textColor,\r\n                    fontSize: size * 0.5,\r\n                    ...theme.fonts.regular,\r\n                    lineHeight: size,\r\n                    height: size,\r\n                    minWidth: size,\r\n                    borderRadius,\r\n                },\r\n                {\r\n                    alignSelf: \"flex-end\",\r\n                    textAlign: \"center\",\r\n                    textAlignVertical: \"center\",\r\n                    paddingHorizontal: 4,\r\n                    overflow: \"hidden\",\r\n                },\r\n                restStyle,\r\n            ]}\r\n            {...rest}\r\n        >\r\n            {children}\r\n        </Animated.Text>\r\n    );\r\n};\r\n\r\nexport default Badge;\r\n"]}