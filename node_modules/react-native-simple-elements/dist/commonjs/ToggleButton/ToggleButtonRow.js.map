{"version":3,"sources":["ToggleButtonRow.tsx"],"names":["ToggleButtonRow","value","onValueChange","children","style","count","React","Children","styles","row","map","child","i","type","ToggleButton","cloneElement","button","first","last","middle","props","displayName","StyleSheet","create","flexDirection","borderWidth","hairlineWidth","borderTopRightRadius","borderBottomRightRadius","borderRadius","borderLeftWidth","borderTopLeftRadius","borderBottomLeftRadius"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,eAAe,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,aAAT;AAAwBC,EAAAA,QAAxB;AAAkCC,EAAAA;AAAlC,CAAD,KAAsD;AAC1E,QAAMC,KAAK,GAAGC,KAAK,CAACC,QAAN,CAAeF,KAAf,CAAqBF,QAArB,CAAd;AAEA,sBACI,oBAAC,0BAAD;AAAmB,IAAA,KAAK,EAAEF,KAA1B;AAAiC,IAAA,aAAa,EAAEC;AAAhD,kBACI,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACM,MAAM,CAACC,GAAR,EAAaL,KAAb;AAAb,KACKE,KAAK,CAACC,QAAN,CAAeG,GAAf,CAAmBP,QAAnB,EAA6B,CAACQ,KAAD,EAAQC,CAAR,KAAc;AACxC;AACA,QAAID,KAAK,IAAIA,KAAK,CAACE,IAAN,KAAeC,qBAA5B,EAA0C;AACtC;AACA,0BAAOR,KAAK,CAACS,YAAN,CAAmBJ,KAAnB,EAA0B;AAC7BP,QAAAA,KAAK,EAAE,CACHI,MAAM,CAACQ,MADJ,EAEHJ,CAAC,KAAK,CAAN,GACMJ,MAAM,CAACS,KADb,GAEML,CAAC,KAAKP,KAAK,GAAG,CAAd,GACIG,MAAM,CAACU,IADX,GAEIV,MAAM,CAACW,MANd,EAOH;AACAR,QAAAA,KAAK,CAACS,KAAN,CAAYhB,KART;AADsB,OAA1B,CAAP;AAYH;;AAED,WAAOO,KAAP;AACH,GAnBA,CADL,CADJ,CADJ;AA0BH,CA7BD;;;AA+BAX,eAAe,CAACqB,WAAhB,GAA8B,kBAA9B;;AAEA,MAAMb,MAAM,GAAGc,wBAAWC,MAAX,CAAkB;AAC7Bd,EAAAA,GAAG,EAAE;AACDe,IAAAA,aAAa,EAAE;AADd,GADwB;AAI7BR,EAAAA,MAAM,EAAE;AACJS,IAAAA,WAAW,EAAEH,wBAAWI;AADpB,GAJqB;AAQ7BT,EAAAA,KAAK,EAAE;AACHU,IAAAA,oBAAoB,EAAE,CADnB;AAEHC,IAAAA,uBAAuB,EAAE;AAFtB,GARsB;AAa7BT,EAAAA,MAAM,EAAE;AACJU,IAAAA,YAAY,EAAE,CADV;AAEJC,IAAAA,eAAe,EAAE;AAFb,GAbqB;AAkB7BZ,EAAAA,IAAI,EAAE;AACFY,IAAAA,eAAe,EAAE,CADf;AAEFC,IAAAA,mBAAmB,EAAE,CAFnB;AAGFC,IAAAA,sBAAsB,EAAE;AAHtB;AAlBuB,CAAlB,CAAf;;eAyBehC,e,EAEf","sourcesContent":["import * as React from \"react\";\r\nimport { StyleSheet, View, StyleProp, ViewStyle } from \"react-native\";\r\nimport ToggleButtonGroup from \"./ToggleButtonGroup\";\r\nimport ToggleButton from \"./ToggleButton\";\r\n\r\ntype Props = {\r\n    /**\r\n     * Function to execute on selection change.\r\n     */\r\n    onValueChange: (value: string) => void;\r\n    /**\r\n     * Value of the currently selected toggle button.\r\n     */\r\n    value: string;\r\n    /**\r\n     * React elements containing toggle buttons.\r\n     */\r\n    children: React.ReactNode;\r\n    style?: StyleProp<ViewStyle>;\r\n};\r\n\r\n/**\r\n * Toggle button row renders a group of toggle buttons in a row.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img class=\"medium\" src=\"screenshots/toggle-button-row.gif\" />\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import ToggleButton from 'react-native-simple-elements/components/ToggleButton';\r\n *\r\n * const MyComponent = () => {\r\n *   const [value, setValue] = React.useState('left');\r\n *\r\n *   return (\r\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\r\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\r\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\r\n *     </ToggleButton.Row>\r\n *   );\r\n * };\r\n *\r\n * export default MyComponent;\r\n *\r\n *```\r\n */\r\nconst ToggleButtonRow = ({ value, onValueChange, children, style }: Props) => {\r\n    const count = React.Children.count(children);\r\n\r\n    return (\r\n        <ToggleButtonGroup value={value} onValueChange={onValueChange}>\r\n            <View style={[styles.row, style]}>\r\n                {React.Children.map(children, (child, i) => {\r\n                    // @ts-ignore\r\n                    if (child && child.type === ToggleButton) {\r\n                        // @ts-ignore\r\n                        return React.cloneElement(child, {\r\n                            style: [\r\n                                styles.button,\r\n                                i === 0\r\n                                    ? styles.first\r\n                                    : i === count - 1\r\n                                        ? styles.last\r\n                                        : styles.middle,\r\n                                // @ts-ignore\r\n                                child.props.style,\r\n                            ],\r\n                        });\r\n                    }\r\n\r\n                    return child;\r\n                })}\r\n            </View>\r\n        </ToggleButtonGroup>\r\n    );\r\n};\r\n\r\nToggleButtonRow.displayName = \"ToggleButton.Row\";\r\n\r\nconst styles = StyleSheet.create({\r\n    row: {\r\n        flexDirection: \"row\",\r\n    },\r\n    button: {\r\n        borderWidth: StyleSheet.hairlineWidth,\r\n    },\r\n\r\n    first: {\r\n        borderTopRightRadius: 0,\r\n        borderBottomRightRadius: 0,\r\n    },\r\n\r\n    middle: {\r\n        borderRadius: 0,\r\n        borderLeftWidth: 0,\r\n    },\r\n\r\n    last: {\r\n        borderLeftWidth: 0,\r\n        borderTopLeftRadius: 0,\r\n        borderBottomLeftRadius: 0,\r\n    },\r\n});\r\n\r\nexport default ToggleButtonRow;\r\n\r\n// @component-docs ignore-next-line\r\nexport { ToggleButtonRow };\r\n"]}