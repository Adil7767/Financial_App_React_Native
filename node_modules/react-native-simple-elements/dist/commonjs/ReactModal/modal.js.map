{"version":3,"sources":["modal.tsx"],"names":["extractAnimationFromProps","props","animationIn","animationOut","ReactNativeModal","React","Component","constructor","showContent","isVisible","deviceWidth","Dimensions","get","width","deviceHeight","height","isSwipeable","swipeDirection","pan","state","animEvt","panResponder","PanResponder","create","onMoveShouldSetPanResponder","evt","gestureState","propagateSwipe","shouldSetPanResponder","Math","abs","dx","dy","onSwipeStart","currentSwipingDirection","getSwipingDirection","createAnimationEventForSwipe","onStartShouldSetPanResponder","e","hasScrollableView","_dispatchInstances","some","instance","test","type","scrollTo","scrollOffset","onPanResponderMove","isSwipeDirectionAllowed","newOpacityFactor","calcDistancePercentage","backdropRef","transitionTo","opacity","backdropOpacity","onSwipeMove","scrollHorizontal","offsetX","scrollOffsetMax","x","animated","offsetY","y","onPanResponderRelease","accDistance","getAccDistancePerDirection","swipeThreshold","onSwipeComplete","inSwipeClosingState","swipingDirection","onSwipe","onSwipeCancel","Animated","spring","toValue","bounciness","useNativeDriver","start","moveY","y0","moveX","x0","event","direction","Array","isArray","includes","draggedDown","draggedUp","draggedLeft","draggedRight","isDirectionIncluded","setState","isTransitioning","backdropTransitionInTiming","setValue","contentRef","onModalWillShow","interactionHandle","InteractionManager","createInteractionHandle","animate","animationInTiming","then","clearInteractionHandle","close","onModalShow","backdropTransitionOutTiming","onModalWillHide","animationOutTiming","open","onModalHide","hasBackdrop","customBackdrop","isValidElement","console","warn","backdropColor","useNativeDriverForBackdrop","onBackdropPress","hasCustomBackdrop","backdropComputedStyle","getDeviceWidth","getDeviceHeight","backgroundColor","backdropWrapper","ref","undefined","styles","backdrop","ValueXY","buildPanResponder","getDerivedStateFromProps","nextProps","componentDidMount","DeviceEventEmitter","addListener","handleDimensionsUpdate","componentWillUnmount","removeListener","componentDidUpdate","prevProps","render","avoidKeyboard","coverScreen","children","onBackButtonPress","style","otherProps","testID","containerProps","computedStyle","margin","transform","translateY","content","panHandlers","panPosition","getTranslateTransform","getLayout","_children","hideModalContentWhileAnimating","containerView","containerBox","makeBackdrop","Platform","OS","concat","supportedOrientations"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    Animated,\r\n    DeviceEventEmitter,\r\n    Dimensions,\r\n    InteractionManager,\r\n    KeyboardAvoidingView,\r\n    Modal,\r\n    PanResponder,\r\n    PanResponderGestureState,\r\n    PanResponderInstance,\r\n    Platform,\r\n    StyleProp,\r\n    TouchableWithoutFeedback,\r\n    View,\r\n    ViewStyle,\r\n    ViewProps,\r\n} from \"react-native\";\r\nimport * as animatable from \"react-native-animatable\";\r\nimport { Animation, CustomAnimation } from \"react-native-animatable\";\r\n\r\nimport {\r\n    // initializeAnimations,\r\n    buildAnimations,\r\n    reversePercentage,\r\n} from \"./utils\";\r\nimport styles from \"./modal.style\";\r\nimport {\r\n    Direction,\r\n    Orientation,\r\n    OrNull,\r\n    AnimationEvent,\r\n    PresentationStyle,\r\n    OnOrientationChange,\r\n} from \"./types\";\r\n\r\n// Override default react-native-animatable animations\r\n// initializeAnimations();\r\n\r\nexport type OnSwipeCompleteParams = {\r\n    swipingDirection: Direction;\r\n};\r\n\r\ntype State = {\r\n    showContent: boolean;\r\n    isVisible: boolean;\r\n    deviceWidth: number;\r\n    deviceHeight: number;\r\n    isSwipeable: boolean;\r\n    pan: OrNull<Animated.ValueXY>;\r\n};\r\n\r\nexport interface ModalProps extends ViewProps {\r\n    children: React.ReactNode;\r\n    onSwipeStart?: () => void;\r\n    onSwipeMove?: (percentageShown: number) => void;\r\n    onSwipeComplete?: (params: OnSwipeCompleteParams) => void;\r\n    onSwipeCancel?: () => void;\r\n    style?: StyleProp<ViewStyle>;\r\n    swipeDirection?: Direction | Array<Direction>;\r\n    onDismiss?: () => void;\r\n    onShow?: () => void;\r\n    hardwareAccelerated?: boolean;\r\n    onOrientationChange?: OnOrientationChange;\r\n    presentationStyle?: PresentationStyle;\r\n\r\n    // Default ModalProps Provided\r\n    animationIn: Animation | CustomAnimation;\r\n    animationInTiming: number;\r\n    animationOut: Animation | CustomAnimation;\r\n    animationOutTiming: number;\r\n    avoidKeyboard: boolean;\r\n    coverScreen: boolean;\r\n    hasBackdrop: boolean;\r\n    backdropColor: string;\r\n    backdropOpacity: number;\r\n    backdropTransitionInTiming: number;\r\n    backdropTransitionOutTiming: number;\r\n    customBackdrop: React.ReactNode;\r\n    useNativeDriver: boolean;\r\n    useNativeDriverForBackdrop?: boolean;\r\n    deviceHeight: number;\r\n    deviceWidth: number;\r\n    hideModalContentWhileAnimating: boolean;\r\n    propagateSwipe: boolean;\r\n    isVisible: boolean;\r\n    onModalShow: () => void;\r\n    onModalWillShow: () => void;\r\n    onModalHide: () => void;\r\n    onModalWillHide: () => void;\r\n    onBackButtonPress: () => void;\r\n    onBackdropPress: () => void;\r\n    swipeThreshold: number;\r\n    scrollTo: OrNull<(e: any) => void>;\r\n    scrollOffset: number;\r\n    scrollOffsetMax: number;\r\n    scrollHorizontal: boolean;\r\n    statusBarTranslucent?: boolean;\r\n    supportedOrientations?: Orientation[];\r\n}\r\n\r\nconst extractAnimationFromProps = (props: ModalProps) => ({\r\n    animationIn: props.animationIn,\r\n    animationOut: props.animationOut,\r\n});\r\n\r\nexport class ReactNativeModal extends React.Component<ModalProps, State> {\r\n\r\n    public static defaultProps = {\r\n        animationIn: \"slideInUp\",\r\n        animationInTiming: 300,\r\n        animationOut: \"slideOutDown\",\r\n        animationOutTiming: 300,\r\n        avoidKeyboard: false,\r\n        coverScreen: true,\r\n        hasBackdrop: true,\r\n        backdropColor: \"black\",\r\n        backdropOpacity: 0.7,\r\n        backdropTransitionInTiming: 300,\r\n        backdropTransitionOutTiming: 300,\r\n        customBackdrop: null,\r\n        useNativeDriver: false,\r\n        deviceHeight: null,\r\n        deviceWidth: null,\r\n        hideModalContentWhileAnimating: false,\r\n        propagateSwipe: false,\r\n        isVisible: false,\r\n        onModalShow: () => null,\r\n        onModalWillShow: () => null,\r\n        onModalHide: () => null,\r\n        onModalWillHide: () => null,\r\n        onBackdropPress: () => null,\r\n        onBackButtonPress: () => null,\r\n        swipeThreshold: 100,\r\n\r\n        scrollTo: null,\r\n        scrollOffset: 0,\r\n        scrollOffsetMax: 0,\r\n        scrollHorizontal: false,\r\n        supportedOrientations: [\"portrait\", \"landscape\"],\r\n    };\r\n\r\n    // We use an internal state for keeping track of the modal visibility: this allows us to keep\r\n    // the modal visible during the exit animation, even if the user has already change the\r\n    // isVisible prop to false.\r\n    // We store in the state the device width and height so that we can update the modal on\r\n    // device rotation.\r\n    state: State = {\r\n        showContent: true,\r\n        isVisible: false,\r\n        deviceWidth: Dimensions.get(\"screen\").width,\r\n        deviceHeight: Dimensions.get(\"screen\").height,\r\n        isSwipeable: !!this.props.swipeDirection,\r\n        pan: null,\r\n    };\r\n\r\n    isTransitioning = false;\r\n    inSwipeClosingState = false;\r\n    currentSwipingDirection: OrNull<Direction> = null;\r\n\r\n    animationIn: string;\r\n    animationOut: string;\r\n    backdropRef: any;\r\n    contentRef: any;\r\n    panResponder: OrNull<PanResponderInstance> = null;\r\n\r\n    constructor(props: ModalProps) {\r\n        super(props);\r\n        const { animationIn, animationOut } = buildAnimations(\r\n            extractAnimationFromProps(props),\r\n        );\r\n\r\n        this.animationIn = animationIn;\r\n        this.animationOut = animationOut;\r\n\r\n        if (this.state.isSwipeable) {\r\n            this.state = {\r\n                ...this.state,\r\n                pan: new Animated.ValueXY(),\r\n            };\r\n            this.buildPanResponder();\r\n        }\r\n        if (props.isVisible) {\r\n            this.state = {\r\n                ...this.state,\r\n                isVisible: true,\r\n                showContent: true,\r\n            };\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps: ModalProps, state: State) {\r\n        if (!state.isVisible && nextProps.isVisible) {\r\n            return { isVisible: true, showContent: true };\r\n        }\r\n        return null;\r\n    }\r\n    componentDidMount() {\r\n        // Show deprecation message\r\n        if ((this.props as any).onSwipe) {\r\n            console.warn(\r\n                \"`<Modal onSwipe=\\\"...\\\" />` is deprecated and will be removed starting from 13.0.0. Use `<Modal onSwipeComplete=\\\"...\\\" />` instead.\",\r\n            );\r\n        }\r\n        DeviceEventEmitter.addListener(\r\n            \"didUpdateDimensions\",\r\n            this.handleDimensionsUpdate,\r\n        );\r\n        if (this.state.isVisible) {\r\n            this.open();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        DeviceEventEmitter.removeListener(\r\n            \"didUpdateDimensions\",\r\n            this.handleDimensionsUpdate,\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ModalProps) {\r\n        // If the animations have been changed then rebuild them to make sure we're\r\n        // using the most up-to-date ones\r\n        if (\r\n            this.props.animationIn !== prevProps.animationIn ||\r\n            this.props.animationOut !== prevProps.animationOut\r\n        ) {\r\n            const { animationIn, animationOut } = buildAnimations(\r\n                extractAnimationFromProps(this.props),\r\n            );\r\n            this.animationIn = animationIn;\r\n            this.animationOut = animationOut;\r\n        }\r\n        // If backdrop opacity has been changed then make sure to update it\r\n        if (\r\n            this.props.backdropOpacity !== prevProps.backdropOpacity &&\r\n            this.backdropRef\r\n        ) {\r\n            this.backdropRef.transitionTo(\r\n                { opacity: this.props.backdropOpacity },\r\n                this.props.backdropTransitionInTiming,\r\n            );\r\n        }\r\n        // On modal open request, we slide the view up and fade in the backdrop\r\n        if (this.props.isVisible && !prevProps.isVisible) {\r\n            this.open();\r\n        } else if (!this.props.isVisible && prevProps.isVisible) {\r\n            // On modal close request, we slide the view down and fade out the backdrop\r\n            this.close();\r\n        }\r\n    }\r\n    getDeviceHeight = () => this.props.deviceHeight || this.state.deviceHeight;\r\n    getDeviceWidth = () => this.props.deviceWidth || this.state.deviceWidth;\r\n    buildPanResponder = () => {\r\n        let animEvt: OrNull<AnimationEvent> = null;\r\n\r\n        this.panResponder = PanResponder.create({\r\n            onMoveShouldSetPanResponder: (evt, gestureState) => {\r\n                // Use propagateSwipe to allow inner content to scroll. See PR:\r\n                // https://github.com/react-native-community/react-native-modal/pull/246\r\n                if (!this.props.propagateSwipe) {\r\n                    // The number \"4\" is just a good tradeoff to make the panResponder\r\n                    // work correctly even when the modal has touchable buttons.\r\n                    // For reference:\r\n                    // https://github.com/react-native-community/react-native-modal/pull/197\r\n                    const shouldSetPanResponder =\r\n                        Math.abs(gestureState.dx) >= 4 || Math.abs(gestureState.dy) >= 4;\r\n                    if (shouldSetPanResponder && this.props.onSwipeStart) {\r\n                        this.props.onSwipeStart();\r\n                    }\r\n\r\n                    this.currentSwipingDirection = this.getSwipingDirection(gestureState);\r\n                    animEvt = this.createAnimationEventForSwipe();\r\n                    return shouldSetPanResponder;\r\n                }\r\n\r\n                return false;\r\n            },\r\n            onStartShouldSetPanResponder: (e: any) => {\r\n                const hasScrollableView =\r\n                    e._dispatchInstances &&\r\n                    e._dispatchInstances.some((instance: any) =>\r\n                        /scrollview|flatlist/i.test(instance.type),\r\n                    );\r\n\r\n                if (\r\n                    hasScrollableView &&\r\n                    this.props.propagateSwipe &&\r\n                    this.props.scrollTo &&\r\n                    this.props.scrollOffset > 0\r\n                ) {\r\n                    return false; // user needs to be able to scroll content back up\r\n                }\r\n                if (this.props.onSwipeStart) {\r\n                    this.props.onSwipeStart();\r\n                }\r\n\r\n                // Cleared so that onPanResponderMove can wait to have some delta\r\n                // to work with\r\n                this.currentSwipingDirection = null;\r\n                return true;\r\n            },\r\n            onPanResponderMove: (evt, gestureState) => {\r\n                // Using onStartShouldSetPanResponder we don't have any delta so we don't know\r\n                // The direction to which the user is swiping until some move have been done\r\n                if (!this.currentSwipingDirection) {\r\n                    if (gestureState.dx === 0 && gestureState.dy === 0) {\r\n                        return;\r\n                    }\r\n\r\n                    this.currentSwipingDirection = this.getSwipingDirection(gestureState);\r\n                    animEvt = this.createAnimationEventForSwipe();\r\n                }\r\n\r\n                if (this.isSwipeDirectionAllowed(gestureState)) {\r\n                    // Dim the background while swiping the modal\r\n                    const newOpacityFactor =\r\n                        1 - this.calcDistancePercentage(gestureState);\r\n\r\n                    this.backdropRef &&\r\n                        this.backdropRef.transitionTo({\r\n                            opacity: this.props.backdropOpacity * newOpacityFactor,\r\n                        });\r\n\r\n                    if (typeof animEvt === \"function\") {\r\n                        animEvt(evt, gestureState);\r\n                    }\r\n\r\n                    if (this.props.onSwipeMove) {\r\n                        this.props.onSwipeMove(newOpacityFactor);\r\n                    }\r\n                } else {\r\n                    if (this.props.scrollTo) {\r\n                        if (this.props.scrollHorizontal) {\r\n                            let offsetX = -gestureState.dx;\r\n                            if (offsetX > this.props.scrollOffsetMax) {\r\n                                offsetX -= (offsetX - this.props.scrollOffsetMax) / 2;\r\n                            }\r\n\r\n                            this.props.scrollTo({ x: offsetX, animated: false });\r\n                        } else {\r\n                            let offsetY = -gestureState.dy;\r\n                            if (offsetY > this.props.scrollOffsetMax) {\r\n                                offsetY -= (offsetY - this.props.scrollOffsetMax) / 2;\r\n                            }\r\n\r\n                            this.props.scrollTo({ y: offsetY, animated: false });\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            onPanResponderRelease: (evt, gestureState) => {\r\n                // Call the onSwipe prop if the threshold has been exceeded on the right direction\r\n                const accDistance = this.getAccDistancePerDirection(gestureState);\r\n                if (\r\n                    accDistance > this.props.swipeThreshold &&\r\n                    this.isSwipeDirectionAllowed(gestureState)\r\n                ) {\r\n                    if (this.props.onSwipeComplete) {\r\n                        this.inSwipeClosingState = true;\r\n                        this.props.onSwipeComplete({\r\n                            swipingDirection: this.getSwipingDirection(gestureState),\r\n                        });\r\n                        return;\r\n                    }\r\n                    // Deprecated. Remove later.\r\n                    if ((this.props as any).onSwipe) {\r\n                        this.inSwipeClosingState = true;\r\n                        (this.props as any).onSwipe();\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                //Reset backdrop opacity and modal position\r\n                if (this.props.onSwipeCancel) {\r\n                    this.props.onSwipeCancel();\r\n                }\r\n\r\n                if (this.backdropRef) {\r\n                    this.backdropRef.transitionTo({\r\n                        opacity: this.props.backdropOpacity,\r\n                    });\r\n                }\r\n\r\n                // Animated.spring(this.state.pan!, {\r\n                Animated.spring(this.state.pan, {\r\n                    toValue: { x: 0, y: 0 },\r\n                    bounciness: 0,\r\n                    useNativeDriver: false,\r\n                }).start();\r\n\r\n                if (this.props.scrollTo) {\r\n                    // if (this.props.scrollOffset > this.props.scrollOffsetMax!) {\r\n                    if (this.props.scrollOffset > this.props.scrollOffsetMax) {\r\n                        this.props.scrollTo({\r\n                            y: this.props.scrollOffsetMax,\r\n                            animated: true,\r\n                        });\r\n                    }\r\n                }\r\n            },\r\n        });\r\n    };\r\n\r\n    getAccDistancePerDirection = (gestureState: PanResponderGestureState) => {\r\n        switch (this.currentSwipingDirection) {\r\n        case \"up\":\r\n            return -gestureState.dy;\r\n        case \"down\":\r\n            return gestureState.dy;\r\n        case \"right\":\r\n            return gestureState.dx;\r\n        case \"left\":\r\n            return -gestureState.dx;\r\n        default:\r\n            return 0;\r\n        }\r\n    };\r\n\r\n    getSwipingDirection = (gestureState: PanResponderGestureState) => {\r\n        if (Math.abs(gestureState.dx) > Math.abs(gestureState.dy)) {\r\n            return gestureState.dx > 0 ? \"right\" : \"left\";\r\n        }\r\n\r\n        return gestureState.dy > 0 ? \"down\" : \"up\";\r\n    };\r\n\r\n    calcDistancePercentage = (gestureState: PanResponderGestureState) => {\r\n        switch (this.currentSwipingDirection) {\r\n        case \"down\":\r\n            return (\r\n                (gestureState.moveY - gestureState.y0) /\r\n                    ((this.props.deviceHeight || this.state.deviceHeight) -\r\n                        gestureState.y0)\r\n            );\r\n        case \"up\":\r\n            return reversePercentage(gestureState.moveY / gestureState.y0);\r\n        case \"left\":\r\n            return reversePercentage(gestureState.moveX / gestureState.x0);\r\n        case \"right\":\r\n            return (\r\n                (gestureState.moveX - gestureState.x0) /\r\n                    ((this.props.deviceWidth || this.state.deviceWidth) - gestureState.x0)\r\n            );\r\n\r\n        default:\r\n            return 0;\r\n        }\r\n    };\r\n\r\n    createAnimationEventForSwipe = () => {\r\n        if (\r\n            this.currentSwipingDirection === \"right\" ||\r\n            this.currentSwipingDirection === \"left\"\r\n        ) {\r\n            return Animated.event([null, { dx: this.state.pan?.x }], {\r\n                useNativeDriver: false,\r\n            });\r\n        } else {\r\n            return Animated.event([null, { dy: this.state.pan?.y }], {\r\n                useNativeDriver: false,\r\n            });\r\n        }\r\n    };\r\n\r\n    isDirectionIncluded = (direction: Direction) => {\r\n        return Array.isArray(this.props.swipeDirection)\r\n            ? this.props.swipeDirection.includes(direction)\r\n            : this.props.swipeDirection === direction;\r\n    };\r\n\r\n    isSwipeDirectionAllowed = ({ dy, dx }: PanResponderGestureState) => {\r\n        const draggedDown = dy > 0;\r\n        const draggedUp = dy < 0;\r\n        const draggedLeft = dx < 0;\r\n        const draggedRight = dx > 0;\r\n\r\n        if (\r\n            this.currentSwipingDirection === \"up\" &&\r\n            this.isDirectionIncluded(\"up\") &&\r\n            draggedUp\r\n        ) {\r\n            return true;\r\n        } else if (\r\n            this.currentSwipingDirection === \"down\" &&\r\n            this.isDirectionIncluded(\"down\") &&\r\n            draggedDown\r\n        ) {\r\n            return true;\r\n        } else if (\r\n            this.currentSwipingDirection === \"right\" &&\r\n            this.isDirectionIncluded(\"right\") &&\r\n            draggedRight\r\n        ) {\r\n            return true;\r\n        } else if (\r\n            this.currentSwipingDirection === \"left\" &&\r\n            this.isDirectionIncluded(\"left\") &&\r\n            draggedLeft\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    handleDimensionsUpdate = () => {\r\n        if (!this.props.deviceHeight && !this.props.deviceWidth) {\r\n            // Here we update the device dimensions in the state if the layout changed\r\n            // (triggering a render)\r\n            const deviceWidth = Dimensions.get(\"screen\").width;\r\n            const deviceHeight = Dimensions.get(\"screen\").height;\r\n            if (\r\n                deviceWidth !== this.state.deviceWidth ||\r\n                deviceHeight !== this.state.deviceHeight\r\n            ) {\r\n                this.setState({ deviceWidth, deviceHeight });\r\n            }\r\n        }\r\n    };\r\n\r\n    open = () => {\r\n        if (this.isTransitioning) {\r\n            return;\r\n        }\r\n        this.isTransitioning = true;\r\n        if (this.backdropRef) {\r\n            this.backdropRef.transitionTo(\r\n                { opacity: this.props.backdropOpacity },\r\n                this.props.backdropTransitionInTiming,\r\n            );\r\n        }\r\n\r\n        // This is for resetting the pan position,otherwise the modal gets stuck\r\n        // at the last released position when you try to open it.\r\n        // TODO: Could certainly be improved - no idea for the moment.\r\n        if (this.state.isSwipeable) {\r\n            this.state.pan?.setValue({ x: 0, y: 0 });\r\n        }\r\n\r\n        if (this.contentRef) {\r\n            this.props.onModalWillShow && this.props.onModalWillShow();\r\n            const interactionHandle = InteractionManager.createInteractionHandle();\r\n            this.contentRef\r\n                .animate(this.animationIn, this.props.animationInTiming)\r\n                .then(() => {\r\n                    this.isTransitioning = false;\r\n                    InteractionManager.clearInteractionHandle(interactionHandle);\r\n                    if (!this.props.isVisible) {\r\n                        this.close();\r\n                    } else {\r\n                        this.props.onModalShow();\r\n                    }\r\n                });\r\n        }\r\n    };\r\n\r\n    close = () => {\r\n        if (this.isTransitioning) {\r\n            return;\r\n        }\r\n        this.isTransitioning = true;\r\n        if (this.backdropRef) {\r\n            this.backdropRef.transitionTo(\r\n                { opacity: 0 },\r\n                this.props.backdropTransitionOutTiming,\r\n            );\r\n        }\r\n\r\n        let animationOut = this.animationOut;\r\n\r\n        if (this.inSwipeClosingState) {\r\n            this.inSwipeClosingState = false;\r\n            if (this.currentSwipingDirection === \"up\") {\r\n                animationOut = \"slideOutUp\";\r\n            } else if (this.currentSwipingDirection === \"down\") {\r\n                animationOut = \"slideOutDown\";\r\n            } else if (this.currentSwipingDirection === \"right\") {\r\n                animationOut = \"slideOutRight\";\r\n            } else if (this.currentSwipingDirection === \"left\") {\r\n                animationOut = \"slideOutLeft\";\r\n            }\r\n        }\r\n\r\n        if (this.contentRef) {\r\n            this.props.onModalWillHide && this.props.onModalWillHide();\r\n            const interactionHandle = InteractionManager.createInteractionHandle();\r\n            this.contentRef\r\n                .animate(animationOut, this.props.animationOutTiming)\r\n                .then(() => {\r\n                    this.isTransitioning = false;\r\n                    InteractionManager.clearInteractionHandle(interactionHandle);\r\n                    if (this.props.isVisible) {\r\n                        this.open();\r\n                    } else {\r\n                        this.setState(\r\n                            {\r\n                                showContent: false,\r\n                            },\r\n                            () => {\r\n                                this.setState(\r\n                                    {\r\n                                        isVisible: false,\r\n                                    },\r\n                                    () => {\r\n                                        this.props.onModalHide();\r\n                                    },\r\n                                );\r\n                            },\r\n                        );\r\n                    }\r\n                });\r\n        }\r\n    };\r\n    makeBackdrop = () => {\r\n        if (!this.props.hasBackdrop) {\r\n            return null;\r\n        }\r\n        if (\r\n            this.props.customBackdrop &&\r\n            !React.isValidElement(this.props.customBackdrop)\r\n        ) {\r\n            console.warn(\r\n                \"Invalid customBackdrop element passed to Modal. You must provide a valid React element.\",\r\n            );\r\n        }\r\n        const {\r\n            customBackdrop,\r\n            backdropColor,\r\n            useNativeDriver,\r\n            useNativeDriverForBackdrop,\r\n            onBackdropPress,\r\n        } = this.props;\r\n        const hasCustomBackdrop = !!this.props.customBackdrop;\r\n\r\n        const backdropComputedStyle = [\r\n            {\r\n                width: this.getDeviceWidth(),\r\n                height: this.getDeviceHeight(),\r\n                backgroundColor:\r\n                    this.state.showContent && !hasCustomBackdrop\r\n                        ? backdropColor\r\n                        : \"transparent\",\r\n            },\r\n        ];\r\n\r\n        const backdropWrapper = (\r\n            <animatable.View\r\n                ref={ref => (this.backdropRef = ref)}\r\n                useNativeDriver={\r\n                    useNativeDriverForBackdrop !== undefined\r\n                        ? useNativeDriverForBackdrop\r\n                        : useNativeDriver\r\n                }\r\n                style={[styles.backdrop, backdropComputedStyle]}>\r\n                {hasCustomBackdrop && customBackdrop}\r\n            </animatable.View>\r\n        );\r\n\r\n        if (hasCustomBackdrop) {\r\n            // The user will handle backdrop presses himself\r\n            return backdropWrapper;\r\n        }\r\n        // If there's no custom backdrop, handle presses with\r\n        // TouchableWithoutFeedback\r\n        return (\r\n            <TouchableWithoutFeedback onPress={onBackdropPress}>\r\n                {backdropWrapper}\r\n            </TouchableWithoutFeedback>\r\n        );\r\n    };\r\n    render() {\r\n        /* eslint-disable @typescript-eslint/no-unused-vars */\r\n        const {\r\n            animationIn,\r\n            animationInTiming,\r\n            animationOut,\r\n            animationOutTiming,\r\n            avoidKeyboard,\r\n            coverScreen,\r\n            hasBackdrop,\r\n            backdropColor,\r\n            backdropOpacity,\r\n            backdropTransitionInTiming,\r\n            backdropTransitionOutTiming,\r\n            customBackdrop,\r\n            children,\r\n            isVisible,\r\n            onModalShow,\r\n            onBackButtonPress,\r\n            useNativeDriver,\r\n            propagateSwipe,\r\n            style,\r\n            ...otherProps\r\n        } = this.props;\r\n\r\n        const { testID, ...containerProps } = otherProps;\r\n        const computedStyle = [\r\n            { margin: this.getDeviceWidth() * 0.05, transform: [{ translateY: 0 }] },\r\n            styles.content,\r\n            style,\r\n        ];\r\n\r\n        let panHandlers = {};\r\n        let panPosition = {};\r\n        if (this.state.isSwipeable) {\r\n            panHandlers = { ...this.panResponder?.panHandlers };\r\n\r\n            if (useNativeDriver) {\r\n                panPosition = {\r\n                    transform: this.state.pan?.getTranslateTransform(),\r\n                };\r\n            } else {\r\n                panPosition = this.state.pan?.getLayout();\r\n            }\r\n        }\r\n\r\n        // The user might decide not to show the modal while it is animating\r\n        // to enhance performance.\r\n        const _children =\r\n            this.props.hideModalContentWhileAnimating &&\r\n                this.props.useNativeDriver &&\r\n                !this.state.showContent ? (\r\n                    <animatable.View />\r\n                ) : (\r\n                    children\r\n                );\r\n        const containerView = (\r\n            <animatable.View\r\n                {...panHandlers}\r\n                ref={ref => (this.contentRef = ref)}\r\n                style={[panPosition, computedStyle]}\r\n                pointerEvents=\"box-none\"\r\n                useNativeDriver={useNativeDriver}\r\n                {...containerProps}>\r\n                {_children}\r\n            </animatable.View>\r\n        );\r\n\r\n        // If coverScreen is set to false by the user\r\n        // we render the modal inside the parent view directly\r\n        if (!coverScreen && this.state.isVisible) {\r\n            return (\r\n                <View\r\n                    pointerEvents=\"box-none\"\r\n                    style={[styles.backdrop, styles.containerBox]}>\r\n                    {this.makeBackdrop()}\r\n                    {containerView}\r\n                </View>\r\n            );\r\n        }\r\n        return (\r\n            <Modal\r\n                transparent={true}\r\n                animationType={\"none\"}\r\n                visible={this.state.isVisible}\r\n                onRequestClose={onBackButtonPress}\r\n                {...otherProps}>\r\n                {this.makeBackdrop()}\r\n\r\n                {avoidKeyboard ? (\r\n                    <KeyboardAvoidingView\r\n                        behavior={Platform.OS === \"ios\" ? \"padding\" : undefined}\r\n                        pointerEvents=\"box-none\"\r\n                        style={computedStyle.concat([{ margin: 0 }])}>\r\n                        {containerView}\r\n                    </KeyboardAvoidingView>\r\n                ) : (\r\n                    containerView\r\n                )}\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReactNativeModal;\r\n"]}