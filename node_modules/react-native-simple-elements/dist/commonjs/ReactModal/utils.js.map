{"version":3,"sources":["utils.ts"],"names":["makeSlideTranslation","translationType","fromValue","toValue","from","to","buildAnimations","animationIn","animationOut","updatedAnimationIn","updatedAnimationOut","isObject","animationName","JSON","stringify","makeAnimation","reversePercentage","x","name","obj","animatable","registerAnimation","createAnimation"],"mappings":";;;;;;;AACA;;;;;;AADA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEO,MAAMA,oBAAoB,GAAG,CAChCC,eADgC,EAEhCC,SAFgC,EAGhCC,OAHgC,MAI9B;AACFC,EAAAA,IAAI,EAAE;AACF,KAACH,eAAD,GAAmBC;AADjB,GADJ;AAIFG,EAAAA,EAAE,EAAE;AACA,KAACJ,eAAD,GAAmBE;AADnB;AAJF,CAJ8B,CAA7B,C,CAaP;AACA;;;;;AACO,MAAMG,eAAe,GAAG,CAAC;AAC5BC,EAAAA,WAD4B;AAE5BC,EAAAA;AAF4B,CAAD,KAMb;AACd,MAAIC,kBAAJ;AACA,MAAIC,mBAAJ;;AAEA,MAAIC,QAAQ,CAACJ,WAAD,CAAZ,EAA2B;AACvB,UAAMK,aAAa,GAAGC,IAAI,CAACC,SAAL,CAAeP,WAAf,CAAtB;AACAQ,IAAAA,aAAa,CAACH,aAAD,EAAgBL,WAAhB,CAAb;AACAE,IAAAA,kBAAkB,GAAGG,aAArB;AACH,GAJD,MAIO;AACHH,IAAAA,kBAAkB,GAAGF,WAArB;AACH;;AAED,MAAII,QAAQ,CAACH,YAAD,CAAZ,EAA4B;AACxB,UAAMI,aAAa,GAAGC,IAAI,CAACC,SAAL,CAAeN,YAAf,CAAtB;AACAO,IAAAA,aAAa,CAACH,aAAD,EAAgBJ,YAAhB,CAAb;AACAE,IAAAA,mBAAmB,GAAGE,aAAtB;AACH,GAJD,MAIO;AACHF,IAAAA,mBAAmB,GAAGF,YAAtB;AACH;;AAED,SAAO;AACHD,IAAAA,WAAW,EAAEE,kBADV;AAEHD,IAAAA,YAAY,EAAEE;AAFX,GAAP;AAIH,CA9BM;;;;AAgCA,MAAMM,iBAAiB,GAAIC,CAAD,IAAe,EAAEA,CAAC,GAAG,CAAN,CAAzC;;;;AAEP,MAAMF,aAAa,GAAG,CAACG,IAAD,EAAeC,GAAf,KAA8C;AAChEC,EAAAA,UAAU,CAACC,iBAAX,CACIH,IADJ,EAEIE,UAAU,CAACE,eAAX,CAA2BH,GAA3B,CAFJ;AAIH,CALD;;AAOA,MAAMR,QAAQ,GAAIQ,GAAD,IAA0C;AACvD,SAAOA,GAAG,KAAK,IAAR,IAAgB,OAAOA,GAAP,KAAe,QAAtC;AACH,CAFD","sourcesContent":["// import { Dimensions } from \"react-native\";\r\nimport * as animatable from \"react-native-animatable\";\r\nimport { CustomAnimation, Animation } from \"react-native-animatable\";\r\nimport { Animations } from \"./types\";\r\n\r\n// const { height, width } = Dimensions.get(\"window\");\r\n\r\n// export const initializeAnimations = () => {\r\n//     // Since react-native-animatable applies by default a margin of 100 to its\r\n//     // sliding animation, we reset them here overriding the margin to 0.\r\n//     const animationDefinitions: Record<string, CustomAnimation> = {\r\n//         slideInDown: makeSlideTranslation(\"translateY\", -height, 0),\r\n//         slideInUp: makeSlideTranslation(\"translateY\", height, 0),\r\n//         slideInLeft: makeSlideTranslation(\"translateX\", -width, 0),\r\n//         slideInRight: makeSlideTranslation(\"translateX\", width, 0),\r\n//         slideOutDown: makeSlideTranslation(\"translateY\", 0, height),\r\n//         slideOutUp: makeSlideTranslation(\"translateY\", 0, -height),\r\n//         slideOutLeft: makeSlideTranslation(\"translateX\", 0, -width),\r\n//         slideOutRight: makeSlideTranslation(\"translateX\", 0, width),\r\n//     };\r\n\r\n//     animatable.initializeRegistryWithDefinitions(animationDefinitions);\r\n// };\r\n\r\nexport const makeSlideTranslation = (\r\n    translationType: string,\r\n    fromValue: number,\r\n    toValue: number,\r\n) => ({\r\n    from: {\r\n        [translationType]: fromValue,\r\n    },\r\n    to: {\r\n        [translationType]: toValue,\r\n    },\r\n});\r\n\r\n// User can define custom react-native-animatable animations, see PR #72\r\n// Utility for creating our own custom react-native-animatable animations\r\nexport const buildAnimations = ({\r\n    animationIn,\r\n    animationOut,\r\n}: {\r\n    animationIn: Animation | CustomAnimation;\r\n    animationOut: Animation | CustomAnimation;\r\n}): Animations => {\r\n    let updatedAnimationIn: string;\r\n    let updatedAnimationOut: string;\r\n\r\n    if (isObject(animationIn)) {\r\n        const animationName = JSON.stringify(animationIn);\r\n        makeAnimation(animationName, animationIn as CustomAnimation);\r\n        updatedAnimationIn = animationName;\r\n    } else {\r\n        updatedAnimationIn = animationIn;\r\n    }\r\n\r\n    if (isObject(animationOut)) {\r\n        const animationName = JSON.stringify(animationOut);\r\n        makeAnimation(animationName, animationOut as CustomAnimation);\r\n        updatedAnimationOut = animationName;\r\n    } else {\r\n        updatedAnimationOut = animationOut;\r\n    }\r\n\r\n    return {\r\n        animationIn: updatedAnimationIn,\r\n        animationOut: updatedAnimationOut,\r\n    };\r\n};\r\n\r\nexport const reversePercentage = (x: number) => -(x - 1);\r\n\r\nconst makeAnimation = (name: string, obj: CustomAnimation): void => {\r\n    animatable.registerAnimation(\r\n        name,\r\n        animatable.createAnimation(obj) as CustomAnimation,\r\n    );\r\n};\r\n\r\nconst isObject = (obj: any): obj is Record<string, any> => {\r\n    return obj !== null && typeof obj === \"object\";\r\n};\r\n"]}