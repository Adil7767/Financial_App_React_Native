{"version":3,"sources":["Dialog.tsx"],"names":["DIALOG_ELEVATION","Dialog","children","dismissable","onDismiss","visible","style","theme","React","useContext","ThemeContext","borderRadius","roundness","backgroundColor","dark","mode","colors","surface","styles","container","Children","toArray","filter","child","map","i","isValidElement","type","DialogContent","cloneElement","paddingTop","props","Content","Actions","DialogActions","Title","DialogTitle","ScrollArea","DialogScrollArea","StyleSheet","create","marginVertical","Platform","OS","marginHorizontal","elevation","justifyContent"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;AAJA;AA8BA,MAAMA,gBAAgB,GAAG,EAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,MAAM,GAAG,CAAC;AACZC,EAAAA,QADY;AAEZC,EAAAA,WAAW,GAAG,IAFF;AAGZC,EAAAA,SAHY;AAIZC,EAAAA,OAAO,GAAG,KAJE;AAKZC,EAAAA;AALY,CAAD,KAMF;AACT,QAAMC,KAAK,GAAGC,KAAK,CAACC,UAAN,CAAiBC,8BAAjB,CAAd;AAEA,sBACI,oBAAC,cAAD;AACI,IAAA,WAAW,EAAEP,WADjB;AAEI,IAAA,OAAO,EAAEE,OAFb;AAGI,IAAA,SAAS,EAAED,SAHf;AAII,IAAA,qBAAqB,EAAE,CACnB;AACIO,MAAAA,YAAY,EAAEJ,KAAK,CAACK,SADxB;AAEIC,MAAAA,eAAe,EACXN,KAAK,CAACO,IAAN,IAAcP,KAAK,CAACQ,IAAN,KAAe,UAA7B,GACO,sBAAQf,gBAAR,EAA0BO,KAAK,CAACS,MAAN,CAAaC,OAAvC,CADP,GAEMV,KAAK,CAACS,MAAN,CAAaC;AAL3B,KADmB,EAQnBC,MAAM,CAACC,SARY,EASnBb,KATmB;AAJ3B,KAgBKE,KAAK,CAACY,QAAN,CAAeC,OAAf,CAAuBnB,QAAvB,EACIoB,MADJ,CACYC,KAAD,IAAWA,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,SADxD,EAEIC,GAFJ,CAEQ,CAACD,KAAD,EAAQE,CAAR,KAAc;AACf,QACIA,CAAC,KAAK,CAAN,iBACAjB,KAAK,CAACkB,cAAN,CAAqBH,KAArB,CADA,IAEAA,KAAK,CAACI,IAAN,KAAeC,sBAHnB,EAIE;AACE;AACA,0BAAOpB,KAAK,CAACqB,YAAN,CAAmBN,KAAnB,EAA0B;AAC7BjB,QAAAA,KAAK,EAAE,CAAC;AAAEwB,UAAAA,UAAU,EAAE;AAAd,SAAD,EAAqBP,KAAK,CAACQ,KAAN,CAAYzB,KAAjC;AADsB,OAA1B,CAAP;AAGH;;AAED,WAAOiB,KAAP;AACH,GAfJ,CAhBL,CADJ;AAmCH,CA5CD,C,CA8CA;;;AACAtB,MAAM,CAAC+B,OAAP,GAAiBJ,sBAAjB,C,CACA;;AACA3B,MAAM,CAACgC,OAAP,GAAiBC,sBAAjB,C,CACA;;AACAjC,MAAM,CAACkC,KAAP,GAAeC,qBAAf,C,CACA;;AACAnC,MAAM,CAACoC,UAAP,GAAoBC,yBAApB;;AAEA,MAAMpB,MAAM,GAAGqB,wBAAWC,MAAX,CAAkB;AAC7BrB,EAAAA,SAAS,EAAE;AACP;AACR;AACA;AACA;AACA;AACA;AACA;AACQsB,IAAAA,cAAc,EAAEC,sBAASC,EAAT,KAAgB,SAAhB,GAA4B,EAA5B,GAAiC,CAR1C;AASPC,IAAAA,gBAAgB,EAAE,EATX;AAUPC,IAAAA,SAAS,EAAE7C,gBAVJ;AAWP8C,IAAAA,cAAc,EAAE;AAXT;AADkB,CAAlB,CAAf;;eAgBe7C,M","sourcesContent":["\r\nimport * as React from \"react\";\r\nimport { Platform, StyleProp, StyleSheet, ViewStyle } from \"react-native\";\r\nimport { Modalbk as Modal } from \"../Modal\";\r\nimport DialogContent from \"./DialogContent\";\r\nimport DialogActions from \"./DialogActions\";\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nimport DialogTitle, { DialogTitle as _DialogTitle } from \"./DialogTitle\";\r\nimport DialogScrollArea from \"./DialogScrollArea\";\r\nimport overlay from \"../theme/overlay\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\n\r\ntype Props = {\r\n    /**\r\n     * Determines whether clicking outside the dialog dismiss it.\r\n     */\r\n    dismissable?: boolean;\r\n    /**\r\n     * Callback that is called when the user dismisses the dialog.\r\n     */\r\n    onDismiss?: () => void;\r\n    /**\r\n     * Determines Whether the dialog is visible.\r\n     */\r\n    visible: boolean;\r\n    /**\r\n     * Content of the `Dialog`.\r\n     */\r\n    children: React.ReactNode;\r\n    style?: StyleProp<ViewStyle>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n};\r\n\r\nconst DIALOG_ELEVATION = 24;\r\n\r\n/**\r\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\r\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\r\n *\r\n *  <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\r\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { View } from 'react-native';\r\n * import Button from 'react-native-simple-elements/components/Button';\r\n * import { Paragraph } from \"react-native-simple-elements/components/Text\";\r\n * import Portal from \"react-native-simple-elements/components/Portal\";\r\n * import Dialog from \"react-native-simple-elements/components/Dialog\";\r\n *\r\n * const MyComponent = () => {\r\n *   const [visible, setVisible] = React.useState(false);\r\n *\r\n *   const showDialog = () => setVisible(true);\r\n *\r\n *   const hideDialog = () => setVisible(false);\r\n *\r\n *   return (\r\n *     <View>\r\n *       <Button onPress={showDialog}>Show Dialog</Button>\r\n *       <Portal>\r\n *         <Dialog visible={visible} onDismiss={hideDialog}>\r\n *           <Dialog.Title>Alert</Dialog.Title>\r\n *           <Dialog.Content>\r\n *             <Paragraph>This is simple dialog</Paragraph>\r\n *           </Dialog.Content>\r\n *           <Dialog.Actions>\r\n *             <Button onPress={hideDialog}>Done</Button>\r\n *           </Dialog.Actions>\r\n *         </Dialog>\r\n *       </Portal>\r\n *     </View>\r\n *   );\r\n * };\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst Dialog = ({\r\n    children,\r\n    dismissable = true,\r\n    onDismiss,\r\n    visible = false,\r\n    style,\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n\r\n    return (\r\n        <Modal\r\n            dismissable={dismissable}\r\n            visible={visible}\r\n            onDismiss={onDismiss}\r\n            contentContainerStyle={[\r\n                {\r\n                    borderRadius: theme.roundness,\r\n                    backgroundColor:\r\n                        theme.dark && theme.mode === \"adaptive\"\r\n                            ? (overlay(DIALOG_ELEVATION, theme.colors.surface) as string)\r\n                            : theme.colors.surface,\r\n                },\r\n                styles.container,\r\n                style,\r\n            ]}\r\n        >\r\n            {React.Children.toArray(children)\r\n                .filter((child) => child != null && typeof child !== \"boolean\")\r\n                .map((child, i) => {\r\n                    if (\r\n                        i === 0 &&\r\n                        React.isValidElement(child) &&\r\n                        child.type === DialogContent\r\n                    ) {\r\n                        // Dialog content is the first item, so we add a top padding\r\n                        return React.cloneElement(child, {\r\n                            style: [{ paddingTop: 24 }, child.props.style],\r\n                        });\r\n                    }\r\n\r\n                    return child;\r\n                })}\r\n        </Modal>\r\n    );\r\n};\r\n\r\n// @component ./DialogContent.tsx\r\nDialog.Content = DialogContent;\r\n// @component ./DialogActions.tsx\r\nDialog.Actions = DialogActions;\r\n// @component ./DialogTitle.tsx\r\nDialog.Title = DialogTitle;\r\n// @component ./DialogScrollArea.tsx\r\nDialog.ScrollArea = DialogScrollArea;\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        /**\r\n         * This prevents the shadow from being clipped on Android since Android\r\n         * doesn't support `overflow: visible`.\r\n         * One downside for this fix is that it will disable clicks on the area\r\n         * of the shadow around the dialog, consequently, if you click around the\r\n         * dialog (44 pixel from the top and bottom) it won't be dismissed.\r\n         */\r\n        marginVertical: Platform.OS === \"android\" ? 44 : 0,\r\n        marginHorizontal: 26,\r\n        elevation: DIALOG_ELEVATION,\r\n        justifyContent: \"flex-start\",\r\n    },\r\n});\r\n\r\nexport default Dialog;\r\n"]}