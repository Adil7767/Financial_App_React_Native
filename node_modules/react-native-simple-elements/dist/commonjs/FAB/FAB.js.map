{"version":3,"sources":["FAB.tsx"],"names":["FAB","small","icon","label","accessibilityLabel","accessibilityState","animated","color","customColor","disabled","onPress","onLongPress","style","visible","uppercase","loading","testID","rest","theme","React","useContext","ThemeContext","current","visibility","useRef","Animated","Value","scale","animation","useEffect","timing","toValue","duration","useNativeDriver","start","IconComponent","CrossFadeIcon","SvgIcon","disabledColor","dark","white","black","alpha","rgb","string","backgroundColor","colors","accent","StyleSheet","flatten","foregroundColor","isLight","rippleColor","opacity","transform","styles","container","touchable","content","extended","standard","uppercaseLabel","fonts","medium","create","borderRadius","elevation","height","width","paddingHorizontal","flexDirection","alignItems","justifyContent","marginHorizontal","textTransform","FABWithTheme"],"mappings":"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","sourcesContent":["import color from \"color\";\r\nimport * as React from \"react\";\r\nimport { Animated, View, ViewStyle, StyleSheet, StyleProp } from \"react-native\";\r\nimport ActivityIndicator from \"../ActivityIndicator\";\r\nimport Surface from \"../Surface\";\r\nimport { SvgIcon, CrossFadeIcon } from \"../Icon\";\r\nimport Text from \"../Text\";\r\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\r\nimport { black, white } from \"../theme/colors\";\r\nimport type { $RemoveChildren } from \"../types\";\r\nimport type { AccessibilityState } from \"react-native\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\n\r\ntype Props = $RemoveChildren<typeof Surface> & {\r\n    /**\r\n     * Icon to display for the `FAB`.\r\n     */\r\n    icon: React.ReactElement;\r\n    /**\r\n     * Optional label for extended `FAB`.\r\n     */\r\n    label?: string;\r\n    /**\r\n     * Make the label text uppercased.\r\n     */\r\n    uppercase?: boolean;\r\n    /**\r\n     * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\r\n     * Uses `label` by default if specified.\r\n     */\r\n    accessibilityLabel?: string;\r\n    /**\r\n     * Accessibility state for the FAB. This is read by the screen reader when the user taps the FAB.\r\n     */\r\n    accessibilityState?: AccessibilityState;\r\n    /**\r\n     * Whether an icon change is animated.\r\n     */\r\n    animated?: boolean;\r\n    /**\r\n     *  Whether FAB is mini-sized, used to create visual continuity with other elements. This has no effect if `label` is specified.\r\n     */\r\n    small?: boolean;\r\n    /**\r\n     * Custom color for the icon and label of the `FAB`.\r\n     */\r\n    color?: string;\r\n    /**\r\n     * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * Whether `FAB` is currently visible.\r\n     */\r\n    visible?: boolean;\r\n    /**\r\n     * Whether to show a loading indicator.\r\n     */\r\n    loading?: boolean;\r\n    /**\r\n     * Function to execute on press.\r\n     */\r\n    onPress?: () => void;\r\n    /**\r\n     * Function to execute on long press.\r\n     */\r\n    onLongPress?: () => void;\r\n    style?: StyleProp<ViewStyle>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n\r\n    testID?: string;\r\n};\r\n\r\n/**\r\n * A floating action button represents the primary action in an application.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img src=\"screenshots/fab-1.png\" />\r\n *   <img src=\"screenshots/fab-2.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { StyleSheet } from 'react-native';\r\n * import FAB from 'react-native-simple-elements/components/FAB';\r\n *\r\n * const MyComponent = () => (\r\n *   <FAB\r\n *     style={styles.fab}\r\n *     small\r\n *     icon=\"plus\"\r\n *     onPress={() => console.log('Pressed')}\r\n *   />\r\n * );\r\n *\r\n * const styles = StyleSheet.create({\r\n *   fab: {\r\n *     position: 'absolute',\r\n *     margin: 16,\r\n *     right: 0,\r\n *     bottom: 0,\r\n *   },\r\n * })\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst FAB = ({\r\n    small,\r\n    icon,\r\n    label,\r\n    accessibilityLabel = label,\r\n    accessibilityState,\r\n    animated = true,\r\n    color: customColor,\r\n    disabled,\r\n    onPress,\r\n    onLongPress,\r\n    style,\r\n    visible = true,\r\n    uppercase = true,\r\n    loading,\r\n    testID,\r\n    ...rest\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n    const { current: visibility } = React.useRef<Animated.Value>(\r\n        new Animated.Value(visible ? 1 : 0)\r\n    );\r\n    const { scale } = theme.animation;\r\n\r\n    React.useEffect(() => {\r\n        if (visible) {\r\n            Animated.timing(visibility, {\r\n                toValue: 1,\r\n                duration: 200 * scale,\r\n                useNativeDriver: true,\r\n            }).start();\r\n        } else {\r\n            Animated.timing(visibility, {\r\n                toValue: 0,\r\n                duration: 150 * scale,\r\n                useNativeDriver: true,\r\n            }).start();\r\n        }\r\n    }, [visible, scale, visibility]);\r\n\r\n    const IconComponent = animated ? CrossFadeIcon : SvgIcon;\r\n\r\n    const disabledColor = color(theme.dark ? white : black)\r\n        .alpha(0.12)\r\n        .rgb()\r\n        .string();\r\n\r\n    const { backgroundColor = disabled ? disabledColor : theme.colors.accent } =\r\n        StyleSheet.flatten(style) || {};\r\n\r\n    let foregroundColor;\r\n\r\n    if (typeof customColor !== \"undefined\") {\r\n        foregroundColor = customColor;\r\n    } else if (disabled) {\r\n        foregroundColor = color(theme.dark ? white : black)\r\n            .alpha(0.32)\r\n            .rgb()\r\n            .string();\r\n    } else {\r\n        foregroundColor = !color(backgroundColor as any).isLight()\r\n            ? white\r\n            : \"rgba(0, 0, 0, .54)\";\r\n    }\r\n\r\n    const rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\r\n\r\n    return (\r\n        <Surface\r\n            {...rest}\r\n            style={\r\n                [\r\n                    {\r\n                        backgroundColor,\r\n                        opacity: visibility,\r\n                        transform: [\r\n                            {\r\n                                scale: visibility,\r\n                            },\r\n                        ],\r\n                    },\r\n                    styles.container,\r\n                    disabled && styles.disabled,\r\n                    style,\r\n                ] as StyleProp<ViewStyle>\r\n            }\r\n            pointerEvents={visible ? \"auto\" : \"none\"}\r\n        >\r\n            <TouchableRipple\r\n                borderless\r\n                onPress={onPress}\r\n                onLongPress={onLongPress}\r\n                rippleColor={rippleColor}\r\n                disabled={disabled}\r\n                accessibilityLabel={accessibilityLabel}\r\n                // accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\r\n                // accessibilityComponentType=\"button\"\r\n                accessibilityRole=\"button\"\r\n                accessibilityState={{ ...accessibilityState, disabled }}\r\n                style={styles.touchable}\r\n                testID={testID}\r\n            >\r\n                <View\r\n                    style={[\r\n                        styles.content,\r\n                        label ? styles.extended : small ? styles.small : styles.standard,\r\n                    ]}\r\n                    pointerEvents=\"none\"\r\n                >\r\n                    {icon && loading !== true ? (\r\n                        <IconComponent icon={icon} size={24} color={foregroundColor} />\r\n                    ) : null}\r\n                    {loading ? (\r\n                        <ActivityIndicator size={18} color={foregroundColor} />\r\n                    ) : null}\r\n                    {label ? (\r\n                        <Text\r\n                            selectable={false}\r\n                            style={[\r\n                                styles.label,\r\n                                uppercase && styles.uppercaseLabel,\r\n                                { color: foregroundColor, ...theme.fonts.medium },\r\n                            ]}\r\n                        >\r\n                            {label}\r\n                        </Text>\r\n                    ) : null}\r\n                </View>\r\n            </TouchableRipple>\r\n        </Surface>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        borderRadius: 28,\r\n        elevation: 6,\r\n    },\r\n    touchable: {\r\n        borderRadius: 28,\r\n    },\r\n    standard: {\r\n        height: 56,\r\n        width: 56,\r\n    },\r\n    small: {\r\n        height: 40,\r\n        width: 40,\r\n    },\r\n    extended: {\r\n        height: 48,\r\n        paddingHorizontal: 16,\r\n    },\r\n    content: {\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    label: {\r\n        marginHorizontal: 8,\r\n    },\r\n    uppercaseLabel: {\r\n        textTransform: \"uppercase\",\r\n    },\r\n    disabled: {\r\n        elevation: 0,\r\n    },\r\n});\r\n\r\nexport default FAB;\r\n\r\n// @component-docs ignore-next-line\r\nconst FABWithTheme = FAB;\r\n// @component-docs ignore-next-line\r\nexport { FABWithTheme as FAB };\r\n"]}