{"version":3,"sources":["FABGroup.tsx"],"names":["FABGroup","actions","icon","open","onPress","accessibilityLabel","theme","style","fabStyle","visible","testID","onStateChange","color","colorProp","current","backdrop","React","useRef","Animated","Value","animations","map","prevActions","setPrevActions","useState","scale","animation","useEffect","parallel","timing","toValue","duration","useNativeDriver","stagger","reverse","start","close","toggle","colors","labelColor","dark","text","fade","rgb","string","backdropOpacity","interpolate","inputRange","outputRange","opacities","scales","opacity","length","_","i","styles","container","backgroundColor","safeArea","it","item","marginHorizontal","small","label","transform","surface","expanded","fab","displayName","FABGroupWithTheme","StyleSheet","create","alignItems","absoluteFillObject","justifyContent","marginBottom","marginTop","borderRadius","paddingHorizontal","paddingVertical","marginVertical","elevation","flexDirection"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    StyleProp,\r\n    StyleSheet,\r\n    Animated,\r\n    SafeAreaView,\r\n    TouchableWithoutFeedback,\r\n    View,\r\n    ViewStyle,\r\n} from \"react-native\";\r\nimport color from \"color\";\r\nimport FAB from \"./FAB\";\r\nimport Text from \"../Text\";\r\nimport Card from \"../Card/Card\";\r\nimport { DefaultTheme } from \"styled-components\";\r\n\r\ntype Props = {\r\n    /**\r\n     * Action items to display in the form of a speed dial.\r\n     * An action item should contain the following properties:\r\n     * - `icon`: icon to display (required)\r\n     * - `label`: optional label text\r\n     * - `accessibilityLabel`: accessibility label for the action, uses label by default if specified\r\n     * - `color`: custom icon color of the action item\r\n     * - `style`: pass additional styles for the fab item, for example, `backgroundColor`\r\n     * - `small`: boolean describing whether small or normal sized FAB is rendered. Defaults to `true`\r\n     * - `onPress`: callback that is called when `FAB` is pressed (required)\r\n     */\r\n    actions: Array<{\r\n        icon: React.ReactElement;\r\n        label?: string;\r\n        color?: string;\r\n        accessibilityLabel?: string;\r\n        style?: StyleProp<ViewStyle>;\r\n        small?: boolean;\r\n        onPress: () => void;\r\n        testID?: string;\r\n    }>;\r\n    /**\r\n     * Icon to display for the `FAB`.\r\n     * You can toggle it based on whether the speed dial is open to display a different icon.\r\n     */\r\n    icon: React.ReactElement;\r\n    /**\r\n     * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\r\n     */\r\n    accessibilityLabel?: string;\r\n    /**\r\n     * Custom color for the `FAB`.\r\n     */\r\n    color?: string;\r\n    /**\r\n     * Function to execute on pressing the `FAB`.\r\n     */\r\n    onPress?: () => void;\r\n    /**\r\n     * Whether the speed dial is open.\r\n     */\r\n    open: boolean;\r\n    /**\r\n     * Callback which is called on opening and closing the speed dial.\r\n     * The open state needs to be updated when it's called, otherwise the change is dropped.\r\n     */\r\n    onStateChange: (state: { open: boolean }) => void;\r\n    /**\r\n     * Whether `FAB` is currently visible.\r\n     */\r\n    visible: boolean;\r\n    /**\r\n     * Style for the group. You can use it to pass additional styles if you need.\r\n     * For example, you can set an additional padding if you have a tab bar at the bottom.\r\n     */\r\n    style?: StyleProp<ViewStyle>;\r\n    /**\r\n     * Style for the FAB. It allows to pass the FAB button styles, such as backgroundColor.\r\n     */\r\n    fabStyle?: StyleProp<ViewStyle>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n    /**\r\n     * Pass down testID from Group props to FAB.\r\n     */\r\n    testID?: string;\r\n};\r\n\r\n/**\r\n * A component to display a stack of FABs with related actions in a speed dial.\r\n * To render the group above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img src=\"screenshots/fab-group.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import FAB from 'react-native-simple-elements/components/FAB';\r\n * import Portal from \"react-native-simple-elements/components/Portal\";\r\n * import Provider from \"react-native-simple-elements/components/theme/Provider\";\r\n *\r\n * const MyComponent = () => {\r\n *   const [state, setState] = React.useState({ open: false });\r\n *\r\n *   const onStateChange = ({ open }) => setState({ open });\r\n *\r\n *   const { open } = state;\r\n *\r\n *   return (\r\n *     <Provider>\r\n *       <Portal>\r\n *         <FAB.Group\r\n *           open={open}\r\n *           icon={open ? 'calendar-today' : 'plus'}\r\n *           actions={[\r\n *             { icon: 'plus', onPress: () => console.log('Pressed add') },\r\n *             {\r\n *               icon: 'star',\r\n *               label: 'Star',\r\n *               onPress: () => console.log('Pressed star'),\r\n *             },\r\n *             {\r\n *               icon: 'email',\r\n *               label: 'Email',\r\n *               onPress: () => console.log('Pressed email'),\r\n *             },\r\n *             {\r\n *               icon: 'bell',\r\n *               label: 'Remind',\r\n *               onPress: () => console.log('Pressed notifications'),\r\n *               small: false,\r\n *             },\r\n *           ]}\r\n *           onStateChange={onStateChange}\r\n *           onPress={() => {\r\n *             if (open) {\r\n *               // do something if the speed dial is open\r\n *             }\r\n *           }}\r\n *         />\r\n *       </Portal>\r\n *     </Provider>\r\n *   );\r\n * };\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst FABGroup = ({\r\n    actions,\r\n    icon,\r\n    open,\r\n    onPress,\r\n    accessibilityLabel,\r\n    theme,\r\n    style,\r\n    fabStyle,\r\n    visible,\r\n    testID,\r\n    onStateChange,\r\n    color: colorProp,\r\n}: Props) => {\r\n    const { current: backdrop } = React.useRef<Animated.Value>(\r\n        new Animated.Value(0)\r\n    );\r\n    const animations = React.useRef<Animated.Value[]>(\r\n        actions.map(() => new Animated.Value(open ? 1 : 0))\r\n    );\r\n\r\n    const [prevActions, setPrevActions] = React.useState<\r\n        | {\r\n            icon: React.ReactElement;\r\n            label?: string;\r\n            color?: string;\r\n            accessibilityLabel?: string;\r\n            style?: StyleProp<ViewStyle>;\r\n            onPress: () => void;\r\n            testID?: string;\r\n                }[]\r\n                | null\r\n                >(null);\r\n\r\n    const { scale } = theme.animation;\r\n\r\n    React.useEffect(() => {\r\n        if (open) {\r\n            Animated.parallel([\r\n                Animated.timing(backdrop, {\r\n                    toValue: 1,\r\n                    duration: 250 * scale,\r\n                    useNativeDriver: true,\r\n                }),\r\n                Animated.stagger(\r\n                    50 * scale,\r\n                    animations.current\r\n                        .map((animation) =>\r\n                            Animated.timing(animation, {\r\n                                toValue: 1,\r\n                                duration: 150 * scale,\r\n                                useNativeDriver: true,\r\n                            })\r\n                        )\r\n                        .reverse()\r\n                ),\r\n            ]).start();\r\n        } else {\r\n            Animated.parallel([\r\n                Animated.timing(backdrop, {\r\n                    toValue: 0,\r\n                    duration: 200 * scale,\r\n                    useNativeDriver: true,\r\n                }),\r\n                ...animations.current.map((animation) =>\r\n                    Animated.timing(animation, {\r\n                        toValue: 0,\r\n                        duration: 150 * scale,\r\n                        useNativeDriver: true,\r\n                    })\r\n                ),\r\n            ]).start();\r\n        }\r\n    }, [open, actions, backdrop, scale]);\r\n\r\n    const close = () => onStateChange({ open: false });\r\n\r\n    const toggle = () => onStateChange({ open: !open });\r\n\r\n    const { colors } = theme;\r\n\r\n    const labelColor = theme.dark\r\n        ? colors.text\r\n        : color(colors.text).fade(0.54).rgb().string();\r\n    const backdropOpacity = open\r\n        ? backdrop.interpolate({\r\n            inputRange: [0, 0.5, 1],\r\n            outputRange: [0, 1, 1],\r\n        })\r\n        : backdrop;\r\n\r\n    const opacities = animations.current;\r\n    const scales = opacities.map((opacity) =>\r\n        open\r\n            ? opacity.interpolate({\r\n                inputRange: [0, 1],\r\n                outputRange: [0.8, 1],\r\n            })\r\n            : 1\r\n    );\r\n\r\n    if (actions.length !== prevActions?.length) {\r\n        animations.current = actions.map(\r\n            (_, i) => animations.current[i] || new Animated.Value(open ? 1 : 0)\r\n        );\r\n        setPrevActions(actions);\r\n    }\r\n\r\n    return (\r\n        <View pointerEvents=\"box-none\" style={[styles.container, style]}>\r\n            <TouchableWithoutFeedback onPress={close}>\r\n                <Animated.View\r\n                    pointerEvents={open ? \"auto\" : \"none\"}\r\n                    style={[\r\n                        styles.backdrop,\r\n                        {\r\n                            opacity: backdropOpacity,\r\n                            backgroundColor: colors.backdrop,\r\n                        },\r\n                    ]}\r\n                />\r\n            </TouchableWithoutFeedback>\r\n            <SafeAreaView pointerEvents=\"box-none\" style={styles.safeArea}>\r\n                <View pointerEvents={open ? \"box-none\" : \"none\"}>\r\n                    {actions.map((it, i) => (\r\n                        <View\r\n                            key={i} // eslint-disable-line react/no-array-index-key\r\n                            style={[\r\n                                styles.item,\r\n                                {\r\n                                    marginHorizontal:\r\n                                        typeof it.small === \"undefined\" || it.small ? 24 : 16,\r\n                                },\r\n                            ]}\r\n                            pointerEvents={open ? \"box-none\" : \"none\"}\r\n                        >\r\n                            {it.label && (\r\n                                <View>\r\n                                    <Card\r\n                                        style={\r\n                                            [\r\n                                                styles.label,\r\n                                                {\r\n                                                    transform: [{ scale: scales[i] }],\r\n                                                    opacity: opacities[i],\r\n                                                },\r\n                                            ] as StyleProp<ViewStyle>\r\n                                        }\r\n                                        onPress={() => {\r\n                                            it.onPress();\r\n                                            close();\r\n                                        }}\r\n                                        accessibilityLabel={\r\n                                            it.accessibilityLabel !== \"undefined\"\r\n                                                ? it.accessibilityLabel\r\n                                                : it.label\r\n                                        }\r\n                                        // accessibilityTraits=\"button\"\r\n                                        // accessibilityComponentType=\"button\"\r\n                                        accessibilityRole=\"button\"\r\n                                    >\r\n                                        <Text style={{ color: labelColor }}>{it.label}</Text>\r\n                                    </Card>\r\n                                </View>\r\n                            )}\r\n                            <FAB\r\n                                small={typeof it.small !== \"undefined\" ? it.small : true}\r\n                                icon={it.icon}\r\n                                color={it.color}\r\n                                style={\r\n                                    [\r\n                                        {\r\n                                            transform: [{ scale: scales[i] }],\r\n                                            opacity: opacities[i],\r\n                                            backgroundColor: theme.colors.surface,\r\n                                        },\r\n                                        it.style,\r\n                                    ] as StyleProp<ViewStyle>\r\n                                }\r\n                                onPress={() => {\r\n                                    it.onPress();\r\n                                    close();\r\n                                }}\r\n                                accessibilityLabel={\r\n                                    typeof it.accessibilityLabel !== \"undefined\"\r\n                                        ? it.accessibilityLabel\r\n                                        : it.label\r\n                                }\r\n                                // accessibilityTraits=\"button\"\r\n                                // accessibilityComponentType=\"button\"\r\n                                accessibilityRole=\"button\"\r\n                                testID={it.testID}\r\n                                visible={open}\r\n                            />\r\n                        </View>\r\n                    ))}\r\n                </View>\r\n                <FAB\r\n                    onPress={() => {\r\n                        onPress?.();\r\n                        toggle();\r\n                    }}\r\n                    icon={icon}\r\n                    color={colorProp}\r\n                    accessibilityLabel={accessibilityLabel}\r\n                    // accessibilityTraits=\"button\"\r\n                    // accessibilityComponentType=\"button\"\r\n                    accessibilityRole=\"button\"\r\n                    accessibilityState={{ expanded: open }}\r\n                    style={[styles.fab, fabStyle]}\r\n                    visible={visible}\r\n                    testID={testID}\r\n                />\r\n            </SafeAreaView>\r\n        </View>\r\n    );\r\n};\r\n\r\nFABGroup.displayName = \"FAB.Group\";\r\n\r\nexport default FABGroup;\r\n\r\n// @component-docs ignore-next-line\r\nconst FABGroupWithTheme = FABGroup;\r\n// @component-docs ignore-next-line\r\nexport { FABGroupWithTheme as FABGroup };\r\n\r\nconst styles = StyleSheet.create({\r\n    safeArea: {\r\n        alignItems: \"flex-end\",\r\n    },\r\n    container: {\r\n        ...StyleSheet.absoluteFillObject,\r\n        justifyContent: \"flex-end\",\r\n    },\r\n    fab: {\r\n        marginHorizontal: 16,\r\n        marginBottom: 16,\r\n        marginTop: 0,\r\n    },\r\n    backdrop: {\r\n        ...StyleSheet.absoluteFillObject,\r\n    },\r\n    label: {\r\n        borderRadius: 5,\r\n        paddingHorizontal: 12,\r\n        paddingVertical: 6,\r\n        marginVertical: 8,\r\n        marginHorizontal: 16,\r\n        elevation: 2,\r\n    },\r\n    item: {\r\n        marginBottom: 16,\r\n        flexDirection: \"row\",\r\n        justifyContent: \"flex-end\",\r\n        alignItems: \"center\",\r\n    },\r\n});\r\n"]}