{"version":3,"sources":["DrawerProvider.tsx"],"names":["DrawerContainer","styled","View","layout","position","defaultProps","top","left","height","zIndex","DrawerBackdrop","Animated","createAnimatedComponent","color","DrawerPanel","flex","space","flexWrap","overflow","backgroundColor","Drawer","props","drawerPaddingTop","children","showMask","animated","drawerIsOpen","setDrawerIsOpen","React","useContext","DrawerContext","animatedOpacity","useRef","Value","current","animatedWidth","useEffect","timing","toValue","duration","easing","Easing","out","cubic","useNativeDriver","start","opacity","width","Section","Item"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Animated, Easing } from \"react-native\";\n// import styled from \"styled-components\";\nimport styled from \"styled-components/native\";\nimport { LayoutProps, PositionProps, color, ColorProps, compose, layout, position, flex, FlexProps, SpaceProps, space } from \"styled-system\";\nimport DrawerContext from \"./DrawerContext\";\nimport TouchableRipple from \"../TouchableRipple\";\n\n// @component ./DrawerItem.tsx\nimport { default as Item } from \"./DrawerItem\";\n\n// @component ./DrawerSection.tsx\nimport { default as Section } from \"./DrawerSection\";\n\nconst DrawerContainer = styled.View<LayoutProps & PositionProps>(compose(layout, position));\nDrawerContainer.defaultProps = {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    height: \"100vh\",\n    zIndex: 2,\n};\n\ntype DrawerBackdropTypes = LayoutProps & PositionProps & ColorProps;\nconst DrawerBackdrop = Animated.createAnimatedComponent(styled.View<DrawerBackdropTypes>(compose(layout, position, color)));\nDrawerBackdrop.defaultProps = {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    height: \"100vh\",\n};\n\ntype DrawerPanelTypes = LayoutProps & PositionProps & ColorProps & FlexProps & SpaceProps;\nconst DrawerPanel = Animated.createAnimatedComponent(styled.View<DrawerPanelTypes>(compose(layout, position, color, flex, space)));\nDrawerPanel.defaultProps = {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    height: \"100vh\",\n    flexWrap: \"nowrap\",\n    overflow: \"hidden\",\n    flex: 1,\n    backgroundColor: \"white\",\n};\n\nconst Drawer = (props) => {\n    const {\n        drawerPaddingTop,\n        children,\n        showMask,\n        animated,\n    } = props;\n    const { drawerIsOpen, setDrawerIsOpen } = React.useContext(DrawerContext);\n\n    const animatedOpacity = React.useRef(new Animated.Value(0)).current;\n    const animatedWidth = React.useRef(new Animated.Value(0)).current;\n\n    React.useEffect(() => {\n        Animated.timing(animatedOpacity, {\n            toValue: drawerIsOpen ? 1 : 0,\n            duration: 100,\n            easing: Easing.out(Easing.cubic),\n            useNativeDriver: false,\n        }).start();\n\n        Animated.timing(animatedWidth, {\n            toValue: drawerIsOpen ? 240 : 0,\n            duration: 200,\n            easing: Easing.out(Easing.cubic),\n            useNativeDriver: false,\n        }).start();\n    }, [drawerIsOpen]);\n\n    return (\n        <DrawerContainer\n            width={drawerIsOpen ? \"100%\" : \"0\"}\n            testID=\"drawer_container\"\n            pointerEvents=\"box-none\"\n        >\n            <DrawerBackdrop\n                // as={Animated.View}\n                testID=\"drawer_backdrop\"\n                width={drawerIsOpen ? \"100%\" : \"0\"}\n                style={{\n                    opacity: animatedOpacity,\n                    backgroundColor: showMask ? \"#00000077\" : \"transparent\",\n                }}\n                pointerEvents={showMask ? \"auto\" : \"box-none\"}\n            >\n                {showMask ?\n                    <TouchableRipple\n                        onPress={() => {\n                            setDrawerIsOpen(false);\n                        }}\n                        style={{\n                            width: \"100%\",\n                            height: \"100%\",\n                        }}\n                    >\n                        <></>\n                    </TouchableRipple>\n                    :\n                    null\n                }\n            </DrawerBackdrop>\n            <DrawerPanel\n                testID=\"drawer_content\"\n                style={{\n                    width: animated ? animatedWidth : (drawerIsOpen ? 240 : 0),\n                    // height: \"100vh\",\n                    position: \"absolute\",\n                }}\n                paddingTop={drawerPaddingTop ?? \"0\"}\n            >\n                {children}\n            </DrawerPanel>\n        </DrawerContainer>\n    );\n};\n\nDrawer.Section = Section;\nDrawer.Item = Item;\n\nexport default Drawer;\n"]}