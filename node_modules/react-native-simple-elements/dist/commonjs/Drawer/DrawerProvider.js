"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _native = _interopRequireDefault(require("styled-components/native"));

var _styledSystem = require("styled-system");

var _DrawerContext = _interopRequireDefault(require("./DrawerContext"));

var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple"));

var _DrawerItem = _interopRequireDefault(require("./DrawerItem"));

var _DrawerSection = _interopRequireDefault(require("./DrawerSection"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// import styled from "styled-components";
// @component ./DrawerItem.tsx
// @component ./DrawerSection.tsx
const DrawerContainer = _native.default.View((0, _styledSystem.compose)(_styledSystem.layout, _styledSystem.position));

DrawerContainer.defaultProps = {
  position: "absolute",
  top: 0,
  left: 0,
  height: "100vh",
  zIndex: 2
};

const DrawerBackdrop = _reactNative.Animated.createAnimatedComponent(_native.default.View((0, _styledSystem.compose)(_styledSystem.layout, _styledSystem.position, _styledSystem.color)));

DrawerBackdrop.defaultProps = {
  position: "absolute",
  top: 0,
  left: 0,
  height: "100vh"
};

const DrawerPanel = _reactNative.Animated.createAnimatedComponent(_native.default.View((0, _styledSystem.compose)(_styledSystem.layout, _styledSystem.position, _styledSystem.color, _styledSystem.flex, _styledSystem.space)));

DrawerPanel.defaultProps = {
  position: "absolute",
  top: 0,
  left: 0,
  height: "100vh",
  flexWrap: "nowrap",
  overflow: "hidden",
  flex: 1,
  backgroundColor: "white"
};

const Drawer = props => {
  const {
    drawerPaddingTop,
    children,
    showMask,
    animated
  } = props;
  const {
    drawerIsOpen,
    setDrawerIsOpen
  } = React.useContext(_DrawerContext.default);
  const animatedOpacity = React.useRef(new _reactNative.Animated.Value(0)).current;
  const animatedWidth = React.useRef(new _reactNative.Animated.Value(0)).current;
  React.useEffect(() => {
    _reactNative.Animated.timing(animatedOpacity, {
      toValue: drawerIsOpen ? 1 : 0,
      duration: 100,
      easing: _reactNative.Easing.out(_reactNative.Easing.cubic),
      useNativeDriver: false
    }).start();

    _reactNative.Animated.timing(animatedWidth, {
      toValue: drawerIsOpen ? 240 : 0,
      duration: 200,
      easing: _reactNative.Easing.out(_reactNative.Easing.cubic),
      useNativeDriver: false
    }).start();
  }, [drawerIsOpen]);
  return /*#__PURE__*/React.createElement(DrawerContainer, {
    width: drawerIsOpen ? "100%" : "0",
    testID: "drawer_container",
    pointerEvents: "box-none"
  }, /*#__PURE__*/React.createElement(DrawerBackdrop // as={Animated.View}
  , {
    testID: "drawer_backdrop",
    width: drawerIsOpen ? "100%" : "0",
    style: {
      opacity: animatedOpacity,
      backgroundColor: showMask ? "#00000077" : "transparent"
    },
    pointerEvents: showMask ? "auto" : "box-none"
  }, showMask ? /*#__PURE__*/React.createElement(_TouchableRipple.default, {
    onPress: () => {
      setDrawerIsOpen(false);
    },
    style: {
      width: "100%",
      height: "100%"
    }
  }, /*#__PURE__*/React.createElement(React.Fragment, null)) : null), /*#__PURE__*/React.createElement(DrawerPanel, {
    testID: "drawer_content",
    style: {
      width: animated ? animatedWidth : drawerIsOpen ? 240 : 0,
      // height: "100vh",
      position: "absolute"
    },
    paddingTop: drawerPaddingTop !== null && drawerPaddingTop !== void 0 ? drawerPaddingTop : "0"
  }, children));
};

Drawer.Section = _DrawerSection.default;
Drawer.Item = _DrawerItem.default;
var _default = Drawer;
exports.default = _default;
//# sourceMappingURL=DrawerProvider.js.map