"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _debounce = require("../utils/debounce");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// HOC right way
// type PropsAreEqual<P> = (
//     prevProps: Readonly<P>,
//     nextProps: Readonly<P>
// ) => boolean;
// const withSampleHoC = <P extends {}>(
//     component: {
//         (props: P): Exclude<React.ReactNode, undefined>;
//         displayName?: string;
//     },
//     propsAreEqual?: PropsAreEqual<P> | false,
//     componentName = component.displayName ?? component.name
// ): {
//     (props: P): JSX.Element;
//     displayName: string;
// } => {
//     function WithSampleHoc(props: P) {
//         //Do something special to justify the HoC.
//         return component(props) as JSX.Element;
//     }
//     WithSampleHoc.displayName = `withSampleHoC(${componentName})`;
//     let wrappedComponent = propsAreEqual === false ? WithSampleHoc : React.memo(WithSampleHoc, propsAreEqual);
//     //copyStaticProperties(component, wrappedComponent);
//     return wrappedComponent as typeof WithSampleHoc
// };
const TOUCHABLE_AREA_DEBOUNCE_TIME = 500;

const withPreventDoubleTap = (component, propsAreEqual, componentName = (() => {
  var _component$displayNam;

  return (_component$displayNam = component.displayName) !== null && _component$displayNam !== void 0 ? _component$displayNam : component.name;
})()) => {
  function PreventDoubleTap(props) {
    const {
      onPress,
      ...rest
    } = props;

    const debouncedOnPress = () => {
      onPress && onPress();
    };

    const _onPress = (0, _debounce.debounce)(debouncedOnPress, TOUCHABLE_AREA_DEBOUNCE_TIME, true); //Do something special to justify the HoC.


    return component({ ...rest,
      onPress: _onPress
    }); // return <WrappedComponent {...this.props} onPress={this.onPress} />;
  }

  PreventDoubleTap.displayName = "withPreventDoubleTap(".concat(componentName, ")");
  const wrappedComponent = propsAreEqual === false ? PreventDoubleTap : /*#__PURE__*/React.memo(PreventDoubleTap, propsAreEqual); //copyStaticProperties(component, wrappedComponent);

  return wrappedComponent;
};

var _default = withPreventDoubleTap;
exports.default = _default;
//# sourceMappingURL=withPreventDoubleTap.js.map