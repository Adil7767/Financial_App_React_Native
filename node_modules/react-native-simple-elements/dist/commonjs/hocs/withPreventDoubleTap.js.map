{"version":3,"sources":["withPreventDoubleTap.tsx"],"names":["TOUCHABLE_AREA_DEBOUNCE_TIME","withPreventDoubleTap","component","propsAreEqual","componentName","displayName","name","PreventDoubleTap","props","onPress","rest","debouncedOnPress","_onPress","wrappedComponent","React","memo"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA,MAAMA,4BAA4B,GAAG,GAArC;;AAYA,MAAMC,oBAAoB,GAAG,CACzBC,SADyB,EAKzBC,aALyB,EAMzBC,aAAa;AAAA;;AAAA,kCAAGF,SAAS,CAACG,WAAb,yEAA4BH,SAAS,CAACI,IAAtC;AAAA,IANY,KAUxB;AAED,WAASC,gBAAT,CAA0BC,KAA1B,EAAoC;AAChC,UAAM;AAAEC,MAAAA,OAAF;AAAW,SAAGC;AAAd,QAAuBF,KAA7B;;AAEA,UAAMG,gBAAgB,GAAG,MAAM;AAC3BF,MAAAA,OAAO,IAAIA,OAAO,EAAlB;AACH,KAFD;;AAIA,UAAMG,QAAQ,GAAG,wBACbD,gBADa,EAEbX,4BAFa,EAGb,IAHa,CAAjB,CAPgC,CAahC;;;AACA,WAAOE,SAAS,CAAC,EAAE,GAAGQ,IAAL;AAAWD,MAAAA,OAAO,EAAEG;AAApB,KAAD,CAAhB,CAdgC,CAehC;AACH;;AAEDL,EAAAA,gBAAgB,CAACF,WAAjB,kCAAuDD,aAAvD;AAEA,QAAMS,gBAAgB,GAAGV,aAAa,KAAK,KAAlB,GAA0BI,gBAA1B,gBAA6CO,KAAK,CAACC,IAAN,CAAWR,gBAAX,EAA6BJ,aAA7B,CAAtE,CAtBC,CAwBD;;AAEA,SAAOU,gBAAP;AACH,CArCD;;eAuCeZ,oB","sourcesContent":["import * as React from \"react\";\nimport { debounce } from \"../utils/debounce\";\n\n// HOC right way\n// type PropsAreEqual<P> = (\n//     prevProps: Readonly<P>,\n//     nextProps: Readonly<P>\n// ) => boolean;\n\n// const withSampleHoC = <P extends {}>(\n//     component: {\n//         (props: P): Exclude<React.ReactNode, undefined>;\n//         displayName?: string;\n//     },\n//     propsAreEqual?: PropsAreEqual<P> | false,\n//     componentName = component.displayName ?? component.name\n// ): {\n//     (props: P): JSX.Element;\n//     displayName: string;\n// } => {\n\n//     function WithSampleHoc(props: P) {\n//         //Do something special to justify the HoC.\n//         return component(props) as JSX.Element;\n//     }\n\n//     WithSampleHoc.displayName = `withSampleHoC(${componentName})`;\n\n//     let wrappedComponent = propsAreEqual === false ? WithSampleHoc : React.memo(WithSampleHoc, propsAreEqual);\n\n//     //copyStaticProperties(component, wrappedComponent);\n\n//     return wrappedComponent as typeof WithSampleHoc\n// };\n\nconst TOUCHABLE_AREA_DEBOUNCE_TIME = 500;\n\ntype I = {\n    onPress: (evt?) => void,\n    [key: string]: any,\n}\n\ntype PropsAreEqual<P> = (\n    prevProps: Readonly<P>,\n    nextProps: Readonly<P>\n) => boolean;\n\nconst withPreventDoubleTap = <P extends I>(\n    component: {\n        (props: P): Exclude<React.ReactNode, undefined>;\n        displayName?: string;\n    },\n    propsAreEqual?: PropsAreEqual<P> | false,\n    componentName = component.displayName ?? component.name\n): {\n    (props: P): JSX.Element;\n    displayName: string;\n} => {\n\n    function PreventDoubleTap(props: P) {\n        const { onPress, ...rest } = props;\n\n        const debouncedOnPress = () => {\n            onPress && onPress();\n        };\n\n        const _onPress = debounce(\n            debouncedOnPress,\n            TOUCHABLE_AREA_DEBOUNCE_TIME,\n            true\n        );\n\n        //Do something special to justify the HoC.\n        return component({ ...rest, onPress: _onPress } as any) as JSX.Element;\n        // return <WrappedComponent {...this.props} onPress={this.onPress} />;\n    }\n\n    PreventDoubleTap.displayName = `withPreventDoubleTap(${componentName})`;\n\n    const wrappedComponent = propsAreEqual === false ? PreventDoubleTap : React.memo(PreventDoubleTap, propsAreEqual);\n\n    //copyStaticProperties(component, wrappedComponent);\n\n    return wrappedComponent as typeof PreventDoubleTap;\n};\n\nexport default withPreventDoubleTap;\n"]}