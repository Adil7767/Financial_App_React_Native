{"version":3,"sources":["ProgressBar.tsx"],"names":["INDETERMINATE_DURATION","INDETERMINATE_MAX_WIDTH","isRTL","I18nManager","ProgressBar","color","indeterminate","style","progress","visible","rest","theme","React","useContext","ThemeContext","current","timer","useRef","Animated","Value","fade","width","setWidth","useState","prevWidth","setPrevWidth","indeterminateAnimation","scale","animation","startAnimation","useCallback","timing","duration","toValue","useNativeDriver","isInteraction","start","Platform","OS","setValue","loop","stopAnimation","stop","useEffect","onLayout","event","nativeEvent","layout","tintColor","colors","primary","trackTintColor","alpha","rgb","string","styles","container","backgroundColor","opacity","progressBar","transform","translateX","interpolate","inputRange","outputRange","scaleX","StyleSheet","create","height","overflow","flex"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    Animated,\r\n    Platform,\r\n    StyleSheet,\r\n    View,\r\n    ViewStyle,\r\n    StyleProp,\r\n    LayoutChangeEvent,\r\n    I18nManager,\r\n} from \"react-native\";\r\nimport setColor from \"color\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\n\r\ntype Props = React.ComponentPropsWithRef<typeof View> & {\r\n    /**\r\n     * Progress value (between 0 and 1).\r\n     */\r\n    progress?: number;\r\n    /**\r\n     * Color of the progress bar. The background color will be calculated based on this but you can change it by passing `backgroundColor` to `style` prop.\r\n     */\r\n    color?: string;\r\n    /**\r\n     * If the progress bar will show indeterminate progress.\r\n     */\r\n    indeterminate?: boolean;\r\n    /**\r\n     * Whether to show the ProgressBar (true, the default) or hide it (false).\r\n     */\r\n    visible?: boolean;\r\n    style?: StyleProp<ViewStyle>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n};\r\n\r\nconst INDETERMINATE_DURATION = 2000;\r\nconst INDETERMINATE_MAX_WIDTH = 0.6;\r\nconst { isRTL } = I18nManager;\r\n\r\n/**\r\n * Progress bar is an indicator used to present progress of some activity in the app.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img src=\"screenshots/progress-bar.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import ProgressBar from 'react-native-simple-elements/components/ProgressBar';\r\n * import * as Colors from \"react-native-simple-elements/components/theme/colors\";\r\n *\r\n * const MyComponent = () => (\r\n *   <ProgressBar progress={0.5} color={Colors.red800} />\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst ProgressBar = ({\r\n    color,\r\n    indeterminate,\r\n    style,\r\n    progress = 0,\r\n    visible = true,\r\n    ...rest\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n    const { current: timer } = React.useRef<Animated.Value>(\r\n        new Animated.Value(0)\r\n    );\r\n    const { current: fade } = React.useRef<Animated.Value>(new Animated.Value(0));\r\n    const [width, setWidth] = React.useState<number>(0);\r\n    const [prevWidth, setPrevWidth] = React.useState<number>(0);\r\n\r\n    const indeterminateAnimation = React.useRef<Animated.CompositeAnimation | null>(\r\n        null\r\n    );\r\n\r\n    const { scale } = theme.animation;\r\n\r\n    const startAnimation = React.useCallback(() => {\r\n        // Show progress bar\r\n        Animated.timing(fade, {\r\n            duration: 200 * scale,\r\n            toValue: 1,\r\n            useNativeDriver: true,\r\n            isInteraction: false,\r\n        }).start();\r\n\r\n        // Animate progress bar\r\n        if (indeterminate) {\r\n            if (!indeterminateAnimation.current) {\r\n                indeterminateAnimation.current = Animated.timing(timer, {\r\n                    duration: INDETERMINATE_DURATION,\r\n                    toValue: 1,\r\n                    // Animated.loop does not work if useNativeDriver is true on web\r\n                    useNativeDriver: Platform.OS !== \"web\",\r\n                    isInteraction: false,\r\n                });\r\n            }\r\n\r\n            // Reset timer to the beginning\r\n            timer.setValue(0);\r\n\r\n            Animated.loop(indeterminateAnimation.current).start();\r\n        } else {\r\n            Animated.timing(timer, {\r\n                duration: 200 * scale,\r\n                toValue: progress ? progress : 0,\r\n                useNativeDriver: true,\r\n                isInteraction: false,\r\n            }).start();\r\n        }\r\n    }, [scale, timer, progress, indeterminate, fade]);\r\n\r\n    const stopAnimation = React.useCallback(() => {\r\n        // Stop indeterminate animation\r\n        if (indeterminateAnimation.current) {\r\n            indeterminateAnimation.current.stop();\r\n        }\r\n\r\n        Animated.timing(fade, {\r\n            duration: 200 * scale,\r\n            toValue: 0,\r\n            useNativeDriver: true,\r\n            isInteraction: false,\r\n        }).start();\r\n    }, [fade, scale]);\r\n\r\n    React.useEffect(() => {\r\n        if (visible) startAnimation();\r\n        else stopAnimation();\r\n    }, [visible, startAnimation, stopAnimation]);\r\n\r\n    React.useEffect(() => {\r\n        // Start animation the very first time when previously the width was unclear\r\n        if (visible && prevWidth === 0) {\r\n            startAnimation();\r\n        }\r\n    }, [prevWidth, startAnimation, visible]);\r\n\r\n    const onLayout = (event: LayoutChangeEvent) => {\r\n        setPrevWidth(width);\r\n        setWidth(event.nativeEvent.layout.width);\r\n    };\r\n\r\n    const tintColor = color || theme.colors.primary;\r\n    const trackTintColor = setColor(tintColor).alpha(0.38).rgb().string();\r\n\r\n    return (\r\n        <View\r\n            onLayout={onLayout}\r\n            {...rest}\r\n            accessible\r\n            accessibilityRole=\"progressbar\"\r\n        >\r\n            <Animated.View\r\n                style={[\r\n                    styles.container,\r\n                    { backgroundColor: trackTintColor, opacity: fade },\r\n                    style,\r\n                ]}\r\n            >\r\n                <Animated.View\r\n                    style={[\r\n                        styles.progressBar,\r\n                        {\r\n                            backgroundColor: tintColor,\r\n                            width,\r\n                            transform: [\r\n                                {\r\n                                    translateX: timer.interpolate(\r\n                                        indeterminate\r\n                                            ? {\r\n                                                inputRange: [0, 0.5, 1],\r\n                                                outputRange: [\r\n                                                    (isRTL ? 1 : -1) * 0.5 * width,\r\n                                                    (isRTL ? 1 : -1) *\r\n                                                    0.5 *\r\n                                                    INDETERMINATE_MAX_WIDTH *\r\n                                                    width,\r\n                                                    (isRTL ? -1 : 1) * 0.7 * width,\r\n                                                ],\r\n                                            }\r\n                                            : {\r\n                                                inputRange: [0, 1],\r\n                                                outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0],\r\n                                            }\r\n                                    ),\r\n                                },\r\n                                {\r\n                                    // Workaround for workaround for https://github.com/facebook/react-native/issues/6278\r\n                                    scaleX: timer.interpolate(\r\n                                        indeterminate\r\n                                            ? {\r\n                                                inputRange: [0, 0.5, 1],\r\n                                                outputRange: [\r\n                                                    0.0001,\r\n                                                    INDETERMINATE_MAX_WIDTH,\r\n                                                    0.0001,\r\n                                                ],\r\n                                            }\r\n                                            : {\r\n                                                inputRange: [0, 1],\r\n                                                outputRange: [0.0001, 1],\r\n                                            }\r\n                                    ),\r\n                                },\r\n                            ],\r\n                        },\r\n                    ]}\r\n                />\r\n            </Animated.View>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        height: 4,\r\n        overflow: \"hidden\",\r\n    },\r\n\r\n    progressBar: {\r\n        flex: 1,\r\n    },\r\n});\r\n\r\nexport default ProgressBar;\r\n"]}