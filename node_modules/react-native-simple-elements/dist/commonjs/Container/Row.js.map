{"version":3,"sources":["Row.tsx"],"names":["cloneElements","props","rowSize","size","React","Children","map","children","element","cloneElement","Row","screenSize","style","display","flexDirection","flexWrap","nowrap","alignItems","justifyContent","backgroundColor"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,aAAa,GAAIC,KAAD,IAAW;AAC7B;AACA,QAAMC,OAAO,GAAGD,KAAK,CAACE,IAAN,GAAa,CAAb,GAAiBF,KAAK,CAACE,IAAvB,GAA8B,EAA9C;AAEA,SAAOC,KAAK,CAACC,QAAN,CAAeC,GAAf,CAAmBL,KAAK,CAACM,QAAzB,EAAoCC,OAAD,IAAa;AACnD,wBAAOJ,KAAK,CAACK,YAAN,CAAmBD,OAAnB,EAA4B;AAAEN,MAAAA,OAAO,EAAEA;AAAX,KAA5B,CAAP;AACH,GAFM,CAAP;AAGH,CAPD;;AAqBA,MAAMQ,GAAG,GAAIT,KAAD,IAAkB;AAC1B,MAAI,uBAASU,sBAAT,EAAqBV,KAArB,CAAJ,EAAiC;AAC7B,WAAO,IAAP;AACH,GAFD,MAEO;AACH,wBACI,oBAAC,iBAAD,eACQA,KADR;AAEI,MAAA,KAAK,EAAE,CAACA,KAAK,CAACW,KAAP,EACH;AACIC,QAAAA,OAAO,EAAE,MADb;AAEIC,QAAAA,aAAa,EAAE,KAFnB;AAGIC,QAAAA,QAAQ,EAAEd,KAAK,CAACe,MAAN,GAAe,QAAf,GAA0B,MAHxC;AAIIC,QAAAA,UAAU,EAAEhB,KAAK,CAACgB,UAJtB;AAKIC,QAAAA,cAAc,EAAEjB,KAAK,CAACiB,cAL1B;AAMIC,QAAAA,eAAe,EAAE;AANrB,OADG,CAFX;AAYI,MAAA,MAAM,EAAC;AAZX,QAcKnB,aAAa,CAACC,KAAD,CAdlB,CADJ;AAkBH;AACJ,CAvBD;;eAyBeS,G","sourcesContent":["import * as React from \"react\";\nimport { screenSize } from \"./utils/ScreenSize\";\nimport { isHidden } from \"./utils/helpers\";\nimport { View } from \"react-native\";\n\nconst cloneElements = (props) => {\n    //if size doesn't exist or is 0 default to 12\n    const rowSize = props.size > 0 ? props.size : 12;\n\n    return React.Children.map(props.children, (element) => {\n        return React.cloneElement(element, { rowSize: rowSize });\n    });\n};\n\ntype Props = {\n    size?: number,\n    nowrap?: boolean,\n    smHidden?: boolean,\n    mdHidden?: boolean,\n    lgHidden?: boolean,\n    style?: any,\n    alignItems?: string,\n    justifyContent?: string,\n    children: React.ReactNode,\n};\n\nconst Row = (props: Props) => {\n    if (isHidden(screenSize, props)) {\n        return null;\n    } else {\n        return (\n            <View \n                {...props}\n                style={[props.style,\n                    {\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        flexWrap: props.nowrap ? \"nowrap\" : \"wrap\",\n                        alignItems: props.alignItems,\n                        justifyContent: props.justifyContent,\n                        backgroundColor: \"transparent\",\n                    }]\n                }\n                testID=\"row\"\n            >\n                {cloneElements(props)}\n            </View>\n        );\n    }\n};\n\nexport default Row;\n"]}