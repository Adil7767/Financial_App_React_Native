{"version":3,"sources":["FlexItem.tsx"],"names":["FlexItem","left","right","content","title","description","onPress","style","focusedStyle","hoveredStyle","pressedStyle","rowStyle","contentStyle","titleStyle","titleNumberOfLines","descriptionNumberOfLines","titleEllipsizeMode","descriptionEllipsizeMode","descriptionStyle","rest","theme","React","useContext","ThemeContext","renderDescription","descriptionColor","selectable","ellipsizeMode","color","fontSize","styles","titleColor","colors","text","alpha","rgb","string","container","row","iconMarginLeft","marginVerticalNone","item","iconMarginRight","displayName","StyleSheet","create","padding","flexDirection","marginVertical","marginLeft","marginRight","paddingLeft","flex","justifyContent"],"mappings":"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","sourcesContent":["import color from \"color\";\nimport * as React from \"react\";\nimport {\n    StyleProp,\n    StyleSheet,\n    TextStyle,\n    View,\n    ViewStyle,\n} from \"react-native\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Text\";\nimport { $RemoveChildren, EllipsizeProp } from \"../types\";\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\n\ntype Description =\n    | React.ReactNode\n    | ((props: {\n        selectable: boolean;\n        ellipsizeMode: EllipsizeProp | undefined;\n        color: string;\n        fontSize: number;\n    }) => React.ReactNode);\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n    /**\n     * Title text for the list item.\n     */\n    title?: React.ReactNode;\n    /**\n     * Description text for the list item or callback which returns a React element to display the description.\n     */\n    description?: Description | null;\n    /**\n     * Callback which returns a React element to display on the left side.\n     */\n    left?: (props: {\n        color: string;\n        style: {\n            marginLeft: number;\n            marginRight: number;\n            marginVertical?: number;\n        };\n    }) => React.ReactNode;\n    /**\n     * Callback which returns a React element to display on the right side.\n     */\n    right?: (props: {\n        color: string;\n        style?: {\n            marginRight: number;\n            marginVertical?: number;\n        };\n    }) => React.ReactNode;\n    /**\n     * Callback which returns a React element to display on the right side.\n     */\n    content?: (props: {\n        color: string;\n        style?: {\n            marginRight?: number;\n            marginVertical?: number;\n        };\n    }) => React.ReactNode;\n    /**\n     * Function to execute on press.\n     */\n    onPress?: () => void;\n    /**\n     * @optional\n     */\n    theme?: DefaultTheme;\n    /**\n     * Style that is passed to the wrapping TouchableRipple element.\n     */\n    style?: StyleProp<ViewStyle>;\n\n    focusedStyle?: StyleProp<ViewStyle>;\n    hoveredStyle?: StyleProp<ViewStyle>;\n    pressedStyle?: StyleProp<ViewStyle>;\n\n    /**\n     * Style that is passed to wrap content.\n     */\n    rowStyle?: StyleProp<ViewStyle>;\n    /**\n     * Style that is passed to wrap content.\n     */\n    contentStyle?: StyleProp<ViewStyle>;\n    /**\n     * Style that is passed to Title element.\n     */\n    titleStyle?: StyleProp<TextStyle>;\n    /**\n     * Style that is passed to Description element.\n     */\n    descriptionStyle?: StyleProp<TextStyle>;\n    /**\n     * Truncate Title text such that the total number of lines does not\n     * exceed this number.\n     */\n    titleNumberOfLines?: number;\n    /**\n     * Truncate Description text such that the total number of lines does not\n     * exceed this number.\n     */\n    descriptionNumberOfLines?: number;\n    /**\n     * Ellipsize Mode for the Title.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n     *\n     * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n     */\n    titleEllipsizeMode?: EllipsizeProp;\n    /**\n     * Ellipsize Mode for the Description.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n     *\n     * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n     */\n    descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ListItem } from 'react-native-simple-elements/components/ListItem';\n *\n * const MyComponent = () => (\n *   <ListItem\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n */\nconst FlexItem = ({\n    left,\n    right,\n    content,\n    title,\n    description,\n    onPress,\n    style,\n    focusedStyle,\n    hoveredStyle,\n    pressedStyle,\n    rowStyle,\n    contentStyle,\n    titleStyle,\n    titleNumberOfLines = 1,\n    descriptionNumberOfLines = 2,\n    titleEllipsizeMode,\n    descriptionEllipsizeMode,\n    descriptionStyle,\n    ...rest\n}: Props) => {\n    const theme = React.useContext(ThemeContext);\n    const renderDescription = (\n        descriptionColor: string,\n        description?: Description | null\n    ) => {\n        return typeof description === \"function\" ? (\n            description({\n                selectable: false,\n                ellipsizeMode: descriptionEllipsizeMode,\n                color: descriptionColor,\n                fontSize: styles.description.fontSize,\n            })\n        ) : (\n            <Text\n                selectable={false}\n                numberOfLines={descriptionNumberOfLines}\n                ellipsizeMode={descriptionEllipsizeMode}\n                style={[\n                    styles.description,\n                    { color: descriptionColor },\n                    descriptionStyle,\n                ]}\n            >\n                {description}\n            </Text>\n        );\n    };\n\n    const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n    const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n    return (\n        <TouchableRipple\n            {...rest}\n            style={[styles.container, style]}\n            focusedStyle={focusedStyle}\n            hoveredStyle={hoveredStyle}\n            pressedStyle={pressedStyle}\n            onPress={onPress}\n        >\n            <View style={[styles.row, rowStyle]}>\n                {left\n                    ? left({\n                        color: descriptionColor,\n                        style: description\n                            ? styles.iconMarginLeft\n                            : {\n                                ...styles.iconMarginLeft,\n                                ...styles.marginVerticalNone,\n                            },\n                    })\n                    : null}\n                <View style={[styles.item, styles.content, contentStyle]}>\n                    {content\n                        ? content({\n                            color: titleColor,\n                            style: {\n                            }\n                        })\n                        : (\n                            <>\n                                <Text\n                                    selectable={false}\n                                    ellipsizeMode={titleEllipsizeMode}\n                                    numberOfLines={titleNumberOfLines}\n                                    style={[styles.title, { color: titleColor }, titleStyle]}\n                                >\n                                    {title}\n                                </Text>\n                                {description\n                                    ? renderDescription(descriptionColor, description)\n                                    : null}\n                            </>\n                        )\n                    }\n                </View>\n                {right\n                    ? right({\n                        color: descriptionColor,\n                        style: description\n                            ? styles.iconMarginRight\n                            : {\n                                ...styles.iconMarginRight,\n                                ...styles.marginVerticalNone,\n                            },\n                    })\n                    : null}\n            </View>\n        </TouchableRipple>\n    );\n};\n\nFlexItem.displayName = \"Flex.Item\";\n\nconst styles = StyleSheet.create({\n    container: {\n        padding: 8,\n    },\n    row: {\n        flexDirection: \"row\",\n    },\n    title: {\n        fontSize: 16,\n    },\n    description: {\n        fontSize: 14,\n    },\n    marginVerticalNone: { marginVertical: 0 },\n    iconMarginLeft: { marginLeft: 0, marginRight: 16 },\n    iconMarginRight: { marginRight: 0 },\n    item: {\n        marginVertical: 6,\n        paddingLeft: 8,\n    },\n    content: {\n        flex: 1,\n        justifyContent: \"center\",\n    },\n});\n\nexport default FlexItem;\n"]}