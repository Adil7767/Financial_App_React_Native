"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _useScreenSize = _interopRequireDefault(require("./utils/useScreenSize"));

var _helpers = require("./utils/helpers");

var _reactNative = require("react-native");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Column = props => {
  const {
    sm,
    smOffset,
    smHidden,
    md,
    mdOffset,
    mdHidden,
    lg,
    lgOffset,
    lgHidden,
    rowSize,
    ...rest
  } = props;
  const gridProps = {
    sm,
    smOffset,
    smHidden,
    md,
    mdOffset,
    mdHidden,
    lg,
    lgOffset,
    lgHidden,
    rowSize
  };
  const {
    screenSizeType
  } = (0, _useScreenSize.default)();

  if ((0, _helpers.isHidden)(screenSizeType, gridProps)) {
    return null;
  } else {
    return /*#__PURE__*/React.createElement(_reactNative.View, _extends({}, rest, {
      style: [props.style, {
        display: "flex",
        width: (0, _helpers.getComponentWidth)(screenSizeType, gridProps),
        flexDirection: "column",
        backgroundColor: "transparent",
        marginLeft: (0, _helpers.getComponentOffset)(screenSizeType, gridProps)
      }],
      testID: "column"
    }), rest.children);
  }
};

var _default = Column;
exports.default = _default;
//# sourceMappingURL=Column.js.map