/// <reference types="react" />
declare const FAB: (({ small, icon, label, accessibilityLabel, accessibilityState, animated, color: customColor, disabled, onPress, onLongPress, style, visible, uppercase, loading, testID, ...rest }: Pick<Pick<import("react-native").ViewProps & import("react").RefAttributes<import("react-native").View> & {
    children: import("react").ReactNode;
    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
    theme?: import("styled-components").DefaultTheme;
}, "hitSlop" | "onLayout" | "pointerEvents" | "removeClippedSubviews" | "style" | "testID" | "nativeID" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "children" | "theme" | "key">, "hitSlop" | "onLayout" | "pointerEvents" | "removeClippedSubviews" | "style" | "testID" | "nativeID" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "theme" | "key"> & {
    icon: import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)>) | (new (props: any) => import("react").Component<any, any, any>)>;
    label?: string;
    uppercase?: boolean;
    accessibilityLabel?: string;
    accessibilityState?: import("react-native").AccessibilityState;
    animated?: boolean;
    small?: boolean;
    color?: string;
    disabled?: boolean;
    visible?: boolean;
    loading?: boolean;
    onPress?: () => void;
    onLongPress?: () => void;
    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
    theme?: import("styled-components").DefaultTheme;
    testID?: string;
}) => JSX.Element) & {
    Group: {
        ({ actions, icon, open, onPress, accessibilityLabel, theme, style, fabStyle, visible, testID, onStateChange, color: colorProp, }: {
            actions: {
                icon: import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)>) | (new (props: any) => import("react").Component<any, any, any>)>;
                label?: string;
                color?: string;
                accessibilityLabel?: string;
                style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
                small?: boolean;
                onPress: () => void;
                testID?: string;
            }[];
            icon: import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)>) | (new (props: any) => import("react").Component<any, any, any>)>;
            accessibilityLabel?: string;
            color?: string;
            onPress?: () => void;
            open: boolean;
            onStateChange: (state: {
                open: boolean;
            }) => void;
            visible: boolean;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            fabStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            theme?: import("styled-components").DefaultTheme;
            testID?: string;
        }): JSX.Element;
        displayName: string;
    };
};
export default FAB;
