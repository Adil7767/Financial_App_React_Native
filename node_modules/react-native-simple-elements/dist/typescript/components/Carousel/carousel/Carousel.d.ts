import * as React from "react";
import { Animated, StyleProp, ViewStyle } from "react-native";
declare type Props = {
    data: any[];
    renderItem: (data: any, props: any) => React.ReactNode;
    itemWidth?: number;
    itemHeight?: number;
    sliderWidth?: number;
    sliderHeight?: number;
    activeAnimationType?: string;
    activeAnimationOptions?: Record<string, unknown>;
    activeSlideAlignment?: "center" | "end" | "start";
    activeSlideOffset?: number;
    apparitionDelay?: number;
    autoplay?: boolean;
    autoplayDelay?: number;
    autoplayInterval?: number;
    callbackOffsetMargin?: number;
    containerCustomStyle?: StyleProp<ViewStyle>;
    contentContainerCustomStyle?: StyleProp<ViewStyle>;
    enableMomentum?: boolean;
    enableSnap?: boolean;
    firstItem?: number;
    hasParallaxImages?: boolean;
    inactiveSlideOpacity?: number;
    inactiveSlideScale?: number;
    inactiveSlideShift?: number;
    layout?: "default" | "stack" | "tinder";
    layoutCardOffset?: number;
    lockScrollTimeoutDuration?: number;
    lockScrollWhileSnapping?: boolean;
    loop?: boolean;
    loopClonesPerSide?: number;
    scrollEnabled?: boolean;
    scrollInterpolator?: (index: any, props: any) => void;
    slideInterpolatedStyle?: (index: any, animatedValue: any, props: any) => void;
    slideStyle?: StyleProp<ViewStyle>;
    swipeThreshold?: number;
    useScrollView?: boolean | (() => void);
    vertical?: boolean;
    onBeforeSnapToItem?: (index: any) => void;
    onSnapToItem?: (index?: any) => void;
    onScroll?: (evt: any) => void;
    keyExtractor?: string | (() => void);
    onTouchStart?: (evt?: any) => void;
    onTouchEnd?: (evt?: any) => void;
    onScrollBeginDrag?: (evt: any) => void;
    onScrollEndDrag?: (evt: any) => void;
    style?: Record<string, unknown>;
    customAnimationType?: string;
    customAnimationOptions?: Record<string, unknown>;
    onScrollViewScroll?: (evt: any) => void;
    onStartShouldSetResponderCapture?: (evt: any) => void;
    onMomentumScrollEnd?: (evt?: any) => void;
    onLayout?: (evt?: any) => void;
};
declare type State = {
    hideCarousel: boolean;
    interpolators: any[];
};
export default class Carousel extends React.PureComponent<Props, State> {
    static defaultProps: {
        activeAnimationType: string;
        activeAnimationOptions: any;
        activeSlideAlignment: string;
        activeSlideOffset: number;
        apparitionDelay: number;
        autoplay: boolean;
        autoplayDelay: number;
        autoplayInterval: number;
        callbackOffsetMargin: number;
        containerCustomStyle: {};
        contentContainerCustomStyle: {};
        enableMomentum: boolean;
        enableSnap: boolean;
        firstItem: number;
        hasParallaxImages: boolean;
        inactiveSlideOpacity: number;
        inactiveSlideScale: number;
        inactiveSlideShift: number;
        layout: string;
        lockScrollTimeoutDuration: number;
        lockScrollWhileSnapping: boolean;
        loop: boolean;
        loopClonesPerSide: number;
        scrollEnabled: boolean;
        slideStyle: {};
        swipeThreshold: number;
        useScrollView: boolean;
        vertical: boolean;
    };
    state: State;
    _activeItem: number;
    _previousActiveItem: number;
    _previousFirstItem: number;
    _previousItemsLength: number;
    _mounted: boolean;
    _positions: any[];
    _currentContentOffset: number;
    _canFireBeforeCallback: boolean;
    _canFireCallback: boolean;
    _scrollOffsetRef: any;
    _onScrollTriggered: boolean;
    _lastScrollDate: number;
    _scrollEnabled: boolean;
    _ignoreNextMomentum: boolean;
    _carouselRef: any;
    _scrollPos: Animated.Value;
    _onScrollHandler: any;
    _apparitionTimeout: any;
    _hackSlideAnimationTimeout: any;
    _enableAutoplayTimeout: any;
    _autoplayTimeout: any;
    _snapNoMomentumTimeout: any;
    _edgeItemTimeout: any;
    _lockScrollTimeout: any;
    _autoplayInterval: any;
    _itemToSnapTo: number;
    _autoplay: boolean;
    _autoplaying: boolean;
    _scrollStartOffset: number;
    _scrollStartActive: number;
    _scrollEndOffset: number;
    _scrollEndActive: number;
    _onLayoutInitDone: boolean;
    constructor(props: any);
    componentDidMount(): void;
    componentDidUpdate(prevProps: any): void;
    componentWillUnmount(): void;
    get realIndex(): number;
    get currentIndex(): any;
    get currentScrollPosition(): number;
    _setScrollHandler(props: any): void;
    _needsScrollView(): boolean | (() => void);
    _needsRTLAdaptations(): boolean;
    _canLockScroll(): boolean;
    _enableLoop(): boolean;
    _shouldAnimateSlides(props?: Readonly<Props> & Readonly<{
        children?: React.ReactNode;
    }>): boolean;
    _shouldUseCustomAnimation(): boolean;
    _shouldUseShiftLayout(): boolean;
    _shouldUseStackLayout(): boolean;
    _shouldUseTinderLayout(): boolean;
    _getCustomData(props?: Readonly<Props> & Readonly<{
        children?: React.ReactNode;
    }>): any[];
    _getCustomDataLength(props?: Readonly<Props> & Readonly<{
        children?: React.ReactNode;
    }>): number;
    _getCustomIndex(index: any, props?: Readonly<Props> & Readonly<{
        children?: React.ReactNode;
    }>): any;
    _getDataIndex(index: any): any;
    _getPositionIndex(index: any): any;
    _getFirstItem(index: any, props?: Readonly<Props> & Readonly<{
        children?: React.ReactNode;
    }>): any;
    _getWrappedRef(): any;
    _getScrollEnabled(): boolean;
    _setScrollEnabled(scrollEnabled?: boolean): void;
    _getKeyExtractor(item: any, index: any): string;
    _getScrollOffset(event: any): any;
    _getContainerInnerMargin(opposite?: boolean): number;
    _getViewportOffset(): number;
    _getCenter(offset: any): number;
    _getActiveItem(offset: any): number;
    _initPositionsAndInterpolators(props?: Readonly<Props> & Readonly<{
        children?: React.ReactNode;
    }>): void;
    _getSlideAnimation(index: any, toValue: any): Animated.CompositeAnimation;
    _playCustomSlideAnimation(current: any, next: any): void;
    _hackActiveSlideAnimation(index: any, goTo: any, force?: boolean): void;
    _lockScroll(): void;
    _releaseScroll(): void;
    _repositionScroll(index: any): void;
    _scrollTo(offset: any, animated?: boolean): void;
    _onScroll(event?: any): void;
    _onStartShouldSetResponderCapture(event: any): boolean;
    _onTouchStart(): void;
    _onTouchEnd(): void;
    _onScrollBeginDrag(event: any): void;
    _onScrollEndDrag(event: any): void;
    _onMomentumScrollEnd(event: any): void;
    _onScrollEnd(event?: any): void;
    _onTouchRelease(event: any): void;
    _onLayout(event: any): void;
    _snapScroll(delta: any): void;
    _snapToItem(index: any, animated?: boolean, fireCallback?: boolean, initial?: boolean, lockScroll?: boolean): void;
    _onBeforeSnap(index: any): void;
    _onSnap(index: any): void;
    startAutoplay(): void;
    pauseAutoPlay(): void;
    stopAutoplay(): void;
    snapToItem(index: any, animated?: boolean, fireCallback?: boolean): void;
    snapToNext(animated?: boolean, fireCallback?: boolean): void;
    snapToPrev(animated?: boolean, fireCallback?: boolean): void;
    triggerRenderingHack(offset: any): void;
    _getSlideInterpolatedStyle(index: any, animatedValue: any): void | {};
    _renderItem({ item, index }: {
        item: any;
        index: any;
    }): JSX.Element;
    _getComponentOverridableProps: () => any;
    _getComponentStaticProps(): {
        renderItem: ({ item, index }: {
            item: any;
            index: any;
        }) => JSX.Element;
        numColumns: number;
        keyExtractor: string | (() => void) | ((item: any, index: any) => string);
        ref: (c: any) => any;
        data: any[];
        style: (ViewStyle | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<false | ViewStyle | import("react-native").RegisteredStyle<ViewStyle>> | Record<string, unknown>)[];
        contentContainerStyle: (ViewStyle | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<false | ViewStyle | import("react-native").RegisteredStyle<ViewStyle>>)[];
        horizontal: boolean;
        scrollEventThrottle: number;
        onScroll: any;
        onScrollBeginDrag: (event: any) => void;
        onScrollEndDrag: (event: any) => void;
        onMomentumScrollEnd: (event: any) => void;
        onResponderRelease: (event: any) => void;
        onStartShouldSetResponderCapture: (event: any) => boolean;
        onTouchStart: () => void;
        onTouchEnd: (event?: any) => void;
        onLayout: (event: any) => void;
    } | {
        renderItem?: undefined;
        numColumns?: undefined;
        keyExtractor?: undefined;
        ref: (c: any) => any;
        data: any[];
        style: (ViewStyle | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<false | ViewStyle | import("react-native").RegisteredStyle<ViewStyle>> | Record<string, unknown>)[];
        contentContainerStyle: (ViewStyle | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<false | ViewStyle | import("react-native").RegisteredStyle<ViewStyle>>)[];
        horizontal: boolean;
        scrollEventThrottle: number;
        onScroll: any;
        onScrollBeginDrag: (event: any) => void;
        onScrollEndDrag: (event: any) => void;
        onMomentumScrollEnd: (event: any) => void;
        onResponderRelease: (event: any) => void;
        onStartShouldSetResponderCapture: (event: any) => boolean;
        onTouchStart: () => void;
        onTouchEnd: (event?: any) => void;
        onLayout: (event: any) => void;
    };
    render(): JSX.Element;
}
export {};
