{"version":3,"sources":["BottomNavigation.tsx"],"names":["React","View","Animated","TouchableWithoutFeedback","StyleSheet","Platform","Keyboard","ThemeContext","getBottomSpace","color","overlay","SvgIcon","Surface","Badge","TouchableRipple","Text","black","white","useAnimatedValue","useAnimatedValueArray","useLayout","MIN_RIPPLE_SCALE","MIN_TAB_WIDTH","MAX_TAB_WIDTH","BAR_HEIGHT","BOTTOM_INSET","FAR_FAR_AWAY","OS","Touchable","route","_0","style","children","borderless","centered","rippleColor","rest","supported","SceneComponent","memo","component","createElement","BottomNavigation","navigationState","renderScene","renderIcon","renderLabel","renderTouchable","props","getLabelText","title","getBadge","badge","getColor","getAccessibilityLabel","accessibilityLabel","getTestID","testID","activeColor","inactiveColor","keyboardHidesNavigationBar","barStyle","labeled","sceneAnimationEnabled","onTabPress","onIndexChange","shifting","routes","length","theme","useContext","scale","animation","focusedKey","index","key","visibleAnim","tabsAnims","map","_","i","offsetsAnims","indexAnim","rippleAnim","layout","onLayout","loaded","setLoaded","useState","includes","keyboardVisible","setKeyboardVisible","handleKeyboardShow","useCallback","timing","toValue","duration","useNativeDriver","start","handleKeyboardHide","animateToIndex","setValue","parallel","finished","tab","forEach","offset","useEffect","addListener","removeListener","prevNavigationState","useRef","current","handleTabPress","event","defaultPrevented","preventDefault","jumpTo","findIndex","colors","dark","isDarkTheme","mode","backgroundColor","customBackground","elevation","flatten","approxBackgroundColor","surface","primary","interpolate","inputRange","outputRange","isDark","isLight","textColor","activeTintColor","inactiveTintColor","alpha","rgb","string","touchColor","maxTabWidth","maxTabBarWidth","tabBarWidth","Math","min","width","tabWidth","rippleSize","styles","container","content","background","focused","opacity","top","absoluteFill","bar","transform","translateY","height","position","measured","barContent","items","marginBottom","maxWidth","ripple","left","borderRadius","active","activeOpacity","inactiveOpacity","onPress","accessibilityRole","accessibilityState","selected","item","iconContainer","iconWrapper","icon","badgeContainer","right","String","labelContainer","labelWrapper","label","SceneMap","scenes","create","flex","overflow","bottom","alignItems","flexDirection","paddingVertical","marginTop","marginHorizontal","alignSelf","absoluteFillObject","paddingBottom","fontSize","textAlign","whiteSpace"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    View,\r\n    Animated,\r\n    TouchableWithoutFeedback,\r\n    TouchableWithoutFeedbackProps,\r\n    StyleSheet,\r\n    StyleProp,\r\n    Platform,\r\n    Keyboard,\r\n    ViewStyle,\r\n} from \"react-native\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\nimport { getBottomSpace } from \"react-native-iphone-x-helper\";\r\nimport color from \"color\";\r\nimport overlay from \"../theme/overlay\";\r\nimport { SvgIcon } from \"../Icon\";\r\nimport Surface from \"../Surface\";\r\nimport Badge from \"../Badge\";\r\nimport TouchableRipple from \"../TouchableRipple\";\r\nimport Text from \"../Text\";\r\nimport { black, white } from \"../theme/colors\";\r\nimport useAnimatedValue from \"../utils/useAnimatedValue\";\r\nimport useAnimatedValueArray from \"../utils/useAnimatedValueArray\";\r\nimport useLayout from \"../utils/useLayout\";\r\n\r\ntype Route = {\r\n    key: string;\r\n    title?: string;\r\n    icon?: React.ReactElement;\r\n    badge?: string | number | boolean;\r\n    color?: string;\r\n    accessibilityLabel?: string;\r\n    testID?: string;\r\n};\r\n\r\ntype NavigationState = {\r\n    index: number;\r\n    routes: Route[];\r\n};\r\n\r\ntype TabPressEvent = {\r\n    defaultPrevented: boolean;\r\n    preventDefault(): void;\r\n};\r\n\r\ntype TouchableProps = TouchableWithoutFeedbackProps & {\r\n    key: string;\r\n    route: Route;\r\n    children: React.ReactNode;\r\n    borderless?: boolean;\r\n    centered?: boolean;\r\n    rippleColor?: string;\r\n};\r\n\r\ntype Props = {\r\n    /**\r\n     * Whether the shifting style is used, the active tab icon shifts up to show the label and the inactive tabs won't have a label.\r\n     *\r\n     * By default, this is `true` when you have more than 3 tabs.\r\n     * Pass `shifting={false}` to explicitly disable this animation, or `shifting={true}` to always use this animation.\r\n     */\r\n    shifting?: boolean;\r\n    /**\r\n     * Whether to show labels in tabs. When `false`, only icons will be displayed.\r\n     */\r\n    labeled?: boolean;\r\n    /**\r\n     * State for the bottom navigation. The state should contain the following properties:\r\n     *\r\n     * - `index`: a number representing the index of the active route in the `routes` array\r\n     * - `routes`: an array containing a list of route objects used for rendering the tabs\r\n     *\r\n     * Each route object should contain the following properties:\r\n     *\r\n     * - `key`: a unique key to identify the route (required)\r\n     * - `title`: title of the route to use as the tab label\r\n     * - `icon`: icon to use as the tab icon, can be a string, an image source or a react component\r\n     * - `color`: color to use as background color for shifting bottom navigation\r\n     * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\r\n     * - `accessibilityLabel`: accessibility label for the tab button\r\n     * - `testID`: test id for the tab button\r\n     *\r\n     * Example:\r\n     *\r\n     * ```js\r\n     * {\r\n     *   index: 1,\r\n     *   routes: [\r\n     *     { key: 'music', title: 'Music', icon: 'queue-music', color: '#3F51B5' },\r\n     *     { key: 'albums', title: 'Albums', icon: 'album', color: '#009688' },\r\n     *     { key: 'recents', title: 'Recents', icon: 'history', color: '#795548' },\r\n     *     { key: 'purchased', title: 'Purchased', icon: 'shopping-cart', color: '#607D8B' },\r\n     *   ]\r\n     * }\r\n     * ```\r\n     *\r\n     * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\r\n     */\r\n    navigationState: NavigationState;\r\n    /**\r\n     * Callback which is called on tab change, receives the index of the new tab as argument.\r\n     * The navigation state needs to be updated when it's called, otherwise the change is dropped.\r\n     */\r\n    onIndexChange: (index: number) => void;\r\n    /**\r\n     * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\r\n     *\r\n     * ```js\r\n     * renderScene = ({ route, jumpTo }) => {\r\n     *   switch (route.key) {\r\n     *     case 'music':\r\n     *       return <MusicRoute jumpTo={jumpTo} />;\r\n     *     case 'albums':\r\n     *       return <AlbumsRoute jumpTo={jumpTo} />;\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\r\n     * After initial render, all the pages stay rendered to preserve their state.\r\n     *\r\n     * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\r\n     * To make it easier to specify the components, you can use the `SceneMap` helper:\r\n     *\r\n     * ```js\r\n     * renderScene = BottomNavigation.SceneMap({\r\n     *   music: MusicRoute,\r\n     *   albums: AlbumsRoute,\r\n     * });\r\n     * ```\r\n     *\r\n     * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\r\n     * Each component will receive the current route and a `jumpTo` method as it's props.\r\n     * The `jumpTo` method can be used to navigate to other tabs programmatically:\r\n     *\r\n     * ```js\r\n     * this.props.jumpTo('albums')\r\n     * ```\r\n     */\r\n    renderScene: (props: {\r\n        route: Route;\r\n        jumpTo: (key: string) => void;\r\n    }) => React.ReactNode | null;\r\n    /**\r\n     * Callback which returns a React Element to be used as tab icon.\r\n     */\r\n    renderIcon?: (props: {\r\n        route: Route;\r\n        focused: boolean;\r\n        color: string;\r\n    }) => React.ReactNode;\r\n    /**\r\n     * Callback which React Element to be used as tab label.\r\n     */\r\n    renderLabel?: (props: {\r\n        route: Route;\r\n        focused: boolean;\r\n        color: string;\r\n    }) => React.ReactNode;\r\n    /**\r\n     * Callback which returns a React element to be used as the touchable for the tab item.\r\n     * Renders a `TouchableRipple` on Android and `TouchableWithoutFeedback` with `View` on iOS.\r\n     */\r\n    renderTouchable?: (props: TouchableProps) => React.ReactNode;\r\n    /**\r\n     * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\r\n     */\r\n    getLabelText?: (props: { route: Route }) => string | undefined;\r\n    /**\r\n     * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\r\n     * Uses `route.accessibilityLabel` by default.\r\n     */\r\n    getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\r\n    /**\r\n     * Get the id to locate this tab button in tests, uses `route.testID` by default.\r\n     */\r\n    getTestID?: (props: { route: Route }) => string | undefined;\r\n    /**\r\n     * Get badge for the tab, uses `route.badge` by default.\r\n     */\r\n    getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\r\n    /**\r\n     * Get color for the tab, uses `route.color` by default.\r\n     */\r\n    getColor?: (props: { route: Route }) => string | undefined;\r\n    /**\r\n     * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\r\n     */\r\n    onTabPress?: (props: { route: Route } & TabPressEvent) => void;\r\n    /**\r\n     * Custom color for icon and label in the active tab.\r\n     */\r\n    activeColor?: string;\r\n    /**\r\n     * Custom color for icon and label in the inactive tab.\r\n     */\r\n    inactiveColor?: string;\r\n    /**\r\n     * Whether animation is enabled for scenes transitions in `shifting` mode.\r\n     * By default, the scenes cross-fade during tab change when `shifting` is enabled.\r\n     * Specify `sceneAnimationEnabled` as `false` to disable the animation.\r\n     */\r\n    sceneAnimationEnabled?: boolean;\r\n    /**\r\n     * Whether the bottom navigation bar is hidden when keyboard is shown.\r\n     * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\r\n     */\r\n    keyboardHidesNavigationBar?: boolean;\r\n    /**\r\n     * Style for the bottom navigation bar.  You can pass a custom background color here:\r\n     *\r\n     * ```js\r\n     * barStyle={{ backgroundColor: '#694fad' }}\r\n     * ```\r\n     *\r\n     * If you have a translucent navigation bar on Android, you can also set a bottom padding here:\r\n     *\r\n     * ```js\r\n     * barStyle={{ paddingBottom: 48 }}\r\n     * ```\r\n     */\r\n    barStyle?: StyleProp<ViewStyle>;\r\n    style?: StyleProp<ViewStyle>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n};\r\n\r\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\r\nconst MIN_TAB_WIDTH = 96;\r\nconst MAX_TAB_WIDTH = 168;\r\nconst BAR_HEIGHT = 56;\r\nconst BOTTOM_INSET = getBottomSpace();\r\nconst FAR_FAR_AWAY = Platform.OS === \"web\" ? 0 : 9999;\r\n\r\nconst Touchable = ({\r\n    route: _0,\r\n    style,\r\n    children,\r\n    borderless,\r\n    centered,\r\n    rippleColor,\r\n    ...rest\r\n}: TouchableProps) =>\r\n    TouchableRipple.supported ? (\r\n        <TouchableRipple\r\n            {...rest}\r\n            borderless={borderless}\r\n            centered={centered}\r\n            rippleColor={rippleColor}\r\n            style={style}\r\n        >\r\n            {children}\r\n        </TouchableRipple>\r\n    ) : (\r\n        <TouchableWithoutFeedback {...rest}>\r\n            <View style={style}>{children}</View>\r\n        </TouchableWithoutFeedback>\r\n    );\r\n\r\nconst SceneComponent = React.memo(({ component, ...rest }: any) =>\r\n    React.createElement(component, rest)\r\n);\r\n\r\n/**\r\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\r\n * It is primarily designed for use on mobile.\r\n *\r\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tab-navigator](https://github.com/react-navigation/react-navigation-material-bottom-tab-navigator).\r\n *\r\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import BottomNavigation from 'react-native-simple-elements/components/BottomNavigation';\r\n * import Text from \"react-native-simple-elements/components/Text\"\r\n *\r\n * const MusicRoute = () => <Text>Music</Text>;\r\n *\r\n * const AlbumsRoute = () => <Text>Albums</Text>;\r\n *\r\n * const RecentsRoute = () => <Text>Recents</Text>;\r\n *\r\n * const MyComponent = () => {\r\n *   const [index, setIndex] = React.useState(0);\r\n *   const [routes] = React.useState([\r\n *     { key: 'music', title: 'Music', icon: 'queue-music' },\r\n *     { key: 'albums', title: 'Albums', icon: 'album' },\r\n *     { key: 'recents', title: 'Recents', icon: 'history' },\r\n *   ]);\r\n *\r\n *   const renderScene = BottomNavigation.SceneMap({\r\n *     music: MusicRoute,\r\n *     albums: AlbumsRoute,\r\n *     recents: RecentsRoute,\r\n *   });\r\n *\r\n *   return (\r\n *     <BottomNavigation\r\n *       navigationState={{ index, routes }}\r\n *       onIndexChange={setIndex}\r\n *       renderScene={renderScene}\r\n *     />\r\n *   );\r\n * };\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst BottomNavigation = ({\r\n    navigationState,\r\n    renderScene,\r\n    renderIcon,\r\n    renderLabel,\r\n    renderTouchable = (props: TouchableProps) => <Touchable {...props} />,\r\n    getLabelText = ({ route }: { route: Route }) => route.title,\r\n    getBadge = ({ route }: { route: Route }) => route.badge,\r\n    getColor = ({ route }: { route: Route }) => route.color,\r\n    getAccessibilityLabel = ({ route }: { route: Route }) =>\r\n        route.accessibilityLabel,\r\n    getTestID = ({ route }: { route: Route }) => route.testID,\r\n    activeColor,\r\n    inactiveColor,\r\n    keyboardHidesNavigationBar = true,\r\n    barStyle,\r\n    labeled = true,\r\n    style,\r\n    sceneAnimationEnabled = false,\r\n    onTabPress,\r\n    onIndexChange,\r\n    shifting = navigationState.routes.length > 3,\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n    const { scale } = theme.animation;\r\n\r\n    const focusedKey = navigationState.routes[navigationState.index].key;\r\n\r\n    /**\r\n     * Visibility of the navigation bar, visible state is 1 and invisible is 0.\r\n     */\r\n    const visibleAnim = useAnimatedValue(1);\r\n\r\n    /**\r\n     * Active state of individual tab items, active state is 1 and inactive state is 0.\r\n     */\r\n    const tabsAnims = useAnimatedValueArray(\r\n        navigationState.routes.map(\r\n            // focused === 1, unfocused === 0\r\n            (_, i) => (i === navigationState.index ? 1 : 0)\r\n        )\r\n    );\r\n\r\n    /**\r\n     * The top offset for each tab item to position it offscreen.\r\n     * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\r\n     * We use animated values for this to prevent unnecessary re-renders.\r\n     */\r\n    const offsetsAnims = useAnimatedValueArray(\r\n        navigationState.routes.map(\r\n            // offscreen === 1, normal === 0\r\n            (_, i) => (i === navigationState.index ? 0 : 1)\r\n        )\r\n    );\r\n\r\n    /**\r\n     * Index of the currently active tab. Used for setting the background color.\r\n     * We don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\r\n     */\r\n    const indexAnim = useAnimatedValue(navigationState.index);\r\n\r\n    /**\r\n     * Animation for the background color ripple, used to determine it's scale and opacity.\r\n     */\r\n    const rippleAnim = useAnimatedValue(MIN_RIPPLE_SCALE);\r\n\r\n    /**\r\n     * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\r\n     */\r\n    const [layout, onLayout] = useLayout();\r\n\r\n    /**\r\n     * List of loaded tabs, tabs will be loaded when navigated to.\r\n     */\r\n    const [loaded, setLoaded] = React.useState<string[]>([focusedKey]);\r\n\r\n    if (!loaded.includes(focusedKey)) {\r\n        // Set the current tab to be loaded if it was not loaded before\r\n        setLoaded((loaded) => [...loaded, focusedKey]);\r\n    }\r\n\r\n    /**\r\n     * Track whether the keyboard is visible to show and hide the navigation bar.\r\n     */\r\n    const [keyboardVisible, setKeyboardVisible] = React.useState(false);\r\n\r\n    const handleKeyboardShow = React.useCallback(() => {\r\n        setKeyboardVisible(true);\r\n        Animated.timing(visibleAnim, {\r\n            toValue: 0,\r\n            duration: 150 * scale,\r\n            useNativeDriver: true,\r\n        }).start();\r\n    }, [scale, visibleAnim]);\r\n\r\n    const handleKeyboardHide = React.useCallback(() => {\r\n        Animated.timing(visibleAnim, {\r\n            toValue: 1,\r\n            duration: 100 * scale,\r\n            useNativeDriver: true,\r\n        }).start(() => {\r\n            setKeyboardVisible(false);\r\n        });\r\n    }, [scale, visibleAnim]);\r\n\r\n    const animateToIndex = React.useCallback(\r\n        (index: number) => {\r\n            // Reset the ripple to avoid glitch if it's currently animating\r\n            rippleAnim.setValue(MIN_RIPPLE_SCALE);\r\n\r\n            Animated.parallel([\r\n                Animated.timing(rippleAnim, {\r\n                    toValue: 1,\r\n                    duration: shifting ? 400 * scale : 0,\r\n                    useNativeDriver: true,\r\n                }),\r\n                ...navigationState.routes.map((_, i) =>\r\n                    Animated.timing(tabsAnims[i], {\r\n                        toValue: i === index ? 1 : 0,\r\n                        duration: shifting ? 150 * scale : 0,\r\n                        useNativeDriver: true,\r\n                    })\r\n                ),\r\n            ]).start(({ finished }) => {\r\n                // Workaround a bug in native animations where this is reset after first animation\r\n                tabsAnims.map((tab, i) => tab.setValue(i === index ? 1 : 0));\r\n\r\n                // Update the index to change bar's background color and then hide the ripple\r\n                indexAnim.setValue(index);\r\n                rippleAnim.setValue(MIN_RIPPLE_SCALE);\r\n\r\n                if (finished) {\r\n                    // Position all inactive screens offscreen to save memory usage\r\n                    // Only do it when animation has finished to avoid glitches mid-transition if switching fast\r\n                    offsetsAnims.forEach((offset, i) => {\r\n                        if (i === index) {\r\n                            offset.setValue(0);\r\n                        } else {\r\n                            offset.setValue(1);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        },\r\n        [\r\n            indexAnim,\r\n            shifting,\r\n            navigationState.routes,\r\n            offsetsAnims,\r\n            rippleAnim,\r\n            scale,\r\n            tabsAnims,\r\n        ]\r\n    );\r\n\r\n    React.useEffect(() => {\r\n        // Workaround for native animated bug in react-native@^0.57\r\n        // Context: https://github.com/react-native-simple-widgets/react-native-simple-elements/pull/637\r\n        animateToIndex(navigationState.index);\r\n    }, [navigationState.index]);\r\n\r\n    React.useEffect(() => {\r\n        if (Platform.OS === \"ios\") {\r\n            Keyboard.addListener(\"keyboardWillShow\", handleKeyboardShow);\r\n            Keyboard.addListener(\"keyboardWillHide\", handleKeyboardHide);\r\n        } else {\r\n            Keyboard.addListener(\"keyboardDidShow\", handleKeyboardShow);\r\n            Keyboard.addListener(\"keyboardDidHide\", handleKeyboardHide);\r\n        }\r\n\r\n        return () => {\r\n            if (Platform.OS === \"ios\") {\r\n                Keyboard.removeListener(\"keyboardWillShow\", handleKeyboardShow);\r\n                Keyboard.removeListener(\"keyboardWillHide\", handleKeyboardHide);\r\n            } else {\r\n                Keyboard.removeListener(\"keyboardDidShow\", handleKeyboardShow);\r\n                Keyboard.removeListener(\"keyboardDidHide\", handleKeyboardHide);\r\n            }\r\n        };\r\n    }, [handleKeyboardHide, handleKeyboardShow]);\r\n\r\n    const prevNavigationState = React.useRef<NavigationState>();\r\n\r\n    React.useEffect(() => {\r\n        // Reset offsets of previous and current tabs before animation\r\n        offsetsAnims.forEach((offset, i) => {\r\n            if (\r\n                i === navigationState.index ||\r\n                i === prevNavigationState.current?.index\r\n            ) {\r\n                offset.setValue(0);\r\n            }\r\n        });\r\n\r\n        animateToIndex(navigationState.index);\r\n    }, [navigationState.index, animateToIndex, offsetsAnims]);\r\n\r\n    const handleTabPress = (index: number) => {\r\n        const event = {\r\n            route: navigationState.routes[index],\r\n            defaultPrevented: false,\r\n            preventDefault: () => {\r\n                event.defaultPrevented = true;\r\n            },\r\n        };\r\n\r\n        onTabPress?.(event);\r\n\r\n        if (event.defaultPrevented) {\r\n            return;\r\n        }\r\n\r\n        if (index !== navigationState.index) {\r\n            onIndexChange(index);\r\n        }\r\n    };\r\n\r\n    const jumpTo = React.useCallback(\r\n        (key: string) => {\r\n            const index = navigationState.routes.findIndex(\r\n                (route) => route.key === key\r\n            );\r\n\r\n            onIndexChange(index);\r\n        },\r\n        [navigationState.routes, onIndexChange]\r\n    );\r\n\r\n    const { routes } = navigationState;\r\n    const { colors, dark: isDarkTheme, mode } = theme;\r\n\r\n    const { backgroundColor: customBackground, elevation = 4 }: ViewStyle =\r\n        StyleSheet.flatten(barStyle) || {};\r\n\r\n    const approxBackgroundColor = customBackground\r\n        ? customBackground\r\n        : isDarkTheme && mode === \"adaptive\"\r\n            ? overlay(elevation, colors.surface)\r\n            : colors.primary;\r\n\r\n    const backgroundColor = shifting\r\n        ? indexAnim.interpolate({\r\n            inputRange: routes.map((_, i) => i),\r\n            //@ts-ignore\r\n            outputRange: routes.map(\r\n                (route) => getColor({ route }) || approxBackgroundColor\r\n            ),\r\n        })\r\n        : approxBackgroundColor;\r\n\r\n    const isDark = !color(approxBackgroundColor as any).isLight();\r\n\r\n    const textColor = isDark ? white : black;\r\n    const activeTintColor =\r\n        typeof activeColor !== \"undefined\" ? activeColor : textColor;\r\n    const inactiveTintColor =\r\n        typeof inactiveColor !== \"undefined\"\r\n            ? inactiveColor\r\n            : color(textColor).alpha(0.5).rgb().string();\r\n\r\n    const touchColor = color(activeColor || activeTintColor)\r\n        .alpha(0.12)\r\n        .rgb()\r\n        .string();\r\n\r\n    const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\r\n    const maxTabBarWidth = maxTabWidth * routes.length;\r\n\r\n    const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\r\n    const tabWidth = tabBarWidth / routes.length;\r\n\r\n    const rippleSize = layout.width / 4;\r\n\r\n    return (\r\n        <View style={[styles.container, style]}>\r\n            <View style={[styles.content, { backgroundColor: colors.background }]}>\r\n                {routes.map((route, index) => {\r\n                    if (!loaded.includes(route.key)) {\r\n                        // Don't render a screen if we've never navigated to it\r\n                        return null;\r\n                    }\r\n\r\n                    const focused = navigationState.index === index;\r\n\r\n                    const opacity = sceneAnimationEnabled\r\n                        ? tabsAnims[index]\r\n                        : focused\r\n                            ? 1\r\n                            : 0;\r\n\r\n                    const top = offsetsAnims[index].interpolate({\r\n                        inputRange: [0, 1],\r\n                        outputRange: [0, FAR_FAR_AWAY],\r\n                    });\r\n\r\n                    return (\r\n                        <Animated.View\r\n                            key={route.key}\r\n                            pointerEvents={focused ? \"auto\" : \"none\"}\r\n                            accessibilityElementsHidden={!focused}\r\n                            importantForAccessibility={\r\n                                focused ? \"auto\" : \"no-hide-descendants\"\r\n                            }\r\n                            style={[StyleSheet.absoluteFill, { opacity }]}\r\n                            collapsable={false}\r\n                            removeClippedSubviews={\r\n                                // On iOS, set removeClippedSubviews to true only when not focused\r\n                                // This is an workaround for a bug where the clipped view never re-appears\r\n                                Platform.OS === \"ios\" ? navigationState.index !== index : true\r\n                            }\r\n                        >\r\n                            <Animated.View style={[styles.content, { top }]}>\r\n                                {renderScene({ route, jumpTo })}\r\n                            </Animated.View>\r\n                        </Animated.View>\r\n                    );\r\n                })}\r\n            </View>\r\n            <Surface\r\n                style={\r\n                    [\r\n                        styles.bar,\r\n                        keyboardHidesNavigationBar\r\n                            ? {\r\n                                // When the keyboard is shown, slide down the navigation bar\r\n                                transform: [\r\n                                    {\r\n                                        translateY: visibleAnim.interpolate({\r\n                                            inputRange: [0, 1],\r\n                                            outputRange: [layout.height, 0],\r\n                                        }),\r\n                                    },\r\n                                ],\r\n                                // Absolutely position the navigation bar so that the content is below it\r\n                                // This is needed to avoid gap at bottom when the navigation bar is hidden\r\n                                position: keyboardVisible ? \"absolute\" : null,\r\n                            }\r\n                            : null,\r\n                        barStyle,\r\n                    ] as StyleProp<ViewStyle>\r\n                }\r\n                pointerEvents={\r\n                    layout.measured\r\n                        ? keyboardHidesNavigationBar && keyboardVisible\r\n                            ? \"none\"\r\n                            : \"auto\"\r\n                        : \"none\"\r\n                }\r\n                onLayout={onLayout}\r\n            >\r\n                <Animated.View style={[styles.barContent, { backgroundColor }]}>\r\n                    <View\r\n                        style={[\r\n                            styles.items,\r\n                            { marginBottom: BOTTOM_INSET, maxWidth: maxTabBarWidth },\r\n                        ]}\r\n                    >\r\n                        {shifting ? (\r\n                            <Animated.View\r\n                                pointerEvents=\"none\"\r\n                                style={[\r\n                                    styles.ripple,\r\n                                    {\r\n                                        // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\r\n                                        // We need to move it from the top to center of the navigation bar and from the left to the active tab.\r\n                                        top: (BAR_HEIGHT - rippleSize) / 2,\r\n                                        left:\r\n                                            tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\r\n                                        height: rippleSize,\r\n                                        width: rippleSize,\r\n                                        borderRadius: rippleSize / 2,\r\n                                        backgroundColor: getColor({\r\n                                            route: routes[navigationState.index],\r\n                                        }),\r\n                                        transform: [\r\n                                            {\r\n                                                // Scale to twice the size  to ensure it covers the whole navigation bar\r\n                                                scale: rippleAnim.interpolate({\r\n                                                    inputRange: [0, 1],\r\n                                                    outputRange: [0, 8],\r\n                                                }),\r\n                                            },\r\n                                        ],\r\n                                        opacity: rippleAnim.interpolate({\r\n                                            inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\r\n                                            outputRange: [0, 0, 1, 1],\r\n                                        }),\r\n                                    },\r\n                                ]}\r\n                            />\r\n                        ) : null}\r\n                        {routes.map((route, index) => {\r\n                            // const focused = navigationState.index === index;\r\n                            const active = tabsAnims[index];\r\n\r\n                            // Scale the label up\r\n                            const scale =\r\n                                labeled && shifting\r\n                                    ? active.interpolate({\r\n                                        inputRange: [0, 1],\r\n                                        outputRange: [0.5, 1],\r\n                                    })\r\n                                    : 1;\r\n\r\n                            // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\r\n                            const translateY = labeled\r\n                                ? shifting\r\n                                    ? active.interpolate({\r\n                                        inputRange: [0, 1],\r\n                                        outputRange: [7, 0],\r\n                                    })\r\n                                    : 0\r\n                                : 7;\r\n\r\n                            // We render the active icon and label on top of inactive ones and cross-fade them on change.\r\n                            // This trick gives the illusion that we are animating between active and inactive colors.\r\n                            // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\r\n                            const activeOpacity = active;\r\n                            const inactiveOpacity = active.interpolate({\r\n                                inputRange: [0, 1],\r\n                                outputRange: [1, 0],\r\n                            });\r\n\r\n                            const badge = getBadge({ route });\r\n\r\n                            return renderTouchable({\r\n                                key: route.key,\r\n                                route,\r\n                                borderless: true,\r\n                                centered: true,\r\n                                rippleColor: touchColor,\r\n                                onPress: () => handleTabPress(index),\r\n                                testID: getTestID({ route }),\r\n                                accessibilityLabel: getAccessibilityLabel({ route }),\r\n                                // accessibilityTraits: focused\r\n                                //     ? ['button', 'selected']\r\n                                //     : 'button',\r\n                                // accessibilityComponentType: 'button',\r\n                                accessibilityRole: \"button\",\r\n                                accessibilityState: { selected: true },\r\n                                style: styles.item,\r\n                                children: (\r\n                                    <View pointerEvents=\"none\">\r\n                                        <Animated.View\r\n                                            style={[\r\n                                                styles.iconContainer,\r\n                                                { transform: [{ translateY }] },\r\n                                            ]}\r\n                                        >\r\n                                            <Animated.View\r\n                                                style={[styles.iconWrapper, { opacity: activeOpacity }]}\r\n                                            >\r\n                                                {renderIcon ? (\r\n                                                    renderIcon({\r\n                                                        route,\r\n                                                        focused: true,\r\n                                                        color: activeTintColor,\r\n                                                    })\r\n                                                ) : (\r\n                                                    <SvgIcon\r\n                                                        icon={route.icon}\r\n                                                        color={activeTintColor}\r\n                                                        size={24}\r\n                                                    />\r\n                                                )}\r\n                                            </Animated.View>\r\n                                            <Animated.View\r\n                                                style={[\r\n                                                    styles.iconWrapper,\r\n                                                    { opacity: inactiveOpacity },\r\n                                                ]}\r\n                                            >\r\n                                                {renderIcon ? (\r\n                                                    renderIcon({\r\n                                                        route,\r\n                                                        focused: false,\r\n                                                        color: inactiveTintColor,\r\n                                                    })\r\n                                                ) : (\r\n                                                    <SvgIcon\r\n                                                        icon={route.icon}\r\n                                                        color={inactiveTintColor}\r\n                                                        size={24}\r\n                                                    />\r\n                                                )}\r\n                                            </Animated.View>\r\n                                            <View\r\n                                                style={[\r\n                                                    styles.badgeContainer,\r\n                                                    {\r\n                                                        right:\r\n                                                            (badge != null && typeof badge !== \"boolean\"\r\n                                                                ? String(badge).length * -2\r\n                                                                : 0) - 2,\r\n                                                    },\r\n                                                ]}\r\n                                            >\r\n                                                {typeof badge === \"boolean\" ? (\r\n                                                    <Badge visible={badge} size={8} />\r\n                                                ) : (\r\n                                                    <Badge visible={badge != null} size={16}>\r\n                                                        {badge}\r\n                                                    </Badge>\r\n                                                )}\r\n                                            </View>\r\n                                        </Animated.View>\r\n                                        {labeled ? (\r\n                                            <Animated.View\r\n                                                style={[\r\n                                                    styles.labelContainer,\r\n                                                    { transform: [{ scale }] },\r\n                                                ]}\r\n                                            >\r\n                                                <Animated.View\r\n                                                    style={[\r\n                                                        styles.labelWrapper,\r\n                                                        { opacity: activeOpacity },\r\n                                                    ]}\r\n                                                >\r\n                                                    {renderLabel ? (\r\n                                                        renderLabel({\r\n                                                            route,\r\n                                                            focused: true,\r\n                                                            color: activeTintColor,\r\n                                                        })\r\n                                                    ) : (\r\n                                                        <Text\r\n                                                            style={[styles.label, { color: activeTintColor }]}\r\n                                                        >\r\n                                                            {getLabelText({ route })}\r\n                                                        </Text>\r\n                                                    )}\r\n                                                </Animated.View>\r\n                                                {shifting ? null : (\r\n                                                    <Animated.View\r\n                                                        style={[\r\n                                                            styles.labelWrapper,\r\n                                                            { opacity: inactiveOpacity },\r\n                                                        ]}\r\n                                                    >\r\n                                                        {renderLabel ? (\r\n                                                            renderLabel({\r\n                                                                route,\r\n                                                                focused: false,\r\n                                                                color: inactiveTintColor,\r\n                                                            })\r\n                                                        ) : (\r\n                                                            <Text\r\n                                                                selectable={false}\r\n                                                                style={[\r\n                                                                    styles.label,\r\n                                                                    { color: inactiveTintColor },\r\n                                                                ]}\r\n                                                            >\r\n                                                                {getLabelText({ route })}\r\n                                                            </Text>\r\n                                                        )}\r\n                                                    </Animated.View>\r\n                                                )}\r\n                                            </Animated.View>\r\n                                        ) : (\r\n                                            <View style={styles.labelContainer} />\r\n                                        )}\r\n                                    </View>\r\n                                ),\r\n                            });\r\n                        })}\r\n                    </View>\r\n                </Animated.View>\r\n            </Surface>\r\n        </View>\r\n    );\r\n};\r\n\r\n/**\r\n * Function which takes a map of route keys to components.\r\n * Pure components are used to minimize re-rendering of the pages.\r\n * This drastically improves the animation performance.\r\n */\r\nBottomNavigation.SceneMap = (scenes: {\r\n    [key: string]: React.ComponentType<{\r\n        route: Route;\r\n        jumpTo: (key: string) => void;\r\n    }>;\r\n}) => {\r\n    return ({\r\n        route,\r\n        jumpTo,\r\n    }: {\r\n        route: Route;\r\n        jumpTo: (key: string) => void;\r\n    }) => (\r\n        <SceneComponent\r\n            key={route.key}\r\n            component={scenes[route.key ? route.key : \"\"]}\r\n            route={route}\r\n            jumpTo={jumpTo}\r\n        />\r\n    );\r\n};\r\n\r\nexport default BottomNavigation;\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        overflow: \"hidden\",\r\n    },\r\n    content: {\r\n        flex: 1,\r\n    },\r\n    bar: {\r\n        left: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        elevation: 4,\r\n    },\r\n    barContent: {\r\n        alignItems: \"center\",\r\n        overflow: \"hidden\",\r\n    },\r\n    items: {\r\n        flexDirection: \"row\",\r\n        width: \"100%\",\r\n    },\r\n    item: {\r\n        flex: 1,\r\n        // Top padding is 6 and bottom padding is 10\r\n        // The extra 4dp bottom padding is offset by label's height\r\n        paddingVertical: 6,\r\n    },\r\n    ripple: {\r\n        position: \"absolute\",\r\n    },\r\n    iconContainer: {\r\n        height: 24,\r\n        width: 24,\r\n        marginTop: 2,\r\n        marginHorizontal: 12,\r\n        alignSelf: \"center\",\r\n    },\r\n    iconWrapper: {\r\n        ...StyleSheet.absoluteFillObject,\r\n        alignItems: \"center\",\r\n    },\r\n    labelContainer: {\r\n        height: 16,\r\n        paddingBottom: 2,\r\n    },\r\n    labelWrapper: {\r\n        ...StyleSheet.absoluteFillObject,\r\n    },\r\n    label: {\r\n        fontSize: 12,\r\n        textAlign: \"center\",\r\n        backgroundColor: \"transparent\",\r\n        ...(Platform.OS === \"web\"\r\n            ? {\r\n                whiteSpace: \"nowrap\",\r\n                alignSelf: \"center\",\r\n            }\r\n            : null),\r\n    },\r\n    badgeContainer: {\r\n        position: \"absolute\",\r\n        left: 0,\r\n        top: -2,\r\n    },\r\n});\r\n"]}