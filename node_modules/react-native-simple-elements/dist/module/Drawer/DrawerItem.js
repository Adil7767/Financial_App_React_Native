function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _templateObject3() {
  const data = _taggedTemplateLiteral(["\n    margin-right: 32px;\n"]);

  _templateObject3 = function () {
    return data;
  };

  return data;
}

function _templateObject2() {
  const data = _taggedTemplateLiteral(["\n    flex-direction: row;\n    align-items: center;\n    padding: 8px;\n"]);

  _templateObject2 = function () {
    return data;
  };

  return data;
}

function _templateObject() {
  const data = _taggedTemplateLiteral(["\n    margin-top: 10px;\n    margin-bottom: 10px;\n    margin-right: 4px;\n    margin-left: 4px;\n"]);

  _templateObject = function () {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import color from "color";
import * as React from "react";
import Text from "../Text";
import { SvgIcon } from "../Icon";
import TouchableRipple from "../TouchableRipple/TouchableRipple";
import { ThemeContext } from "styled-components";
import styled from "styled-components/native";
const DrawerItemContainer = styled.View(_templateObject());
const DrawerItemWrapper = styled.View(_templateObject2());
const DrawerItemLabel = styled(Text)(_templateObject3());

/**
 * A component used to show an action item with an icon and a label in a navigation drawer.
 *
 * <div class="screenshots">
 *   <figure>
 *     <img class="medium" src="screenshots/drawer-item.png" />
 *   </figure>
 * </div>
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { DrawerItem } from 'react-native-simple-elements/components/Drawer';
 *
 * const MyComponent = () => (
 *    <Drawer.Item
 *      style={{ backgroundColor: '#64ffda' }}
 *      icon="star"
 *      label="First Item"
 *    />
 * );
 *
 * export default MyComponent;
 * ```
 */
const DrawerItem = ({
  icon,
  label,
  active,
  style,
  onPress,
  accessibilityLabel,
  ...rest
}) => {
  const theme = React.useContext(ThemeContext);
  const {
    colors,
    roundness
  } = theme;
  const backgroundColor = active ? color(colors.primary).alpha(0.12).rgb().string() : "transparent";
  const contentColor = active ? colors.primary : color(colors.text).alpha(0.68).rgb().string();
  const font = theme.fonts.medium;
  const labelMargin = icon ? 32 : 0;
  return /*#__PURE__*/React.createElement(DrawerItemContainer, _extends({}, rest, {
    style: [{
      backgroundColor,
      borderRadius: roundness
    }, style]
  }), /*#__PURE__*/React.createElement(TouchableRipple, {
    borderless: true // delayPressIn={0}
    ,
    onPress: onPress,
    style: {
      borderRadius: roundness
    } // accessibilityTraits={active ? ['button', 'selected'] : 'button'}
    // accessibilityComponentType="button"
    ,
    accessibilityRole: "button",
    accessibilityState: {
      selected: active
    },
    accessibilityLabel: accessibilityLabel
  }, /*#__PURE__*/React.createElement(DrawerItemWrapper, null, icon ? /*#__PURE__*/React.createElement(SvgIcon, {
    icon: icon,
    size: 24,
    color: contentColor
  }) : null, /*#__PURE__*/React.createElement(DrawerItemLabel, {
    selectable: false,
    numberOfLines: 1,
    style: [{
      color: contentColor,
      ...font,
      marginLeft: labelMargin
    }]
  }, label))));
};

DrawerItem.displayName = "Drawer.Item";
export default DrawerItem;
//# sourceMappingURL=DrawerItem.js.map