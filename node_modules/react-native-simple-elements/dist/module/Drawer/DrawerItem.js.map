{"version":3,"sources":["DrawerItem.tsx"],"names":["color","React","Text","SvgIcon","TouchableRipple","ThemeContext","styled","DrawerItemContainer","View","DrawerItemWrapper","DrawerItemLabel","DrawerItem","icon","label","active","style","onPress","accessibilityLabel","rest","theme","useContext","colors","roundness","backgroundColor","primary","alpha","rgb","string","contentColor","text","font","fonts","medium","labelMargin","borderRadius","selected","marginLeft","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,SAAuBC,YAAvB,QAA2C,mBAA3C;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AAEA,MAAMC,mBAAmB,GAAGD,MAAM,CAACE,IAAV,mBAAzB;AAOA,MAAMC,iBAAiB,GAAGH,MAAM,CAACE,IAAV,oBAAvB;AAMA,MAAME,eAAe,GAAGJ,MAAM,CAACJ,IAAD,CAAT,oBAArB;;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMS,UAAU,GAAG,CAAC;AAChBC,EAAAA,IADgB;AAEhBC,EAAAA,KAFgB;AAGhBC,EAAAA,MAHgB;AAIhBC,EAAAA,KAJgB;AAKhBC,EAAAA,OALgB;AAMhBC,EAAAA,kBANgB;AAOhB,KAAGC;AAPa,CAAD,KAQN;AACT,QAAMC,KAAK,GAAGlB,KAAK,CAACmB,UAAN,CAAiBf,YAAjB,CAAd;AACA,QAAM;AAAEgB,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAwBH,KAA9B;AACA,QAAMI,eAAe,GAAGT,MAAM,GACxBd,KAAK,CAACqB,MAAM,CAACG,OAAR,CAAL,CAAsBC,KAAtB,CAA4B,IAA5B,EAAkCC,GAAlC,GAAwCC,MAAxC,EADwB,GAExB,aAFN;AAGA,QAAMC,YAAY,GAAGd,MAAM,GACrBO,MAAM,CAACG,OADc,GAErBxB,KAAK,CAACqB,MAAM,CAACQ,IAAR,CAAL,CAAmBJ,KAAnB,CAAyB,IAAzB,EAA+BC,GAA/B,GAAqCC,MAArC,EAFN;AAGA,QAAMG,IAAI,GAAGX,KAAK,CAACY,KAAN,CAAYC,MAAzB;AACA,QAAMC,WAAW,GAAGrB,IAAI,GAAG,EAAH,GAAQ,CAAhC;AAEA,sBACI,oBAAC,mBAAD,eACQM,IADR;AAEI,IAAA,KAAK,EAAE,CACH;AAAEK,MAAAA,eAAF;AAAmBW,MAAAA,YAAY,EAAEZ;AAAjC,KADG,EAEHP,KAFG;AAFX,mBAOI,oBAAC,eAAD;AACI,IAAA,UAAU,MADd,CAEI;AAFJ;AAGI,IAAA,OAAO,EAAEC,OAHb;AAII,IAAA,KAAK,EAAE;AAAEkB,MAAAA,YAAY,EAAEZ;AAAhB,KAJX,CAKI;AACA;AANJ;AAOI,IAAA,iBAAiB,EAAC,QAPtB;AAQI,IAAA,kBAAkB,EAAE;AAAEa,MAAAA,QAAQ,EAAErB;AAAZ,KARxB;AASI,IAAA,kBAAkB,EAAEG;AATxB,kBAWI,oBAAC,iBAAD,QACKL,IAAI,gBAAG,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAEA,IAAf;AAAqB,IAAA,IAAI,EAAE,EAA3B;AAA+B,IAAA,KAAK,EAAEgB;AAAtC,IAAH,GAA4D,IADrE,eAEI,oBAAC,eAAD;AACI,IAAA,UAAU,EAAE,KADhB;AAEI,IAAA,aAAa,EAAE,CAFnB;AAGI,IAAA,KAAK,EAAE,CACH;AACI5B,MAAAA,KAAK,EAAE4B,YADX;AAEI,SAAGE,IAFP;AAGIM,MAAAA,UAAU,EAAEH;AAHhB,KADG;AAHX,KAWKpB,KAXL,CAFJ,CAXJ,CAPJ,CADJ;AAsCH,CA1DD;;AA4DAF,UAAU,CAAC0B,WAAX,GAAyB,aAAzB;AAEA,eAAe1B,UAAf","sourcesContent":["import color from \"color\";\r\nimport * as React from \"react\";\r\nimport { View, StyleProp, ViewStyle } from \"react-native\";\r\nimport Text from \"../Text\";\r\nimport { SvgIcon } from \"../Icon\";\r\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\nimport styled from \"styled-components/native\";\r\n\r\nconst DrawerItemContainer = styled.View`\r\n    margin-top: 10px;\r\n    margin-bottom: 10px;\r\n    margin-right: 4px;\r\n    margin-left: 4px;\r\n`;\r\n\r\nconst DrawerItemWrapper = styled.View`\r\n    flex-direction: row;\r\n    align-items: center;\r\n    padding: 8px;\r\n`;\r\n\r\nconst DrawerItemLabel = styled(Text)`\r\n    margin-right: 32px;\r\n`;\r\n\r\ntype Props = React.ComponentPropsWithRef<typeof View> & {\r\n    /**\r\n     * The label text of the item.\r\n     */\r\n    label: string;\r\n    /**\r\n     * Icon to display for the `DrawerItem`.\r\n     */\r\n    icon?: React.ReactElement;\r\n    /**\r\n     * Whether to highlight the drawer item as active.\r\n     */\r\n    active?: boolean;\r\n    /**\r\n     * Function to execute on press.\r\n     */\r\n    onPress?: () => void;\r\n    /**\r\n     * Accessibility label for the button. This is read by the screen reader when the user taps the button.\r\n     */\r\n    accessibilityLabel?: string;\r\n    style?: StyleProp<ViewStyle>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n};\r\n\r\n/**\r\n * A component used to show an action item with an icon and a label in a navigation drawer.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img class=\"medium\" src=\"screenshots/drawer-item.png\" />\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { DrawerItem } from 'react-native-simple-elements/components/Drawer';\r\n *\r\n * const MyComponent = () => (\r\n *    <Drawer.Item\r\n *      style={{ backgroundColor: '#64ffda' }}\r\n *      icon=\"star\"\r\n *      label=\"First Item\"\r\n *    />\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst DrawerItem = ({\r\n    icon,\r\n    label,\r\n    active,\r\n    style,\r\n    onPress,\r\n    accessibilityLabel,\r\n    ...rest\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n    const { colors, roundness } = theme;\r\n    const backgroundColor = active\r\n        ? color(colors.primary).alpha(0.12).rgb().string()\r\n        : \"transparent\";\r\n    const contentColor = active\r\n        ? colors.primary\r\n        : color(colors.text).alpha(0.68).rgb().string();\r\n    const font = theme.fonts.medium;\r\n    const labelMargin = icon ? 32 : 0;\r\n\r\n    return (\r\n        <DrawerItemContainer\r\n            {...rest}\r\n            style={[\r\n                { backgroundColor, borderRadius: roundness },\r\n                style,\r\n            ]}\r\n        >\r\n            <TouchableRipple\r\n                borderless\r\n                // delayPressIn={0}\r\n                onPress={onPress}\r\n                style={{ borderRadius: roundness }}\r\n                // accessibilityTraits={active ? ['button', 'selected'] : 'button'}\r\n                // accessibilityComponentType=\"button\"\r\n                accessibilityRole=\"button\"\r\n                accessibilityState={{ selected: active }}\r\n                accessibilityLabel={accessibilityLabel}\r\n            >\r\n                <DrawerItemWrapper>\r\n                    {icon ? <SvgIcon icon={icon} size={24} color={contentColor} /> : null}\r\n                    <DrawerItemLabel\r\n                        selectable={false}\r\n                        numberOfLines={1}\r\n                        style={[\r\n                            {\r\n                                color: contentColor,\r\n                                ...font,\r\n                                marginLeft: labelMargin,\r\n                            },\r\n                        ]}\r\n                    >\r\n                        {label}\r\n                    </DrawerItemLabel>\r\n                </DrawerItemWrapper>\r\n            </TouchableRipple>\r\n        </DrawerItemContainer>\r\n    );\r\n};\r\n\r\nDrawerItem.displayName = \"Drawer.Item\";\r\n\r\nexport default DrawerItem;\r\n"]}