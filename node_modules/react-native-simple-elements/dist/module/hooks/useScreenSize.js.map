{"version":3,"sources":["useScreenSize.tsx"],"names":["React","useWindowDimensions","mobileBreakPoint","parseFloat","replace","useScreenSize","height","viewportHeight","width","viewportWidth","setWidth","useState","setHeight","screenSizeType","setScreenSizeType","isMobileView","setMobileView","useEffect","updateSize","SC_SM_WIDTH","SC_LG_WIDTH"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,mBAAT,QAAoC,cAApC;AAEA,MAAMC,gBAAgB,GAAGC,UAAU,CAAC,QAAQC,OAAR,CAAgB,IAAhB,EAAsB,EAAtB,CAAD,CAAnC;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAExB,QAAM;AAAEC,IAAAA,MAAM,EAAEC,cAAV;AAA0BC,IAAAA,KAAK,EAAEC;AAAjC,MAAmDR,mBAAmB,EAA5E;AAEA,QAAM,CAAEO,KAAF,EAASE,QAAT,IAAsBV,KAAK,CAACW,QAAN,CAAeF,aAAf,CAA5B;AACA,QAAM,CAAEH,MAAF,EAAUM,SAAV,IAAwBZ,KAAK,CAACW,QAAN,CAAeJ,cAAf,CAA9B;AACA,QAAM,CAAEM,cAAF,EAAkBC,iBAAlB,IAAwCd,KAAK,CAACW,QAAN,CAAe,OAAf,CAA9C;AACA,QAAM,CAAEI,YAAF,EAAgBC,aAAhB,IAAkChB,KAAK,CAACW,QAAN,CACpC,EAAEF,aAAa,GAAGP,gBAAlB,CADoC,CAAxC;AAIAF,EAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAM;AAClB,aAASC,UAAT,GAAsB;AAClBR,MAAAA,QAAQ,CAACD,aAAD,CAAR;AACAG,MAAAA,SAAS,CAACL,cAAD,CAAT;AACAS,MAAAA,aAAa,CAACP,aAAa,GAAGP,gBAAjB,CAAb;AAEA,YAAMiB,WAAW,GAAG,GAApB;AACA,YAAMC,WAAW,GAAG,IAApB;;AAEA,UAAIX,aAAa,GAAGU,WAApB,EAAiC;AAC7BL,QAAAA,iBAAiB,CAAC,OAAD,CAAjB;AACH;;AACD,UAAIL,aAAa,IAAIU,WAAjB,IAAgCV,aAAa,GAAGW,WAApD,EAAiE;AAC7DN,QAAAA,iBAAiB,CAAC,QAAD,CAAjB;AACH;;AACD,UAAIL,aAAa,IAAIW,WAArB,EAAkC;AAC9BN,QAAAA,iBAAiB,CAAC,OAAD,CAAjB;AACH;AACJ;;AACDI,IAAAA,UAAU;AACb,GApBD,EAoBG,CAAET,aAAF,CApBH;AAsBA,SAAO;AAAED,IAAAA,KAAF;AAASF,IAAAA,MAAT;AAAiBO,IAAAA,cAAjB;AAAiCE,IAAAA;AAAjC,GAAP;AACH,CAlCD;;AAoCA,eAAeV,aAAf","sourcesContent":["import * as React from \"react\";\nimport { useWindowDimensions } from \"react-native\";\n\nconst mobileBreakPoint = parseFloat(\"640px\".replace(\"px\", \"\"));\n\nconst useScreenSize = () => {\n\n    const { height: viewportHeight, width: viewportWidth } = useWindowDimensions();\n\n    const [ width, setWidth ] = React.useState(viewportWidth);\n    const [ height, setHeight ] = React.useState(viewportHeight);\n    const [ screenSizeType, setScreenSizeType ] = React.useState(\"small\");\n    const [ isMobileView, setMobileView ] = React.useState(\n        !(viewportWidth > mobileBreakPoint)\n    );\n\n    React.useEffect(() => {\n        function updateSize() {\n            setWidth(viewportWidth);\n            setHeight(viewportHeight);\n            setMobileView(viewportWidth < mobileBreakPoint);\n\n            const SC_SM_WIDTH = 640;\n            const SC_LG_WIDTH = 1024;\n\n            if (viewportWidth < SC_SM_WIDTH) {\n                setScreenSizeType(\"small\");\n            }\n            if (viewportWidth >= SC_SM_WIDTH && viewportWidth < SC_LG_WIDTH) {\n                setScreenSizeType(\"medium\");\n            }\n            if (viewportWidth >= SC_LG_WIDTH) {\n                setScreenSizeType(\"large\");\n            }\n        }\n        updateSize();\n    }, [ viewportWidth ]);\n\n    return { width, height, screenSizeType, isMobileView };\n};\n\nexport default useScreenSize;\n"]}