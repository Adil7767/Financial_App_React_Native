{"version":3,"sources":["ListAccordionGroup.tsx"],"names":["React","ListAccordionGroupContext","createContext","ListAccordionGroup","expandedId","expandedIdProp","onAccordionPress","children","setExpandedId","useState","undefined","onAccordionPressDefault","newExpandedId","currentExpandedId","displayName"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAsBA,OAAO,MAAMC,yBAAyB,gBAAGD,KAAK,CAACE,aAAN,CAEvC,IAFuC,CAAlC;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,kBAAkB,GAAG,CAAC;AACxBC,EAAAA,UAAU,EAAEC,cADY;AAExBC,EAAAA,gBAFwB;AAGxBC,EAAAA;AAHwB,CAAD,KAId;AACT,QAAM,CAACH,UAAD,EAAaI,aAAb,IAA8BR,KAAK,CAACS,QAAN,CAElCC,SAFkC,CAApC;;AAIA,QAAMC,uBAAuB,GAAIC,aAAD,IAAoC;AAChEJ,IAAAA,aAAa,CAAEK,iBAAD,IACVA,iBAAiB,KAAKD,aAAtB,GAAsCF,SAAtC,GAAkDE,aADzC,CAAb;AAGH,GAJD;;AAMA,sBACI,oBAAC,yBAAD,CAA2B,QAA3B;AACI,IAAA,KAAK,EAAE;AACHR,MAAAA,UAAU,EAAEC,cAAc,IAAID,UAD3B;AACuC;AAC1CE,MAAAA,gBAAgB,EAAEA,gBAAgB,IAAIK;AAFnC;AADX,KAMKJ,QANL,CADJ;AAUH,CAzBD;;AA2BAJ,kBAAkB,CAACW,WAAnB,GAAiC,qBAAjC;AAEA,eAAeX,kBAAf","sourcesContent":["import * as React from \"react\";\r\n\r\ntype Props = {\r\n    /**\r\n     * Function to execute on selection change.\r\n     */\r\n    onAccordionPress?: (expandedId: string | number) => void;\r\n    /**\r\n     * Id of the currently expanded list accordion\r\n     */\r\n    expandedId?: string | number;\r\n    /**\r\n     * React elements containing list accordions\r\n     */\r\n    children: React.ReactNode;\r\n};\r\n\r\nexport type ListAccordionGroupContextType = {\r\n    expandedId: string | number | undefined;\r\n    onAccordionPress: (expandedId: string | number) => void;\r\n} | null;\r\n\r\nexport const ListAccordionGroupContext = React.createContext<\r\n    ListAccordionGroupContextType\r\n>(null);\r\n\r\n/**\r\n * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.\r\n * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\r\n * At most one Accordion can be expanded at a given time.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { View, Text } from 'react-native';\r\n * import { ListItem } from 'react-native-simple-elements/components/List';\r\n *\r\n * const MyComponent = () => (\r\n *   <List.AccordionGroup>\r\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\r\n *       <List.Item title=\"Item 1\" />\r\n *     </List.Accordion>\r\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\r\n *       <List.Item title=\"Item 2\" />\r\n *     </List.Accordion>\r\n *     <View>\r\n *       <Text>\r\n *         List.Accordion can be wrapped because implementation uses React.Context.\r\n *       </Text>\r\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\r\n *         <List.Item title=\"Item 3\" />\r\n *       </List.Accordion>\r\n *     </View>\r\n *   </List.AccordionGroup>\r\n * );\r\n *\r\n * export default MyComponent;\r\n *```\r\n */\r\nconst ListAccordionGroup = ({\r\n    expandedId: expandedIdProp,\r\n    onAccordionPress,\r\n    children,\r\n}: Props) => {\r\n    const [expandedId, setExpandedId] = React.useState<\r\n        string | number | undefined\r\n    >(undefined);\r\n\r\n    const onAccordionPressDefault = (newExpandedId: string | number) => {\r\n        setExpandedId((currentExpandedId) =>\r\n            currentExpandedId === newExpandedId ? undefined : newExpandedId\r\n        );\r\n    };\r\n\r\n    return (\r\n        <ListAccordionGroupContext.Provider\r\n            value={{\r\n                expandedId: expandedIdProp || expandedId, // component can be controlled or uncontrolled\r\n                onAccordionPress: onAccordionPress || onAccordionPressDefault,\r\n            }}\r\n        >\r\n            {children}\r\n        </ListAccordionGroupContext.Provider>\r\n    );\r\n};\r\n\r\nListAccordionGroup.displayName = \"List.AccordionGroup\";\r\n\r\nexport default ListAccordionGroup;\r\n"]}