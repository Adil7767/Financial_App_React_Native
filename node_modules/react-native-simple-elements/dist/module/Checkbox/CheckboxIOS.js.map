{"version":3,"sources":["CheckboxIOS.tsx"],"names":["React","StyleSheet","View","color","TouchableRipple","ThemeContext","SvgIcon","MinusIcon","CheckIcon","CheckboxIOS","status","disabled","onPress","testID","rest","theme","useContext","checked","indeterminate","checkedColor","colors","accent","rippleColor","text","alpha","rgb","string","fade","icon","styles","container","opacity","displayName","create","borderRadius","padding","CheckboxIOSWithTheme"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,cAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AAEA,SAAuBC,YAAvB,QAA2C,mBAA3C;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG,CAAC;AACjBC,EAAAA,MADiB;AAEjBC,EAAAA,QAFiB;AAGjBC,EAAAA,OAHiB;AAIjBC,EAAAA,MAJiB;AAKjB,KAAGC;AALc,CAAD,KAMP;AACT,QAAMC,KAAK,GAAGf,KAAK,CAACgB,UAAN,CAAiBX,YAAjB,CAAd;AACA,QAAMY,OAAO,GAAGP,MAAM,KAAK,SAA3B;AACA,QAAMQ,aAAa,GAAGR,MAAM,KAAK,eAAjC;AAEA,QAAMS,YAAY,GAAGR,QAAQ,GACvBI,KAAK,CAACK,MAAN,CAAaT,QADU,GAEvBG,IAAI,CAACX,KAAL,IAAcY,KAAK,CAACK,MAAN,CAAaC,MAFjC;AAIA,MAAIC,WAAJ;;AAEA,MAAIX,QAAJ,EAAc;AACVW,IAAAA,WAAW,GAAGnB,KAAK,CAACY,KAAK,CAACK,MAAN,CAAaG,IAAd,CAAL,CAAyBC,KAAzB,CAA+B,IAA/B,EAAqCC,GAArC,GAA2CC,MAA3C,EAAd;AACH,GAFD,MAEO;AACHJ,IAAAA,WAAW,GAAGnB,KAAK,CAACgB,YAAD,CAAL,CAAoBQ,IAApB,CAAyB,IAAzB,EAA+BF,GAA/B,GAAqCC,MAArC,EAAd;AACH;;AAED,QAAME,IAAI,GAAGV,aAAa,GAAGX,SAAH,GAAeC,SAAzC;AAEA,sBACI,oBAAC,eAAD,eACQM,IADR;AAEI,IAAA,UAAU,MAFd;AAGI,IAAA,WAAW,EAAEQ,WAHjB;AAII,IAAA,OAAO,EAAEV,OAJb;AAKI,IAAA,QAAQ,EAAED,QALd,CAMI;AACA;AAPJ;AAQI,IAAA,iBAAiB,EAAC,UARtB;AASI,IAAA,kBAAkB,EAAE;AAAEA,MAAAA,QAAF;AAAYM,MAAAA;AAAZ,KATxB;AAUI,IAAA,uBAAuB,EAAC,QAV5B;AAWI,IAAA,KAAK,EAAEY,MAAM,CAACC,SAXlB;AAYI,IAAA,MAAM,EAAEjB;AAZZ,mBAcI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEkB,MAAAA,OAAO,EAAEb,aAAa,IAAID,OAAjB,GAA2B,CAA3B,GAA+B;AAA1C;AAAb,kBACI,oBAAC,OAAD;AACI,IAAA,IAAI,EAAEW,IADV;AAEI,IAAA,IAAI,EAAE,EAFV;AAGI,IAAA,KAAK,EAAET,YAHX,CAII;;AAJJ,IADJ,CAdJ,CADJ;AAyBH,CAlDD;;AAoDAV,WAAW,CAACuB,WAAZ,GAA0B,cAA1B;AAEA,MAAMH,MAAM,GAAG5B,UAAU,CAACgC,MAAX,CAAkB;AAC7BH,EAAAA,SAAS,EAAE;AACPI,IAAAA,YAAY,EAAE,EADP;AAEPC,IAAAA,OAAO,EAAE;AAFF;AADkB,CAAlB,CAAf;AAOA,eAAe1B,WAAf,C,CAEA;;AACA,MAAM2B,oBAAoB,GAAG3B,WAA7B,C,CACA;;AACA,SAAS2B,oBAAoB,IAAI3B,WAAjC","sourcesContent":["import * as React from \"react\";\r\nimport { StyleSheet, View } from \"react-native\";\r\nimport color from \"color\";\r\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\r\nimport { $RemoveChildren } from \"../types\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\nimport { SvgIcon } from \"../Icon\";\r\nimport MinusIcon from \"@mdi/svg/svg/minus.svg\";\r\nimport CheckIcon from \"@mdi/svg/svg/check.svg\";\r\n\r\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\r\n    /**\r\n     * Status of checkbox.\r\n     */\r\n    status: \"checked\" | \"unchecked\" | \"indeterminate\";\r\n    /**\r\n     * Whether checkbox is disabled.\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * Function to execute on press.\r\n     */\r\n    onPress?: () => void;\r\n    /**\r\n     * Custom color for checkbox.\r\n     */\r\n    color?: string;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n    /**\r\n     * testID to be used on tests.\r\n     */\r\n    testID?: string;\r\n};\r\n\r\n/**\r\n * Checkboxes allow the selection of multiple options from a set.\r\n * This component follows platform guidelines for iOS, but can be used\r\n * on any platform.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\r\n *     <figcaption>Enabled</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\r\n *     <figcaption>Disabled</figcaption>\r\n *   </figure>\r\n * </div>\r\n */\r\nconst CheckboxIOS = ({\r\n    status,\r\n    disabled,\r\n    onPress,\r\n    testID,\r\n    ...rest\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n    const checked = status === \"checked\";\r\n    const indeterminate = status === \"indeterminate\";\r\n\r\n    const checkedColor = disabled\r\n        ? theme.colors.disabled\r\n        : rest.color || theme.colors.accent;\r\n\r\n    let rippleColor;\r\n\r\n    if (disabled) {\r\n        rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\r\n    } else {\r\n        rippleColor = color(checkedColor).fade(0.32).rgb().string();\r\n    }\r\n\r\n    const icon = indeterminate ? MinusIcon : CheckIcon;\r\n\r\n    return (\r\n        <TouchableRipple\r\n            {...rest}\r\n            borderless\r\n            rippleColor={rippleColor}\r\n            onPress={onPress}\r\n            disabled={disabled}\r\n            // accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\r\n            // accessibilityComponentType=\"button\"\r\n            accessibilityRole=\"checkbox\"\r\n            accessibilityState={{ disabled, checked }}\r\n            accessibilityLiveRegion=\"polite\"\r\n            style={styles.container}\r\n            testID={testID}\r\n        >\r\n            <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\r\n                <SvgIcon\r\n                    icon={icon}\r\n                    size={24}\r\n                    color={checkedColor}\r\n                    // direction=\"ltr\"\r\n                />\r\n            </View>\r\n        </TouchableRipple>\r\n    );\r\n};\r\n\r\nCheckboxIOS.displayName = \"Checkbox.IOS\";\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        borderRadius: 18,\r\n        padding: 6,\r\n    },\r\n});\r\n\r\nexport default CheckboxIOS;\r\n\r\n// @component-docs ignore-next-line\r\nconst CheckboxIOSWithTheme = CheckboxIOS;\r\n// @component-docs ignore-next-line\r\nexport { CheckboxIOSWithTheme as CheckboxIOS };\r\n"]}