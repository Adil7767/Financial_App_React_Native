{"version":3,"sources":["CheckboxAndroid.tsx"],"names":["React","Animated","View","StyleSheet","color","SvgIcon","TouchableRipple","ThemeContext","MinusBoxIcon","CheckboxMarkedIcon","CheckboxBlankOutlineIcon","ANIMATION_DURATION","CheckboxAndroid","status","disabled","onPress","testID","rest","theme","useContext","current","scaleAnim","useRef","Value","isFirstRendering","animation","scale","useEffect","checked","sequence","timing","toValue","duration","useNativeDriver","start","indeterminate","checkedColor","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","checkboxColor","fade","borderWidth","interpolate","inputRange","outputRange","icon","styles","container","transform","absoluteFill","fillContainer","fill","borderColor","displayName","create","borderRadius","width","height","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","alignItems","justifyContent","CheckboxAndroidWithTheme"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Animated, View, StyleSheet } from \"react-native\";\r\nimport color from \"color\";\r\nimport { SvgIcon } from \"../Icon\";\r\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\r\nimport { $RemoveChildren } from \"../types\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\nimport MinusBoxIcon from \"@mdi/svg/svg/minus-box.svg\";\r\nimport CheckboxMarkedIcon from \"@mdi/svg/svg/checkbox-marked.svg\";\r\nimport CheckboxBlankOutlineIcon from \"@mdi/svg/svg/checkbox-blank-outline.svg\";\r\n\r\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\r\n    /**\r\n     * Status of checkbox.\r\n     */\r\n    status: \"checked\" | \"unchecked\" | \"indeterminate\";\r\n    /**\r\n     * Whether checkbox is disabled.\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * Function to execute on press.\r\n     */\r\n    onPress?: () => void;\r\n    /**\r\n     * Custom color for unchecked checkbox.\r\n     */\r\n    uncheckedColor?: string;\r\n    /**\r\n     * Custom color for checkbox.\r\n     */\r\n    color?: string;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n    /**\r\n     * testID to be used on tests.\r\n     */\r\n    testID?: string;\r\n};\r\n\r\n// From https://material.io/design/motion/speed.html#duration\r\nconst ANIMATION_DURATION = 100;\r\n\r\n/**\r\n * Checkboxes allow the selection of multiple options from a set.\r\n * This component follows platform guidelines for Android, but can be used\r\n * on any platform.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\r\n *     <figcaption>Enabled</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\r\n *     <figcaption>Disabled</figcaption>\r\n *   </figure>\r\n * </div>\r\n */\r\nconst CheckboxAndroid = ({\r\n    status,\r\n    disabled,\r\n    onPress,\r\n    testID,\r\n    ...rest\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n    const { current: scaleAnim } = React.useRef<Animated.Value>(\r\n        new Animated.Value(1)\r\n    );\r\n    const isFirstRendering = React.useRef<boolean>(true);\r\n\r\n    const {\r\n        animation: { scale },\r\n    } = theme;\r\n\r\n    React.useEffect(() => {\r\n        // Do not run animation on very first rendering\r\n        if (isFirstRendering.current) {\r\n            isFirstRendering.current = false;\r\n            return;\r\n        }\r\n\r\n        const checked = status === \"checked\";\r\n\r\n        Animated.sequence([\r\n            Animated.timing(scaleAnim, {\r\n                toValue: 0.85,\r\n                duration: checked ? ANIMATION_DURATION * scale : 0,\r\n                useNativeDriver: false,\r\n            }),\r\n            Animated.timing(scaleAnim, {\r\n                toValue: 1,\r\n                duration: checked\r\n                    ? ANIMATION_DURATION * scale\r\n                    : ANIMATION_DURATION * scale * 1.75,\r\n                useNativeDriver: false,\r\n            }),\r\n        ]).start();\r\n    }, [status, scaleAnim, scale]);\r\n\r\n    const checked = status === \"checked\";\r\n    const indeterminate = status === \"indeterminate\";\r\n    const checkedColor = rest.color || theme.colors.accent;\r\n    const uncheckedColor =\r\n        rest.uncheckedColor ||\r\n        color(theme.colors.text)\r\n            .alpha(theme.dark ? 0.7 : 0.54)\r\n            .rgb()\r\n            .string();\r\n\r\n    let rippleColor, checkboxColor;\r\n\r\n    if (disabled) {\r\n        rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\r\n        checkboxColor = theme.colors.disabled;\r\n    } else {\r\n        rippleColor = color(checkedColor).fade(0.32).rgb().string();\r\n        checkboxColor = checked ? checkedColor : uncheckedColor;\r\n    }\r\n\r\n    const borderWidth = scaleAnim.interpolate({\r\n        inputRange: [0.8, 1],\r\n        outputRange: [7, 0],\r\n    });\r\n\r\n    const icon = indeterminate\r\n        ? MinusBoxIcon\r\n        : checked\r\n            ? CheckboxMarkedIcon\r\n            : CheckboxBlankOutlineIcon;\r\n\r\n    return (\r\n        <TouchableRipple\r\n            {...rest}\r\n            borderless\r\n            rippleColor={rippleColor}\r\n            onPress={onPress}\r\n            disabled={disabled}\r\n            // accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\r\n            // accessibilityComponentType=\"button\"\r\n            accessibilityRole=\"checkbox\"\r\n            accessibilityState={{ disabled, checked }}\r\n            accessibilityLiveRegion=\"polite\"\r\n            style={styles.container}\r\n            testID={testID}\r\n        >\r\n            <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>\r\n                <SvgIcon\r\n                    icon={icon}\r\n                    size={24}\r\n                    color={checkboxColor}\r\n                    // direction=\"ltr\"\r\n                />\r\n                <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\r\n                    <Animated.View\r\n                        style={[\r\n                            styles.fill,\r\n                            { borderColor: checkboxColor },\r\n                            { borderWidth },\r\n                        ]}\r\n                    />\r\n                </View>\r\n            </Animated.View>\r\n        </TouchableRipple>\r\n    );\r\n};\r\n\r\nCheckboxAndroid.displayName = \"Checkbox.Android\";\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        borderRadius: 18,\r\n        width: 36,\r\n        height: 36,\r\n        padding: 6,\r\n        paddingTop: 6,\r\n        paddingRight: 6,\r\n        paddingBottom: 6,\r\n        paddingLeft: 6,\r\n    },\r\n    fillContainer: {\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    fill: {\r\n        height: 14,\r\n        width: 14,\r\n    },\r\n});\r\n\r\nexport default CheckboxAndroid;\r\n\r\n// @component-docs ignore-next-line\r\nconst CheckboxAndroidWithTheme = CheckboxAndroid;\r\n// @component-docs ignore-next-line\r\nexport { CheckboxAndroidWithTheme as CheckboxAndroid };\r\n"]}