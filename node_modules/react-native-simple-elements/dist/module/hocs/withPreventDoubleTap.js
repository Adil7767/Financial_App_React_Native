import * as React from "react";
import { debounce } from "../utils/debounce"; // HOC right way
// type PropsAreEqual<P> = (
//     prevProps: Readonly<P>,
//     nextProps: Readonly<P>
// ) => boolean;
// const withSampleHoC = <P extends {}>(
//     component: {
//         (props: P): Exclude<React.ReactNode, undefined>;
//         displayName?: string;
//     },
//     propsAreEqual?: PropsAreEqual<P> | false,
//     componentName = component.displayName ?? component.name
// ): {
//     (props: P): JSX.Element;
//     displayName: string;
// } => {
//     function WithSampleHoc(props: P) {
//         //Do something special to justify the HoC.
//         return component(props) as JSX.Element;
//     }
//     WithSampleHoc.displayName = `withSampleHoC(${componentName})`;
//     let wrappedComponent = propsAreEqual === false ? WithSampleHoc : React.memo(WithSampleHoc, propsAreEqual);
//     //copyStaticProperties(component, wrappedComponent);
//     return wrappedComponent as typeof WithSampleHoc
// };

const TOUCHABLE_AREA_DEBOUNCE_TIME = 500;

const withPreventDoubleTap = (component, propsAreEqual, componentName = (() => {
  var _component$displayNam;

  return (_component$displayNam = component.displayName) !== null && _component$displayNam !== void 0 ? _component$displayNam : component.name;
})()) => {
  function PreventDoubleTap(props) {
    const {
      onPress,
      ...rest
    } = props;

    const debouncedOnPress = () => {
      onPress && onPress();
    };

    const _onPress = debounce(debouncedOnPress, TOUCHABLE_AREA_DEBOUNCE_TIME, true); //Do something special to justify the HoC.


    return component({ ...rest,
      onPress: _onPress
    }); // return <WrappedComponent {...this.props} onPress={this.onPress} />;
  }

  PreventDoubleTap.displayName = "withPreventDoubleTap(".concat(componentName, ")");
  const wrappedComponent = propsAreEqual === false ? PreventDoubleTap : /*#__PURE__*/React.memo(PreventDoubleTap, propsAreEqual); //copyStaticProperties(component, wrappedComponent);

  return wrappedComponent;
};

export default withPreventDoubleTap;
//# sourceMappingURL=withPreventDoubleTap.js.map