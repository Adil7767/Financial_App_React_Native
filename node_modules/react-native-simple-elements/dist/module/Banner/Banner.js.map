{"version":3,"sources":["Banner.tsx"],"names":["React","View","StyleSheet","Animated","Surface","Text","Button","SvgIcon","shadow","ThemeContext","ELEVATION","DEFAULT_MAX_WIDTH","Banner","visible","icon","children","actions","contentStyle","style","rest","theme","useContext","current","position","useRef","Value","layout","setLayout","useState","height","measured","scale","animation","useEffect","timing","duration","toValue","useNativeDriver","start","handleLayout","nativeEvent","multiply","translateY","add","styles","container","wrapper","absolute","transform","opacity","content","message","map","label","others","i","button","create","elevation","overflow","alignSelf","width","maxWidth","top","flexDirection","justifyContent","marginHorizontal","marginTop","marginBottom","margin","flex"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { View, ViewStyle, StyleSheet, StyleProp, Animated } from \"react-native\";\r\nimport Surface from \"../Surface\";\r\nimport Text from \"../Text\";\r\nimport Button from \"../Button\";\r\nimport { SvgIcon } from \"../Icon\";\r\nimport type { $RemoveChildren } from \"../types\";\r\nimport shadow from \"../theme/shadow\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\n\r\nconst ELEVATION = 1;\r\nconst DEFAULT_MAX_WIDTH = 960;\r\n\r\ntype Props = $RemoveChildren<typeof Surface> & {\r\n    /**\r\n     * Whether banner is currently visible.\r\n     */\r\n    visible: boolean;\r\n    /**\r\n     * Content that will be displayed inside banner.\r\n     */\r\n    children: string;\r\n    /**\r\n     * Icon to display for the `Banner`. Can be an image.\r\n     */\r\n    icon?: React.ReactElement;\r\n    /**\r\n     * Action items to shown in the banner.\r\n     * An action item should contain the following properties:\r\n     *\r\n     * - `label`: label of the action button (required)\r\n     * - `onPress`: callback that is called when button is pressed (required)\r\n     *\r\n     * To customize button you can pass other props that button component takes.\r\n     */\r\n    actions: Array<{\r\n        label: string;\r\n        onPress: () => void;\r\n    }>;\r\n    /**\r\n     * Style of banner's inner content.\r\n     * Use this prop to apply custom width for wide layouts.\r\n     */\r\n    contentStyle?: StyleProp<ViewStyle>;\r\n    style?: StyleProp<ViewStyle>;\r\n    ref?: React.RefObject<View>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n};\r\n\r\ntype NativeEvent = {\r\n    nativeEvent: {\r\n        layout: {\r\n            x: number;\r\n            y: number;\r\n            width: number;\r\n            height: number;\r\n        };\r\n    };\r\n};\r\n\r\n/**\r\n * Banner displays a prominent message and related actions.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/banner.gif\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { Image } from 'react-native';\r\n * import Banner from 'react-native-simple-elements/components/Banner';\r\n *\r\n * const MyComponent = () => {\r\n *   const [visible, setVisible] = React.useState(true);\r\n *\r\n *   return (\r\n *     <Banner\r\n *       visible={visible}\r\n *       actions={[\r\n *         {\r\n *           label: 'Fix it',\r\n *           onPress: () => setVisible(false),\r\n *         },\r\n *         {\r\n *           label: 'Learn more',\r\n *           onPress: () => setVisible(false),\r\n *         },\r\n *       ]}\r\n *       icon={({size}) => (\r\n *         <Image\r\n *           source={{\r\n *             uri: 'https://avatars3.githubusercontent.com/u/17571969?s=400&v=4',\r\n *           }}\r\n *           style={{\r\n *             width: size,\r\n *             height: size,\r\n *           }}\r\n *         />\r\n *       )}>\r\n *       There was a problem processing a transaction on your credit card.\r\n *     </Banner>\r\n *   );\r\n * };\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst Banner = ({\r\n    visible,\r\n    icon,\r\n    children,\r\n    actions,\r\n    contentStyle,\r\n    style,\r\n    ...rest\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n    const { current: position } = React.useRef<Animated.Value>(\r\n        new Animated.Value(visible ? 1 : 0)\r\n    );\r\n    const [layout, setLayout] = React.useState<{\r\n        height: number;\r\n        measured: boolean;\r\n    }>({\r\n        height: 0,\r\n        measured: false,\r\n    });\r\n\r\n    const { scale } = theme.animation;\r\n\r\n    React.useEffect(() => {\r\n        if (visible) {\r\n            // show\r\n            Animated.timing(position, {\r\n                duration: 250 * scale,\r\n                toValue: 1,\r\n                useNativeDriver: false,\r\n            }).start();\r\n        } else {\r\n            // hide\r\n            Animated.timing(position, {\r\n                duration: 200 * scale,\r\n                toValue: 0,\r\n                useNativeDriver: false,\r\n            }).start();\r\n        }\r\n    }, [visible, position, scale]);\r\n\r\n    const handleLayout = ({ nativeEvent }: NativeEvent) => {\r\n        const { height } = nativeEvent.layout;\r\n        setLayout({ height, measured: true });\r\n    };\r\n\r\n    // The banner animation has 2 parts:\r\n    // 1. Blank spacer element which animates its height to move the content\r\n    // 2. Actual banner which animates its translateY\r\n    // In initial render, we position everything normally and measure the height of the banner\r\n    // Once we have the height, we apply the height to the spacer and switch the banner to position: absolute\r\n    // We need this because we need to move the content below as if banner's height was being animated\r\n    // However we can't animated banner's height directly as it'll also resize the content inside\r\n    const height = Animated.multiply(position, layout.height);\r\n\r\n    const translateY = Animated.multiply(\r\n        Animated.add(position, -1),\r\n        layout.height\r\n    );\r\n    return (\r\n        <Surface\r\n            {...rest}\r\n            style={[styles.container, shadow(ELEVATION) as ViewStyle, style]}\r\n        >\r\n            <View style={[styles.wrapper, contentStyle]}>\r\n                <Animated.View style={{ height }} />\r\n                <Animated.View\r\n                    onLayout={handleLayout}\r\n                    style={[\r\n                        layout.measured || !visible\r\n                            ? // If we have measured banner's height or it's invisible,\r\n                            // Position it absolutely, the layout will be taken care of the spacer\r\n                            [styles.absolute, { transform: [{ translateY }] }]\r\n                            : // Otherwise position it normally\r\n                            null,\r\n                        !layout.measured && !visible\r\n                            ? // If we haven't measured banner's height yet and it's invisible,\r\n                            // hide it with opacity: 0 so user doesn't see it\r\n                            { opacity: 0 }\r\n                            : null,\r\n                    ]}\r\n                >\r\n                    <View style={styles.content}>\r\n                        {icon ? (\r\n                            <View style={styles.icon}>\r\n                                <SvgIcon icon={icon} size={40} />\r\n                            </View>\r\n                        ) : null}\r\n                        <Text style={styles.message}>{children}</Text>\r\n                    </View>\r\n                    <View style={styles.actions}>\r\n                        {actions.map(({ label, ...others }, i) => (\r\n                            <Button\r\n                                key={/* eslint-disable-line react/no-array-index-key */ i}\r\n                                compact\r\n                                mode=\"text\"\r\n                                style={styles.button}\r\n                                {...others}\r\n                            >\r\n                                {label}\r\n                            </Button>\r\n                        ))}\r\n                    </View>\r\n                </Animated.View>\r\n            </View>\r\n        </Surface>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        elevation: ELEVATION,\r\n    },\r\n    wrapper: {\r\n        overflow: \"hidden\",\r\n        alignSelf: \"center\",\r\n        width: \"100%\",\r\n        maxWidth: DEFAULT_MAX_WIDTH,\r\n    },\r\n    absolute: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        width: \"100%\",\r\n    },\r\n    content: {\r\n        flexDirection: \"row\",\r\n        justifyContent: \"flex-start\",\r\n        marginHorizontal: 8,\r\n        marginTop: 16,\r\n        marginBottom: 0,\r\n    },\r\n    icon: {\r\n        margin: 8,\r\n    },\r\n    message: {\r\n        flex: 1,\r\n        margin: 8,\r\n    },\r\n    actions: {\r\n        flexDirection: \"row\",\r\n        justifyContent: \"flex-end\",\r\n        margin: 4,\r\n    },\r\n    button: {\r\n        margin: 4,\r\n    },\r\n});\r\n\r\nexport default Banner;\r\n"]}