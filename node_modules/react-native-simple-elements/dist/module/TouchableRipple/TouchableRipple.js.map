{"version":3,"sources":["TouchableRipple.tsx"],"names":["React","View","StyleSheet","Platform","Pressable","color","ThemeContext","TouchableRipple","style","focusedStyle","hoveredStyle","pressedStyle","background","_background","borderless","disabled","disabledProp","rippleColor","underlayColor","_underlayColor","children","rest","theme","useContext","handlePressIn","e","centered","onPressIn","dark","colors","calculatedRippleColor","text","alpha","rgb","string","button","currentTarget","window","getComputedStyle","dimensions","getBoundingClientRect","touchX","touchY","changedTouches","touches","nativeEvent","touch","width","height","locationX","pageX","locationY","pageY","size","Math","min","max","container","document","createElement","setAttribute","Object","assign","position","pointerEvents","top","left","right","bottom","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","overflow","ripple","backgroundColor","borderRadius","transitionProperty","transitionDuration","transitionTimingFunction","transformOrigin","transform","opacity","appendChild","requestAnimationFrame","handlePressOut","onPressOut","containers","querySelectorAll","forEach","firstChild","setTimeout","parentNode","removeChild","onPress","focused","hovered","pressed","styles","touchable","Children","only","supported","create","OS","cursor"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    View,\r\n    ViewStyle,\r\n    StyleSheet,\r\n    StyleProp,\r\n    GestureResponderEvent,\r\n    Platform,\r\n    Pressable,\r\n} from \"react-native\";\r\nimport color from \"color\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\n\r\ntype Props = React.ComponentPropsWithRef<typeof Pressable> & {\r\n    /**\r\n     * Whether to render the ripple outside the view bounds.\r\n     */\r\n    borderless?: boolean;\r\n    /**\r\n     * Type of background drawabale to display the feedback (Android).\r\n     * https://reactnative.dev/docs/touchablenativefeedback#background\r\n     */\r\n    background?: Record<string, any>;\r\n    /**\r\n     * Whether to start the ripple at the center (Web).\r\n     */\r\n    centered?: boolean;\r\n    /**\r\n     * Whether to prevent interaction with the touchable.\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * Function to execute on press. If not set, will cause the touchable to be disabled.\r\n     */\r\n    onPress?: (e: GestureResponderEvent) => void;\r\n    /**\r\n     * Function to execute on long press.\r\n     */\r\n    onLongPress?: (e: GestureResponderEvent) => void;\r\n    /**\r\n     * Color of the ripple effect (Android >= 5.0 and Web).\r\n     */\r\n    rippleColor?: string;\r\n    /**\r\n     * Color of the underlay for the highlight effect (Android < 5.0 and iOS).\r\n     */\r\n    underlayColor?: string;\r\n    /**\r\n     * Content of the `TouchableRipple`.\r\n     */\r\n    children: React.ReactNode;\r\n\r\n    focusedStyle?: StyleProp<ViewStyle>;\r\n\r\n    hoveredStyle?: StyleProp<ViewStyle>;\r\n\r\n    pressedStyle?: StyleProp<ViewStyle>;\r\n\r\n    style?: StyleProp<ViewStyle>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n};\r\n\r\n/**\r\n * A wrapper for views that should respond to touches.\r\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\r\n * On unsupported platforms, it falls back to a highlight effect.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img class=\"medium\" src=\"screenshots/touchable-ripple.gif\" />\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { View } from 'react-native';\r\n * import TouchableRipple from 'react-native-simple-elements/components/TouchableRipple';\r\n * import Text from \"react-native-simple-elements/components/Text\";\r\n *\r\n * const MyComponent = () => (\r\n *   <TouchableRipple\r\n *     onPress={() => console.log('Pressed')}\r\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\r\n *   >\r\n *     <Text>Press anywhere</Text>\r\n *   </TouchableRipple>\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n *\r\n * @extends TouchableWithoutFeedback props https://reactnative.dev/docs/touchablewithoutfeedback#props\r\n */\r\nconst TouchableRipple = ({\r\n    style,\r\n    focusedStyle,\r\n    hoveredStyle,\r\n    pressedStyle,\r\n    background: _background,\r\n    borderless = false,\r\n    disabled: disabledProp,\r\n    rippleColor,\r\n    underlayColor: _underlayColor,\r\n    children,\r\n    ...rest\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n\r\n    const handlePressIn = (e: any) => {\r\n        const { centered, onPressIn } = rest;\r\n\r\n        onPressIn?.(e);\r\n\r\n        const { dark, colors } = theme;\r\n        const calculatedRippleColor =\r\n            rippleColor ||\r\n            color(colors.text)\r\n                .alpha(dark ? 0.32 : 0.2)\r\n                .rgb()\r\n                .string();\r\n\r\n        const button = e.currentTarget;\r\n        const style = window.getComputedStyle(button);\r\n        const dimensions = button.getBoundingClientRect();\r\n\r\n        let touchX;\r\n        let touchY;\r\n\r\n        const { changedTouches, touches } = e.nativeEvent;\r\n        const touch = touches?.[0] ?? changedTouches?.[0];\r\n\r\n        // If centered or it was pressed using keyboard - enter or space\r\n        if (centered || !touch) {\r\n            touchX = dimensions.width / 2;\r\n            touchY = dimensions.height / 2;\r\n        } else {\r\n            touchX = touch.locationX ?? e.pageX;\r\n            touchY = touch.locationY ?? e.pageY;\r\n        }\r\n\r\n        // Get the size of the button to determine how big the ripple should be\r\n        const size = centered\r\n            ? // If ripple is always centered, we don't need to make it too big\r\n            Math.min(dimensions.width, dimensions.height) * 1.25\r\n            : // Otherwise make it twice as big so clicking on one end spreads ripple to other\r\n            Math.max(dimensions.width, dimensions.height) * 2;\r\n\r\n        // Create a container for our ripple effect so we don't need to change the parent's style\r\n        const container = document.createElement(\"span\");\r\n\r\n        container.setAttribute(\"data-paper-ripple\", \"\");\r\n\r\n        Object.assign(container.style, {\r\n            position: \"absolute\",\r\n            pointerEvents: \"none\",\r\n            top: \"0\",\r\n            left: \"0\",\r\n            right: \"0\",\r\n            bottom: \"0\",\r\n            borderTopLeftRadius: style.borderTopLeftRadius,\r\n            borderTopRightRadius: style.borderTopRightRadius,\r\n            borderBottomRightRadius: style.borderBottomRightRadius,\r\n            borderBottomLeftRadius: style.borderBottomLeftRadius,\r\n            overflow: centered ? \"visible\" : \"hidden\",\r\n        });\r\n\r\n        // Create span to show the ripple effect\r\n        const ripple = document.createElement(\"span\");\r\n\r\n        Object.assign(ripple.style, {\r\n            position: \"absolute\",\r\n            pointerEvents: \"none\",\r\n            backgroundColor: calculatedRippleColor,\r\n            borderRadius: \"50%\",\r\n\r\n            /* Transition configuration */\r\n            transitionProperty: \"transform opacity\",\r\n            transitionDuration: `${Math.min(size * 1.5, 350)}ms`,\r\n            transitionTimingFunction: \"linear\",\r\n            transformOrigin: \"center\",\r\n\r\n            /* We'll animate these properties */\r\n            transform: \"translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)\",\r\n            opacity: \"0.5\",\r\n\r\n            // Position the ripple where cursor was\r\n            left: `${touchX}px`,\r\n            top: `${touchY}px`,\r\n            width: `${size}px`,\r\n            height: `${size}px`,\r\n        });\r\n\r\n        // Finally, append it to DOM\r\n        container.appendChild(ripple);\r\n        button.appendChild(container);\r\n\r\n        // rAF runs in the same frame as the event handler\r\n        // Use double rAF to ensure the transition class is added in next frame\r\n        // This will make sure that the transition animation is triggered\r\n        requestAnimationFrame(() => {\r\n            requestAnimationFrame(() => {\r\n                Object.assign(ripple.style, {\r\n                    transform: \"translate3d(-50%, -50%, 0) scale3d(1, 1, 1)\",\r\n                    opacity: \"1\",\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    const handlePressOut = (e: any) => {\r\n        rest.onPressOut?.(e);\r\n\r\n        const containers = e.currentTarget.querySelectorAll(\r\n            \"[data-paper-ripple]\"\r\n        ) as HTMLElement[];\r\n\r\n        requestAnimationFrame(() => {\r\n            requestAnimationFrame(() => {\r\n                containers.forEach((container) => {\r\n                    const ripple = container.firstChild;\r\n\r\n                    // @ts-ignore\r\n                    Object.assign(ripple.style, {\r\n                        transitionDuration: \"250ms\",\r\n                        opacity: 0,\r\n                    });\r\n\r\n                    // Finally remove the span after the transition\r\n                    setTimeout(() => {\r\n                        const { parentNode } = container;\r\n\r\n                        if (parentNode) {\r\n                            parentNode.removeChild(container);\r\n                        }\r\n                    }, 500);\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    const disabled = disabledProp || !rest.onPress;\r\n\r\n    return (\r\n        <Pressable\r\n            {...rest}\r\n            onPressIn={handlePressIn}\r\n            onPressOut={handlePressOut}\r\n            disabled={disabled}\r\n        >\r\n            {({ focused, hovered, pressed }: any) => (\r\n                <View\r\n                    style={[\r\n                        styles.touchable,\r\n                        borderless && styles.borderless,\r\n                        focused && focusedStyle,\r\n                        hovered && hoveredStyle,\r\n                        pressed && pressedStyle,\r\n                        style,\r\n                    ]} testID=\"touchable_view\">\r\n                    {React.Children.only(children)}\r\n                </View>\r\n            )}\r\n        </Pressable>\r\n    );\r\n};\r\n\r\n/**\r\n * Whether ripple effect is supported.\r\n */\r\nTouchableRipple.supported = true;\r\n\r\nconst styles = StyleSheet.create({\r\n    touchable: {\r\n        position: \"relative\",\r\n        ...(Platform.OS === \"web\" && { cursor: \"pointer\" }),\r\n    },\r\n    borderless: {\r\n        overflow: \"hidden\",\r\n    },\r\n});\r\n\r\nexport default TouchableRipple;\r\n"]}