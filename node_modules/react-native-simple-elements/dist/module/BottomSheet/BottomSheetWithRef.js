function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from "react";
import BottomSheet from "./BottomSheet";
import Surface from "../Surface";
import { FlexItem } from "../Container";
import CloseIcon from "@mdi/svg/svg/close.svg";
import IconButton from "../IconButton";
import Button from "../Button";
const defaultProps = {
  translations: {
    confirmText: "Done"
  }
};

const BottomSheetWithRef = ({
  innerRef,
  children,
  title,
  translations,
  ...rest
}) => {
  const [visible, setVisible] = React.useState(false);
  const optionsRef = React.useRef({});
  React.useImperativeHandle(innerRef, () => ({
    open: options => {
      optionsRef.current = {
        onConfirm: options === null || options === void 0 ? void 0 : options.onConfirm,
        onCancel: options === null || options === void 0 ? void 0 : options.onCancel
      };
      setVisible(true);
    },
    close: () => {
      setVisible(false);
    }
  }));

  const _handleConfirm = () => {
    if (optionsRef && optionsRef.current && optionsRef.current.onConfirm) {
      optionsRef.current.onConfirm();
    }

    innerRef.current.close();
  };

  const _handleDismiss = () => {
    innerRef.current.close();
  };

  return /*#__PURE__*/React.createElement(BottomSheet, _extends({
    visible: visible,
    onDismiss: _handleDismiss
  }, rest), /*#__PURE__*/React.createElement(Surface, null, /*#__PURE__*/React.createElement(FlexItem, {
    title: title,
    left: () => /*#__PURE__*/React.createElement(IconButton, {
      icon: CloseIcon,
      onPress: _handleDismiss
    }),
    right: () => /*#__PURE__*/React.createElement(Button, {
      onPress: _handleConfirm
    }, translations.confirmText),
    rowStyle: {
      alignItems: "center"
    }
  }), children));
};

BottomSheetWithRef.defaultProps = defaultProps;
export default BottomSheetWithRef;
//# sourceMappingURL=BottomSheetWithRef.js.map