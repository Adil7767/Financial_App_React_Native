{"version":3,"sources":["index.tsx"],"names":["React","Animated","TouchableOpacity","Vibration","getStatusBarHeight","CheckCircleIcon","AlertCircleIcon","XCircleIcon","CloseIcon","Box","SvgIcon","Accent","Heading","IconCont","StyledToast","SubText","statusBarHeight","offset","shadow","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","DEFAULT_PROPS","duration","intent","onPress","shouldVibrate","closeIconColor","message","hideIcon","toastStyles","borderColor","bg","closeButtonStyles","p","mx","borderRadius","alignItems","Toast","accentColor","closeIconSize","color","iconColor","iconName","id","index","onClose","position","subMessage","hideAccent","isSuccess","isInfo","topOffset","animation","useRef","Value","current","useEffect","timing","toValue","useNativeDriver","start","timer","setTimeout","clearTimeout","vibrate","translateY","interpolate","inputRange","outputRange","scale","extrapolate","transform","Object","assign","memo","defaultProps"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Animated, TouchableOpacity, Vibration } from \"react-native\";\nimport { getStatusBarHeight } from \"react-native-iphone-x-helper\";\nimport CheckCircleIcon from \"@mdi/svg/svg/account.svg\";\nimport AlertCircleIcon from \"@mdi/svg/svg/account.svg\";\nimport XCircleIcon from \"@mdi/svg/svg/account.svg\";\nimport CloseIcon from \"@mdi/svg/svg/account.svg\";\n\nimport Box from \"../Box\";\nimport { BoxProps } from \"../Box/index\";\nimport { SvgIcon } from \"../../Icon\";\nimport { Accent, Heading, IconCont, StyledToast, StyledToastProps, SubText } from \"./styles\";\n\n// type IconFamilies =\n//     | 'Entypo'\n//     | 'EvilIcons'\n//     | 'Feather'\n//     | 'FontAwesome'\n//     | 'Foundation'\n//     | 'Ionicons'\n//     | 'MaterialCommunityIcons'\n//     | 'MaterialIcons'\n//     | 'Octicons'\n//     | 'SimpleLineIcons'\n//     | 'Zocial'\n\nexport type ToastConfig = {\n    accentColor?: string\n    bg?: string\n    closeButtonStyles?: BoxProps\n    closeIconColor?: string\n    // closeIconFamily?: IconFamilies\n    closeIconName?: string\n    closeIconSize?: number\n    color?: string\n    duration?: number\n    hideAccent?: boolean\n    hideIcon?: boolean\n    iconColor?: string\n    // iconFamily?: IconFamilies\n    iconName?: string\n    intent?: \"SUCCESS\" | \"ERROR\" | \"INFO\"\n    message: string\n    onPress?: () => void\n    shouldVibrate?: boolean\n    subMessage?: string\n    toastStyles?: StyledToastProps\n}\n\nconst statusBarHeight = getStatusBarHeight();\n\nexport type ToastInternalConfig = {\n    id?: string\n    index?: number\n    position?: \"TOP\" | \"BOTTOM\"\n    onClose?: (id: string) => void\n}\n\nconst offset = statusBarHeight + 16;\n\nconst shadow = {\n    shadowColor: \"#000\",\n    shadowOffset: {\n        width: 0,\n        height: 0\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n    elevation: 1\n};\n\nconst DEFAULT_PROPS: ToastConfig = {\n    duration: 3000,\n    intent: \"SUCCESS\",\n    onPress: () => false,\n    shouldVibrate: false,\n    closeIconColor: \"text\",\n    message: \"Toast message!\",\n    hideIcon: false,\n    toastStyles: {\n        borderColor: \"black\",\n        bg: \"background\"\n    },\n    closeButtonStyles: {\n        p: 2,\n        mx: 2,\n        bg: \"black\",\n        borderRadius: 4,\n        alignItems: \"center\"\n    }\n};\n\nexport const Toast: React.FC<ToastConfig & ToastInternalConfig> = ({\n    accentColor,\n    closeIconColor,\n    // closeIconFamily,\n    // closeIconName,\n    closeIconSize,\n    color,\n    duration,\n    hideIcon,\n    iconColor,\n    // iconFamily,\n    iconName,\n    id,\n    index,\n    intent,\n    message,\n    onClose,\n    onPress,\n    position,\n    shouldVibrate,\n    subMessage,\n    toastStyles,\n    hideAccent,\n    closeButtonStyles\n}) => {\n    const isSuccess = intent === \"SUCCESS\";\n    const isInfo = intent === \"INFO\";\n    const topOffset = offset + 60 * (index || 0);\n\n    const animation = React.useRef(new Animated.Value(0)).current;\n\n    React.useEffect(() => {\n        Animated.timing(animation, {\n            toValue: 0.5,\n            duration: 300,\n            useNativeDriver: true\n        }).start(() => {\n            if (duration !== 0) {\n                const timer = setTimeout(() => {\n                    if (index === 0) {\n                        clearTimeout(timer);\n                    }\n                    id && onClose && onClose(id);\n                }, duration);\n            }\n        });\n        if (shouldVibrate) {\n            Vibration.vibrate(10);\n        }\n    }, []);\n\n    const translateY = animation.interpolate({\n        inputRange: [0, 0.5],\n        outputRange: [position === \"BOTTOM\" ? topOffset : -topOffset, 0]\n    });\n\n    const scale = animation.interpolate({\n        inputRange: [0, 0.5],\n        outputRange: [0.8, 1],\n        extrapolate: \"clamp\"\n    });\n\n    return (\n        <StyledToast\n            onPress={() => {\n                onPress && onPress();\n                onClose && id && onClose(id);\n            }}\n            style={{ transform: [{ translateY }, { scale }], ...shadow }}\n            {...toastStyles}\n            pr={subMessage ? 2 : 0}\n        >\n            {!hideAccent && (\n                <Accent\n                    testID=\"toast-accent\"\n                    bg={accentColor ? accentColor : isSuccess ? \"success\" : isInfo ? \"info\" : \"error\"}\n                />\n            )}\n\n            {!hideIcon && (\n                <IconCont px={4}>\n                    <SvgIcon\n                        icon={iconName ? iconName : isSuccess ? CheckCircleIcon : isInfo ? AlertCircleIcon : XCircleIcon}\n                        size={20}\n                        color={iconColor ? iconColor : isSuccess ? \"success\" : isInfo ? \"info\" : \"error\"}\n                        // family={iconFamily || 'Feather'}\n                        // name={!!iconName ? iconName : isSuccess ? CheckCircleIcon : isInfo ? AlertCircleIcon : XCircleIcon}\n                    />\n                </IconCont>\n            )}\n            <Box alignItems=\"flex-start\" flex={\"1 1 auto\"} pl={hideIcon ? 4 : 0} pr={subMessage ? 2 : 0} py={2}>\n                <Box flexDirection=\"row\" flexWrap=\"wrap\" flex={\"1 1 auto\"}>\n                    <Heading color={color}>{message}</Heading>\n                </Box>\n                {!!subMessage && (\n                    <SubText color={color} mt={1}>\n                        {subMessage}\n                    </SubText>\n                )}\n            </Box>\n            <TouchableOpacity onPress={() => onClose && id && onClose(id)}>\n                <Box {...Object.assign({}, DEFAULT_PROPS.closeButtonStyles, closeButtonStyles)}>\n                    <SvgIcon\n                        icon={CloseIcon}\n                        size={closeIconSize || 20}\n                        color={closeIconColor}\n                        // family={closeIconFamily || 'Feather'}\n                        // name={closeIconName || 'x'}\n                    />\n                </Box>\n            </TouchableOpacity>\n        </StyledToast>\n    );\n};\n\nexport default React.memo(Toast);\n\nToast.defaultProps = DEFAULT_PROPS;\n"]}