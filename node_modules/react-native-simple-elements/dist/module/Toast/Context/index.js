function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from "react";
import { LayoutAnimation, UIManager } from "react-native";
import { getStatusBarHeight } from "react-native-iphone-x-helper";
import Box from "../Box";
import Toast from "../Toast";
import { uuid } from "../Utils";
export const ToastContext = /*#__PURE__*/React.createContext({
  toast: () => null
});
export const useToast = () => React.useContext(ToastContext);
const originalOffset = getStatusBarHeight();
UIManager && UIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);
const CustomLayoutConfig = {
  duration: 300,
  create: {
    type: LayoutAnimation.Types.easeInEaseOut,
    property: LayoutAnimation.Properties.opacity
  },
  update: {
    type: LayoutAnimation.Types.easeInEaseOut
  },
  delete: {
    type: LayoutAnimation.Types.easeInEaseOut,
    property: LayoutAnimation.Properties.opacity
  }
};

const ToastProvider = ({
  children,
  position,
  offset: offsetProp,
  maxToasts
}) => {
  const [toasts, setToasts] = React.useState([]);

  const toast = newToast => {
    LayoutAnimation.configureNext(CustomLayoutConfig);
    setToasts(prevToasts => {
      const toasts = position === "BOTTOM" ? [...prevToasts, {
        index: prevToasts.length,
        id: uuid(),
        ...newToast
      }] : [{
        index: prevToasts.length,
        id: uuid(),
        ...newToast
      }, ...prevToasts];

      if (maxToasts && prevToasts.length === maxToasts) {
        position === "BOTTOM" ? toasts.shift() : toasts.pop();
        return toasts;
      } else {
        return toasts;
      }
    });
  };

  const hideToast = id => {
    LayoutAnimation.configureNext(CustomLayoutConfig);
    setToasts(prevToasts => prevToasts.filter(el => el.id !== id));
  };

  const offset = offsetProp ? offsetProp + originalOffset : originalOffset;
  return /*#__PURE__*/React.createElement(ToastContext.Provider, {
    value: {
      toast
    }
  }, children, /*#__PURE__*/React.createElement(Box, {
    px: 4,
    left: 0,
    right: 0,
    position: "absolute",
    pointerEvents: "box-none",
    pt: position === "BOTTOM" ? 0 : offset,
    pb: position === "BOTTOM" ? offset : 0,
    style: position === "BOTTOM" ? {
      bottom: 0
    } : {
      top: 0
    },
    testID: "toast_box"
  }, toasts.map(config => {
    return /*#__PURE__*/React.createElement(Toast, _extends({
      position: position,
      key: config.id,
      onClose: id => hideToast(id)
    }, config));
  })));
};

export default ToastProvider;
//# sourceMappingURL=index.js.map