{"version":3,"sources":["Switch.tsx"],"names":["React","grey400","grey800","grey50","white","black","NativeModules","Platform","Switch","NativeSwitch","setColor","ThemeContext","version","PlatformConstants","reactNativeVersion","undefined","value","disabled","onValueChange","color","rest","theme","useContext","checkedColor","colors","accent","onTintColor","OS","dark","alpha","rgb","string","thumbTintColor","props","major","minor","activeTrackColor","thumbColor","activeThumbColor","trackColor","true","false"],"mappings":";;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmCC,KAAnC,EAA0CC,KAA1C,QAAuD,iBAAvD;AACA,SACIC,aADJ,EAEIC,QAFJ,EAIIC,MAAM,IAAIC,YAJd,QAMO,cANP;AAOA,OAAOC,QAAP,MAAqB,OAArB;AACA,SAAuBC,YAAvB,QAA2C,mBAA3C;AAEA,MAAMC,OAAO,GAAGN,aAAa,CAACO,iBAAd,GACVP,aAAa,CAACO,iBAAd,CAAgCC,kBADtB,GAEVC,SAFN;;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMP,MAAM,GAAG,CAAC;AACZQ,EAAAA,KADY;AAEZC,EAAAA,QAFY;AAGZC,EAAAA,aAHY;AAIZC,EAAAA,KAJY;AAKZ,KAAGC;AALS,CAAD,KAMF;AACT,QAAMC,KAAK,GAAGrB,KAAK,CAACsB,UAAN,CAAiBX,YAAjB,CAAd;AACA,QAAMY,YAAY,GAAGJ,KAAK,IAAIE,KAAK,CAACG,MAAN,CAAaC,MAA3C;AAEA,QAAMC,WAAW,GACbnB,QAAQ,CAACoB,EAAT,KAAgB,KAAhB,GACMJ,YADN,GAEMN,QAAQ,GACJI,KAAK,CAACO,IAAN,GACIlB,QAAQ,CAACN,KAAD,CAAR,CAAgByB,KAAhB,CAAsB,GAAtB,EAA2BC,GAA3B,GAAiCC,MAAjC,EADJ,GAEIrB,QAAQ,CAACL,KAAD,CAAR,CAAgBwB,KAAhB,CAAsB,IAAtB,EAA4BC,GAA5B,GAAkCC,MAAlC,EAHA,GAIJrB,QAAQ,CAACa,YAAD,CAAR,CAAuBM,KAAvB,CAA6B,GAA7B,EAAkCC,GAAlC,GAAwCC,MAAxC,EAPd;AASA,QAAMC,cAAc,GAChBzB,QAAQ,CAACoB,EAAT,KAAgB,KAAhB,GACMZ,SADN,GAEME,QAAQ,GACJI,KAAK,CAACO,IAAN,GACI1B,OADJ,GAEID,OAHA,GAIJe,KAAK,GACDO,YADC,GAEDF,KAAK,CAACO,IAAN,GACI3B,OADJ,GAEIE,MAXtB;AAaA,QAAM8B,KAAK,GACPrB,OAAO,IAAIA,OAAO,CAACsB,KAAR,KAAkB,CAA7B,IAAkCtB,OAAO,CAACuB,KAAR,IAAiB,EAAnD,GACM;AACET,IAAAA,WADF;AAEEM,IAAAA;AAFF,GADN,GAKMzB,QAAQ,CAACoB,EAAT,KAAgB,KAAhB,GACI;AACES,IAAAA,gBAAgB,EAAEV,WADpB;AAEEW,IAAAA,UAAU,EAAEL,cAFd;AAGEM,IAAAA,gBAAgB,EAAEf;AAHpB,GADJ,GAMI;AACEc,IAAAA,UAAU,EAAEL,cADd;AAEEO,IAAAA,UAAU,EAAE;AACRC,MAAAA,IAAI,EAAEd,WADE;AAERe,MAAAA,KAAK,EAAE;AAFC;AAFd,GAZd;AAoBA,sBACI,oBAAC,YAAD;AACI,IAAA,KAAK,EAAEzB,KADX;AAEI,IAAA,QAAQ,EAAEC,QAFd;AAGI,IAAA,aAAa,EAAEA,QAAQ,GAAGF,SAAH,GAAeG;AAH1C,KAIQe,KAJR,EAKQb,IALR,EADJ;AASH,CA7DD;;AA+DA,eAAeZ,MAAf","sourcesContent":["\r\nimport * as React from \"react\";\r\nimport { grey400, grey800, grey50, white, black } from \"../theme/colors\";\r\nimport {\r\n    NativeModules,\r\n    Platform,\r\n    StyleProp,\r\n    Switch as NativeSwitch,\r\n    ViewStyle,\r\n} from \"react-native\";\r\nimport setColor from \"color\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\n\r\nconst version = NativeModules.PlatformConstants\r\n    ? NativeModules.PlatformConstants.reactNativeVersion\r\n    : undefined;\r\n\r\ntype Props = React.ComponentPropsWithRef<typeof NativeSwitch> & {\r\n    /**\r\n     * Disable toggling the switch.\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * Value of the switch, true means 'on', false means 'off'.\r\n     */\r\n    value?: boolean;\r\n    /**\r\n     * Custom color for switch.\r\n     */\r\n    color?: string;\r\n    /**\r\n     * Callback called with the new value when it changes.\r\n     */\r\n    onValueChange?: (val?) => void;\r\n    style?: StyleProp<ViewStyle>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n};\r\n\r\n/**\r\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img src=\"screenshots/switch-enabled.android.png\" />\r\n *     <figcaption>Android (enabled)</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/switch-disabled.android.png\" />\r\n *     <figcaption>Android (disabled)</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\r\n *     <figcaption>iOS (enabled)</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\r\n *     <figcaption>iOS (disabled)</figcaption>\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import Switch from 'react-native-simple-elements/components/Switch';\r\n *\r\n * const MyComponent = () => {\r\n *   const [isSwitchOn, setIsSwitchOn] = React.useState(false);\r\n *\r\n *   const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);\r\n *\r\n *   return <Switch value={isSwitchOn} onValueChange={onToggleSwitch} />;\r\n * };\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst Switch = ({\r\n    value,\r\n    disabled,\r\n    onValueChange,\r\n    color,\r\n    ...rest\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n    const checkedColor = color || theme.colors.accent;\r\n\r\n    const onTintColor =\r\n        Platform.OS === \"ios\"\r\n            ? checkedColor\r\n            : disabled\r\n                ? theme.dark\r\n                    ? setColor(white).alpha(0.1).rgb().string()\r\n                    : setColor(black).alpha(0.12).rgb().string()\r\n                : setColor(checkedColor).alpha(0.5).rgb().string();\r\n\r\n    const thumbTintColor =\r\n        Platform.OS === \"ios\"\r\n            ? undefined\r\n            : disabled\r\n                ? theme.dark\r\n                    ? grey800\r\n                    : grey400\r\n                : value\r\n                    ? checkedColor\r\n                    : theme.dark\r\n                        ? grey400\r\n                        : grey50;\r\n\r\n    const props =\r\n        version && version.major === 0 && version.minor <= 56\r\n            ? {\r\n                onTintColor,\r\n                thumbTintColor,\r\n            }\r\n            : Platform.OS === \"web\"\r\n                ? {\r\n                    activeTrackColor: onTintColor,\r\n                    thumbColor: thumbTintColor,\r\n                    activeThumbColor: checkedColor,\r\n                }\r\n                : {\r\n                    thumbColor: thumbTintColor,\r\n                    trackColor: {\r\n                        true: onTintColor,\r\n                        false: \"\",\r\n                    },\r\n                };\r\n\r\n    return (\r\n        <NativeSwitch\r\n            value={value}\r\n            disabled={disabled}\r\n            onValueChange={disabled ? undefined : onValueChange}\r\n            {...props}\r\n            {...rest}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Switch;\r\n"]}