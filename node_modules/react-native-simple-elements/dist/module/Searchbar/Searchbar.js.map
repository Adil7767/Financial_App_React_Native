{"version":3,"sources":["Searchbar.tsx"],"names":["React","StyleSheet","TextInput","I18nManager","color","IconButton","Surface","ThemeContext","MagnifyIcon","CloseIcon","Searchbar","forwardRef","clearAccessibilityLabel","clearIcon","icon","iconColor","customIconColor","inputStyle","onIconPress","placeholder","searchAccessibilityLabel","style","value","rest","ref","root","useRef","theme","useContext","useImperativeHandle","focus","current","clear","setNativeProps","args","isFocused","blur","handleClearPress","onChangeText","colors","roundness","dark","fonts","textColor","text","font","regular","alpha","rgb","string","rippleColor","borderRadius","elevation","styles","container","input","primary","create","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","isRTL","minWidth"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    StyleSheet,\r\n    StyleProp,\r\n    TextInput,\r\n    I18nManager,\r\n    ViewStyle,\r\n    TextStyle,\r\n} from \"react-native\";\r\nimport color from \"color\";\r\nimport IconButton from \"../IconButton\";\r\nimport Surface from \"../Surface\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\nimport MagnifyIcon from \"@mdi/svg/svg/magnify.svg\";\r\nimport CloseIcon from \"@mdi/svg/svg/close.svg\";\r\n\r\ntype Props = React.ComponentPropsWithRef<typeof TextInput> & {\r\n    /**\r\n     * Accessibility label for the button. This is read by the screen reader when the user taps the button.\r\n     */\r\n    clearAccessibilityLabel?: string;\r\n    /**\r\n     * Accessibility label for the button. This is read by the screen reader when the user taps the button.\r\n     */\r\n    searchAccessibilityLabel?: string;\r\n    /**\r\n     * Hint text shown when the input is empty.\r\n     */\r\n    placeholder?: string;\r\n    /**\r\n     * The value of the text input.\r\n     */\r\n    value: string;\r\n    /**\r\n     * Icon name for the left icon button (see `onIconPress`).\r\n     */\r\n    icon?: React.ReactElement;\r\n    /**\r\n     * Callback that is called when the text input's text changes.\r\n     */\r\n    onChangeText?: (query: string) => void;\r\n    /**\r\n     * Callback to execute if we want the left icon to act as button.\r\n     */\r\n    onIconPress?: () => void;\r\n    /**\r\n     * Set style of the TextInput component inside the searchbar\r\n     */\r\n    inputStyle?: StyleProp<TextStyle>;\r\n    style?: StyleProp<ViewStyle>;\r\n\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n    /**\r\n     * Custom color for icon, default will be derived from theme\r\n     */\r\n    iconColor?: string;\r\n    /**\r\n     * Custom icon for clear button, default will be icon close\r\n     */\r\n    clearIcon?: React.ReactElement;\r\n};\r\n\r\ntype TextInputHandles = Pick<\r\n    TextInput,\r\n    \"setNativeProps\" | \"isFocused\" | \"clear\" | \"blur\" | \"focus\"\r\n>;\r\n\r\n/**\r\n * Searchbar is a simple input box where users can type search queries.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import Searchbar from 'react-native-simple-elements/components/Searchbar';\r\n *\r\n * const MyComponent = () => {\r\n *   const [searchQuery, setSearchQuery] = React.useState('');\r\n *\r\n *   const onChangeSearch = query => setSearchQuery(query);\r\n *\r\n *   return (\r\n *     <Searchbar\r\n *       placeholder=\"Search\"\r\n *       onChangeText={onChangeSearch}\r\n *       value={searchQuery}\r\n *     />\r\n *   );\r\n * };\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst Searchbar = React.forwardRef<TextInputHandles, Props>(\r\n    (\r\n        {\r\n            clearAccessibilityLabel = \"clear\",\r\n            clearIcon,\r\n            icon,\r\n            iconColor: customIconColor,\r\n            inputStyle,\r\n            onIconPress,\r\n            placeholder,\r\n            searchAccessibilityLabel = \"search\",\r\n            style,\r\n            value,\r\n            ...rest\r\n        }: Props,\r\n        ref\r\n    ) => {\r\n        const root = React.useRef<TextInput>(null);\r\n        const theme = React.useContext(ThemeContext);\r\n\r\n        React.useImperativeHandle(ref, () => ({\r\n            // @ts-ignore\r\n            focus: root.current?.focus,\r\n            // @ts-ignore\r\n            clear: root.current?.clear,\r\n            setNativeProps: (args: Record<string, any>) => root.current?.setNativeProps(args),\r\n            // @ts-ignore\r\n            isFocused: root.current?.isFocused,\r\n            // @ts-ignore\r\n            blur: root.current?.blur,\r\n        }));\r\n\r\n        const handleClearPress = () => {\r\n            root.current?.clear();\r\n            rest.onChangeText?.(\"\");\r\n        };\r\n\r\n        const { colors, roundness, dark, fonts } = theme;\r\n        const textColor = colors.text;\r\n        const font = fonts.regular;\r\n        const iconColor =\r\n            customIconColor ||\r\n            (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\r\n        const rippleColor = color(textColor).alpha(0.32).rgb().string();\r\n\r\n        return (\r\n            <Surface\r\n                style={[\r\n                    { borderRadius: roundness, elevation: 4 },\r\n                    styles.container,\r\n                    style,\r\n                ]}\r\n            >\r\n                <IconButton\r\n                    // accessibilityTraits=\"button\"\r\n                    // accessibilityComponentType=\"button\"\r\n                    accessibilityRole=\"button\"\r\n                    borderless\r\n                    rippleColor={rippleColor}\r\n                    onPress={onIconPress}\r\n                    color={iconColor}\r\n                    size={24}\r\n                    // direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\r\n                    icon={icon || MagnifyIcon}\r\n                    accessibilityLabel={searchAccessibilityLabel}\r\n                />\r\n                <TextInput\r\n                    style={[styles.input, { color: textColor, ...font }, inputStyle]}\r\n                    placeholder={placeholder || \"\"}\r\n                    placeholderTextColor={colors.placeholder}\r\n                    selectionColor={colors.primary}\r\n                    underlineColorAndroid=\"transparent\"\r\n                    returnKeyType=\"search\"\r\n                    keyboardAppearance={dark ? \"dark\" : \"light\"}\r\n                    // accessibilityTraits=\"search\"\r\n                    accessibilityRole=\"search\"\r\n                    ref={root}\r\n                    value={value}\r\n                    {...rest}\r\n                />\r\n                <IconButton\r\n                    borderless\r\n                    disabled={!value}\r\n                    accessibilityLabel={clearAccessibilityLabel}\r\n                    color={value ? iconColor : \"rgba(255, 255, 255, 0)\"}\r\n                    size={24}\r\n                    // direction={I18nManager.isRTL ? \"rtl\" : \"ltr\"}\r\n                    rippleColor={rippleColor}\r\n                    onPress={handleClearPress}\r\n                    icon={clearIcon || CloseIcon}\r\n                    // accessibilityTraits=\"button\"\r\n                    // accessibilityComponentType=\"button\"\r\n                    accessibilityRole=\"button\"\r\n                />\r\n            </Surface>\r\n        );\r\n    }\r\n);\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n    },\r\n    input: {\r\n        flex: 1,\r\n        fontSize: 18,\r\n        paddingLeft: 8,\r\n        alignSelf: \"stretch\",\r\n        textAlign: I18nManager.isRTL ? \"right\" : \"left\",\r\n        minWidth: 0,\r\n    },\r\n});\r\n\r\nexport default Searchbar;\r\n"]}