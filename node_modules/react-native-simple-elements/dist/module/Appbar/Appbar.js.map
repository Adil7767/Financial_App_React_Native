{"version":3,"sources":["Appbar.tsx"],"names":["React","View","Platform","StyleSheet","color","AppbarContent","AppbarAction","AppbarBackAction","Surface","black","white","overlay","ThemeContext","DEFAULT_APPBAR_HEIGHT","Appbar","children","dark","style","rest","theme","useContext","colors","isDarkTheme","mode","backgroundColor","customBackground","elevation","restStyle","flatten","isDark","surface","primary","isLight","shouldCenterContent","shouldAddLeftSpacing","shouldAddRightSpacing","OS","hasAppbarContent","leftItemsCount","rightItemsCount","Children","forEach","child","isValidElement","type","styles","appbar","spacing","toArray","filter","map","i","includes","props","marginLeft","alignItems","cloneElement","create","height","flexDirection","paddingHorizontal","width","AppbarWithTheme"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { View, ViewStyle, Platform, StyleSheet, StyleProp } from \"react-native\";\nimport color from \"color\";\n\nimport AppbarContent from \"./AppbarContent\";\nimport AppbarAction from \"./AppbarAction\";\nimport AppbarBackAction from \"./AppbarBackAction\";\nimport Surface from \"../Surface/Surface\";\nimport { black, white } from \"../theme/colors\";\nimport overlay from \"../theme/overlay\";\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\n// import AppbarHeader from \"./AppbarHeader\";\n\ntype Props = Partial<React.ComponentPropsWithRef<typeof View>> & {\n    /**\n     * Whether the background color is a dark color. A dark appbar will render light text and vice-versa.\n     */\n    dark?: boolean;\n    /**\n     * Content of the `Appbar`.\n     */\n    children: React.ReactNode;\n    /**\n     * @optional\n     */\n    theme?: DefaultTheme;\n\n    style?: StyleProp<ViewStyle>;\n};\n\nexport const DEFAULT_APPBAR_HEIGHT = 56;\n\n/**\n * A component to display action items in a bar. It can be placed at the top or bottom.\n * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.\n * The bottom bar usually provides access to a drawer and up to four actions.\n *\n * By default Appbar uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/appbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import Appbar from 'react-native-simple-elements/components/Appbar';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *  <Appbar style={styles.bottom}>\n *    <Appbar.Action\n *      icon=\"archive\"\n *      onPress={() => console.log('Pressed archive')}\n *     />\n *     <Appbar.Action icon=\"mail\" onPress={() => console.log('Pressed mail')} />\n *     <Appbar.Action icon=\"label\" onPress={() => console.log('Pressed label')} />\n *     <Appbar.Action\n *       icon=\"delete\"\n *       onPress={() => console.log('Pressed delete')}\n *     />\n *   </Appbar>\n *  );\n *\n * export default MyComponent\n *\n * const styles = StyleSheet.create({\n *   bottom: {\n *     position: 'absolute',\n *     left: 0,\n *     right: 0,\n *     bottom: 0,\n *   },\n * });\n * ```\n */\nconst Appbar = ({ children, dark, style, ...rest }: Props) => {\n    const theme = React.useContext(ThemeContext);\n    const { colors, dark: isDarkTheme, mode } = theme;\n    const {\n        backgroundColor: customBackground,\n        elevation = 4,\n        ...restStyle\n    }: ViewStyle = StyleSheet.flatten(style) || {};\n\n    let isDark: boolean;\n\n    const backgroundColor = customBackground\n        ? customBackground\n        : isDarkTheme && mode === \"adaptive\"\n            ? overlay(elevation, colors.surface)\n            : colors.primary;\n    if (typeof dark === \"boolean\") {\n        isDark = dark;\n    } else {\n        isDark =\n            backgroundColor === \"transparent\"\n                ? false\n                // @ts-ignore\n                : !color(backgroundColor).isLight();\n    }\n\n    let shouldCenterContent = false;\n    let shouldAddLeftSpacing = false;\n    let shouldAddRightSpacing = false;\n    if (Platform.OS === \"ios\") {\n        let hasAppbarContent = false;\n        let leftItemsCount = 0;\n        let rightItemsCount = 0;\n\n        React.Children.forEach(children, (child) => {\n            if (React.isValidElement(child)) {\n                if (child.type === AppbarContent) {\n                    hasAppbarContent = true;\n                } else if (hasAppbarContent) {\n                    rightItemsCount++;\n                } else {\n                    leftItemsCount++;\n                }\n            }\n        });\n\n        shouldCenterContent =\n            hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;\n        shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n        shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n    }\n    return (\n        <Surface\n            //@ts-ignore Types of property 'backgroundColor' are incompatible.\n            style={[{ backgroundColor }, styles.appbar, { elevation }, restStyle]}\n            {...rest}\n        >\n            {shouldAddLeftSpacing ? <View style={styles.spacing} /> : null}\n            {React.Children.toArray(children)\n                .filter((child) => child != null && typeof child !== \"boolean\")\n                .map((child, i) => {\n                    if (\n                        !React.isValidElement(child) ||\n                        ![\n                            AppbarContent,\n                            AppbarAction,\n                            AppbarBackAction,\n                            // @ts-ignore Type 'string' is not assignable to type\n                        ].includes(child.type)\n                    ) {\n                        return child;\n                    }\n\n                    const props: { color?: string; style?: StyleProp<ViewStyle> } = {\n                        color:\n                            typeof child.props.color !== \"undefined\"\n                                ? child.props.color\n                                : isDark\n                                    ? white\n                                    : black,\n                    };\n\n                    if (child.type === AppbarContent) {\n                        props.style = [\n                            // Since content is not first item, add extra left margin\n                            i !== 0 && { marginLeft: 8 },\n                            shouldCenterContent && { alignItems: \"center\" },\n                            child.props.style,\n                        ];\n                    }\n                    return React.cloneElement(child, props);\n                })}\n            {shouldAddRightSpacing ? <View style={styles.spacing} /> : null}\n        </Surface>\n    );\n};\n\nconst styles = StyleSheet.create({\n    appbar: {\n        height: DEFAULT_APPBAR_HEIGHT,\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        paddingHorizontal: 4,\n        elevation: 4,\n    },\n    spacing: {\n        width: 48,\n    },\n});\n\n// Appbar.Header = AppbarHeader;\n// Appbar.Content = AppbarContent;\n// Appbar.Action = AppbarAction;\n// Appbar.BackAction = AppbarBackAction;\n\nexport default Appbar;\n\n// @component-docs ignore-next-line\nconst AppbarWithTheme = Appbar;\n// @component-docs ignore-next-line\nexport { AppbarWithTheme as Appbar };\n"]}