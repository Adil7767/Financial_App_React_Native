{"version":3,"sources":["AppbarAction.tsx"],"names":["React","color","black","IconButton","AppbarAction","size","iconColor","alpha","rgb","string","icon","disabled","onPress","accessibilityLabel","rest","displayName"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAMA,SAASC,KAAT,QAAsB,iBAAtB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,CAAC;AAClBC,EAAAA,IAAI,GAAG,EADW;AAElBJ,EAAAA,KAAK,EAAEK,SAAS,GAAGL,KAAK,CAACC,KAAD,CAAL,CAAaK,KAAb,CAAmB,IAAnB,EAAyBC,GAAzB,GAA+BC,MAA/B,EAFD;AAGlBC,EAAAA,IAHkB;AAIlBC,EAAAA,QAJkB;AAKlBC,EAAAA,OALkB;AAMlBC,EAAAA,kBANkB;AAOlB,KAAGC;AAPe,CAAD,kBASjB,oBAAC,UAAD;AACI,EAAA,IAAI,EAAET,IADV;AAEI,EAAA,OAAO,EAAEO,OAFb;AAGI,EAAA,KAAK,EAAEN,SAHX;AAII,EAAA,IAAI,EAAEI,IAJV;AAKI,EAAA,QAAQ,EAAEC,QALd;AAMI,EAAA,kBAAkB,EAAEE,kBANxB;AAOI,EAAA,QAAQ;AAPZ,GAQQC,IARR,EATJ;;AAqBAV,YAAY,CAACW,WAAb,GAA2B,eAA3B;AAEA,eAAeX,YAAf,C,CAEA;;AACA,SAASA,YAAT","sourcesContent":["import * as React from \"react\";\nimport color from \"color\";\nimport type {\n    StyleProp,\n    ViewStyle,\n    View,\n} from \"react-native\";\nimport { black } from \"../theme/colors\";\nimport IconButton from \"../IconButton/IconButton\";\n\ntype Props = React.ComponentPropsWithoutRef<typeof IconButton> & {\n    /**\n     *  Custom color for action icon.\n     */\n    color?: string;\n    /**\n     * Name of the icon to show.\n     */\n    icon: React.ReactElement;\n    /**\n     * Optional icon size.\n     */\n    size?: number;\n    /**\n     * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n     */\n    disabled?: boolean;\n    /**\n     * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n     */\n    accessibilityLabel?: string;\n    /**\n     * Function to execute on press.\n     */\n    onPress?: () => void;\n    style?: StyleProp<ViewStyle>;\n\n    // ref?: React.RefObject<TouchableWithoutFeedback>;\n    ref?: React.RefObject<View>;\n};\n\n/**\n * A component used to display an action item in the appbar.\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-action-android.png\" />\n *       <figcaption>Android</figcaption>\n *   </figure>\n * </div>\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-action-ios.png\" />\n *       <figcaption>iOS</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import Appbar from \"react-native-simple-elements/components/Appbar\";\n * import { Platform } from 'react-native';\n *\n * const MORE_ICON = Platform.OS === 'ios' ? 'dots-horizontal' : 'dots-vertical';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" subtitle={'Subtitle'} />\n *         <Appbar.Action icon=\"magnify\" onPress={() => {}} />\n *         <Appbar.Action icon={MORE_ICON} onPress={() => {}} />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarAction = ({\n    size = 24,\n    color: iconColor = color(black).alpha(0.54).rgb().string(),\n    icon,\n    disabled,\n    onPress,\n    accessibilityLabel,\n    ...rest\n}: Props) => (\n    <IconButton\n        size={size}\n        onPress={onPress}\n        color={iconColor}\n        icon={icon}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        animated\n        {...rest}\n    />\n);\n\nAppbarAction.displayName = \"Appbar.Action\";\n\nexport default AppbarAction;\n\n// @component-docs ignore-next-line\nexport { AppbarAction };\n"]}