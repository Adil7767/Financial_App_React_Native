{"version":3,"sources":["TextInputFlat.tsx"],"names":["React","View","Animated","TextInput","NativeTextInput","StyleSheet","I18nManager","Platform","color","InputLabel","TextInputAdornment","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","FLAT_INPUT_OFFSET","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingFlat","interpolatePlaceholder","calculateFlatAffixTopPosition","calculateFlatInputHorizontalPadding","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","AdornmentSide","AdornmentType","InputMode","ThemeContext","MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","LABEL_PADDING_TOP_DENSE","MIN_HEIGHT","MIN_DENSE_HEIGHT_WL","MIN_DENSE_HEIGHT","TextInputFlat","Component","render","disabled","editable","label","error","selectionColor","underlineColor","dense","style","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","props","theme","context","colors","fonts","font","regular","hasActiveOutline","focused","fontSize","fontSizeStyle","fontWeight","height","paddingHorizontal","textAlign","viewStyle","flatten","isPaddingHorizontalPassed","undefined","adornmentConfig","paddingLeft","paddingRight","leftLayout","rightLayout","rightAffixWidth","width","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","inputOffset","mode","Flat","inputTextColor","activeColor","underlineColorCustom","placeholderColor","errorColor","text","alpha","rgb","string","primary","placeholder","containerStyle","backgroundColor","dark","background","lighten","darken","borderTopLeftRadius","roundness","borderTopRightRadius","labelScale","fontScale","labelWidth","labelLayout","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","isRTL","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","OS","styles","inputFlatDense","inputFlat","pad","paddingFlat","baseLabelTranslateY","placeholderOpacity","labeled","measured","minHeight","flatHeight","iconTopPosition","leftAffixTopPosition","affixHeight","rightAffixTopPosition","labelProps","placeholderStyle","wiggleOffsetX","paddingOffset","affixTopPosition","Left","Right","onAffixChange","adornmentProps","Affix","Icon","isTextInputFocused","length","textStyle","visible","paddingTop","paddingBottom","ref","underlineColorAndroid","input","textAlignVertical","Underline","underline","transform","scaleY","create","position","bottom","flexGrow","margin","zIndex"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    View,\r\n    Animated,\r\n    TextInput as NativeTextInput,\r\n    StyleSheet,\r\n    I18nManager,\r\n    Platform,\r\n    TextStyle,\r\n} from \"react-native\";\r\nimport color from \"color\";\r\nimport InputLabel from \"./Label/InputLabel\";\r\nimport TextInputAdornment, {\r\n    TextInputAdornmentProps,\r\n} from \"./Adornment/TextInputAdornment\";\r\nimport type { RenderProps, ChildTextInputProps } from \"./types\";\r\n\r\nimport {\r\n    MAXIMIZED_LABEL_FONT_SIZE,\r\n    MINIMIZED_LABEL_FONT_SIZE,\r\n    LABEL_WIGGLE_X_OFFSET,\r\n    ADORNMENT_SIZE,\r\n    FLAT_INPUT_OFFSET,\r\n} from \"./constants\";\r\n\r\nimport {\r\n    calculateLabelTopPosition,\r\n    calculateInputHeight,\r\n    calculatePadding,\r\n    adjustPaddingFlat,\r\n    Padding,\r\n    interpolatePlaceholder,\r\n    calculateFlatAffixTopPosition,\r\n    calculateFlatInputHorizontalPadding,\r\n} from \"./helpers\";\r\nimport {\r\n    getAdornmentConfig,\r\n    getAdornmentStyleAdjustmentForNativeInput,\r\n} from \"./Adornment/TextInputAdornment\";\r\nimport { AdornmentSide, AdornmentType, InputMode } from \"./Adornment/enums\";\r\nimport { ThemeContext } from \"styled-components\";\r\n\r\nconst MINIMIZED_LABEL_Y_OFFSET = -18;\r\n\r\nconst LABEL_PADDING_TOP = 30;\r\nconst LABEL_PADDING_TOP_DENSE = 24;\r\nconst MIN_HEIGHT = 64;\r\nconst MIN_DENSE_HEIGHT_WL = 52;\r\nconst MIN_DENSE_HEIGHT = 40;\r\n\r\nclass TextInputFlat extends React.Component<ChildTextInputProps> {\r\n\r\n    static contextType = ThemeContext as any;\r\n    static defaultProps = {\r\n        disabled: false,\r\n        error: false,\r\n        multiline: false,\r\n        editable: true,\r\n        render: (props: RenderProps) => <NativeTextInput {...props} />,\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            disabled,\r\n            editable,\r\n            label,\r\n            error,\r\n            selectionColor,\r\n            underlineColor,\r\n            dense,\r\n            style,\r\n            render,\r\n            multiline,\r\n            parentState,\r\n            innerRef,\r\n            onFocus,\r\n            forceFocus,\r\n            onBlur,\r\n            onChangeText,\r\n            onLayoutAnimatedText,\r\n            onLeftAffixLayoutChange,\r\n            onRightAffixLayoutChange,\r\n            left,\r\n            right,\r\n            placeholderTextColor,\r\n            ...rest\r\n        } = this.props;\r\n        const theme = this.context;\r\n\r\n        const { colors, fonts } = theme;\r\n        const font = fonts.regular;\r\n        const hasActiveOutline = parentState.focused || error;\r\n\r\n        const {\r\n            fontSize: fontSizeStyle,\r\n            fontWeight,\r\n            height,\r\n            paddingHorizontal,\r\n            textAlign,\r\n            ...viewStyle\r\n        } = (StyleSheet.flatten(style) || {}) as TextStyle;\r\n        const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\r\n\r\n        const isPaddingHorizontalPassed =\r\n            paddingHorizontal !== undefined && typeof paddingHorizontal === \"number\";\r\n\r\n        const adornmentConfig = getAdornmentConfig({\r\n            left,\r\n            right,\r\n        });\r\n\r\n        let { paddingLeft, paddingRight } = calculateFlatInputHorizontalPadding({\r\n            adornmentConfig,\r\n        });\r\n\r\n        if (isPaddingHorizontalPassed) {\r\n            paddingLeft = paddingHorizontal as number;\r\n            paddingRight = paddingHorizontal as number;\r\n        }\r\n\r\n        const { leftLayout, rightLayout } = parentState;\r\n\r\n        const rightAffixWidth = right\r\n            ? rightLayout.width || ADORNMENT_SIZE\r\n            : ADORNMENT_SIZE;\r\n\r\n        const leftAffixWidth = left\r\n            ? leftLayout.width || ADORNMENT_SIZE\r\n            : ADORNMENT_SIZE;\r\n\r\n        const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput(\r\n            {\r\n                adornmentConfig,\r\n                rightAffixWidth,\r\n                leftAffixWidth,\r\n                paddingHorizontal,\r\n                inputOffset: FLAT_INPUT_OFFSET,\r\n                mode: InputMode.Flat,\r\n            }\r\n        );\r\n\r\n        let inputTextColor,\r\n            activeColor,\r\n            underlineColorCustom,\r\n            placeholderColor,\r\n            errorColor;\r\n\r\n        if (disabled) {\r\n            inputTextColor = activeColor = color(colors.text)\r\n                .alpha(0.54)\r\n                .rgb()\r\n                .string();\r\n            placeholderColor = colors.disabled;\r\n            underlineColorCustom = \"transparent\";\r\n        } else {\r\n            inputTextColor = colors.text;\r\n            activeColor = error ? colors.error : colors.primary;\r\n            placeholderColor = colors.placeholder;\r\n            errorColor = colors.error;\r\n            underlineColorCustom = underlineColor || colors.disabled;\r\n        }\r\n\r\n        const containerStyle = {\r\n            backgroundColor: theme.dark\r\n                ? color(colors.background).lighten(0.24).rgb().string()\r\n                : color(colors.background).darken(0.06).rgb().string(),\r\n            borderTopLeftRadius: theme.roundness,\r\n            borderTopRightRadius: theme.roundness,\r\n        };\r\n\r\n        const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\r\n        const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\r\n\r\n        const labelWidth = parentState.labelLayout.width;\r\n        const labelHeight = parentState.labelLayout.height;\r\n        const labelHalfWidth = labelWidth / 2;\r\n        const labelHalfHeight = labelHeight / 2;\r\n\r\n        const baseLabelTranslateX =\r\n            (I18nManager.isRTL ? 1 : -1) *\r\n            (labelHalfWidth - (labelScale * labelWidth) / 2) +\r\n            (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\r\n\r\n        const minInputHeight = dense\r\n            ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) -\r\n            LABEL_PADDING_TOP_DENSE\r\n            : MIN_HEIGHT - LABEL_PADDING_TOP;\r\n\r\n        const inputHeight = calculateInputHeight(\r\n            labelHeight,\r\n            height,\r\n            minInputHeight\r\n        );\r\n\r\n        const topPosition = calculateLabelTopPosition(\r\n            labelHeight,\r\n            inputHeight,\r\n            multiline && height ? 0 : !height ? minInputHeight / 2 : 0\r\n        );\r\n\r\n        if (height && typeof height !== \"number\") {\r\n            // eslint-disable-next-line\r\n            console.warn('Currently we support only numbers in height prop');\r\n        }\r\n\r\n        const paddingSettings = {\r\n            height: height ? +height : null,\r\n            labelHalfHeight,\r\n            offset: FLAT_INPUT_OFFSET,\r\n            multiline: multiline ? multiline : null,\r\n            dense: dense ? dense : null,\r\n            topPosition,\r\n            fontSize,\r\n            label,\r\n            scale: fontScale,\r\n            isAndroid: Platform.OS === \"android\",\r\n            styles: StyleSheet.flatten(\r\n                dense ? styles.inputFlatDense : styles.inputFlat\r\n            ) as Padding,\r\n        };\r\n\r\n        const pad = calculatePadding(paddingSettings);\r\n\r\n        const paddingFlat = adjustPaddingFlat({\r\n            ...paddingSettings,\r\n            pad,\r\n        });\r\n\r\n        const baseLabelTranslateY =\r\n            -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\r\n\r\n        const placeholderOpacity = hasActiveOutline\r\n            ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\r\n            : parentState.labelLayout.measured\r\n                ? 1\r\n                : 0;\r\n\r\n        const minHeight =\r\n            height ||\r\n            (dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) : MIN_HEIGHT);\r\n\r\n        const flatHeight =\r\n            inputHeight +\r\n            (!height ? (dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP) : 0);\r\n\r\n        const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\r\n\r\n        const leftAffixTopPosition = leftLayout.height\r\n            ? calculateFlatAffixTopPosition({\r\n                height: flatHeight,\r\n                ...paddingFlat,\r\n                affixHeight: leftLayout.height,\r\n            })\r\n            : null;\r\n\r\n        const rightAffixTopPosition = rightLayout.height\r\n            ? calculateFlatAffixTopPosition({\r\n                height: flatHeight,\r\n                ...paddingFlat,\r\n                affixHeight: rightLayout.height,\r\n            })\r\n            : null;\r\n\r\n        const labelProps = {\r\n            label,\r\n            onLayoutAnimatedText,\r\n            placeholderOpacity,\r\n            error,\r\n            placeholderStyle: styles.placeholder,\r\n            baseLabelTranslateY,\r\n            baseLabelTranslateX,\r\n            font,\r\n            fontSize,\r\n            fontWeight,\r\n            labelScale,\r\n            wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\r\n            topPosition,\r\n            paddingOffset: { paddingLeft, paddingRight },\r\n            hasActiveOutline,\r\n            activeColor,\r\n            placeholderColor,\r\n            errorColor,\r\n        };\r\n        const affixTopPosition = {\r\n            [AdornmentSide.Left]: leftAffixTopPosition,\r\n            [AdornmentSide.Right]: rightAffixTopPosition,\r\n        };\r\n        const onAffixChange = {\r\n            [AdornmentSide.Left]: onLeftAffixLayoutChange,\r\n            [AdornmentSide.Right]: onRightAffixLayoutChange,\r\n        };\r\n\r\n        let adornmentProps: TextInputAdornmentProps = {\r\n            paddingHorizontal,\r\n            adornmentConfig,\r\n            forceFocus,\r\n            topPosition: {\r\n                [AdornmentType.Affix]: affixTopPosition,\r\n                [AdornmentType.Icon]: iconTopPosition,\r\n            },\r\n            onAffixChange,\r\n            isTextInputFocused: this.props.parentState.focused,\r\n        };\r\n        if (adornmentConfig.length) {\r\n            adornmentProps = {\r\n                ...adornmentProps,\r\n                left,\r\n                right,\r\n                textStyle: { ...font, fontSize, fontWeight },\r\n                visible: this.props.parentState.labeled,\r\n            };\r\n        }\r\n\r\n        return (\r\n            <View style={[containerStyle, viewStyle]}>\r\n                <Underline\r\n                    parentState={parentState}\r\n                    underlineColorCustom={underlineColorCustom}\r\n                    error={error}\r\n                    colors={colors}\r\n                    activeColor={activeColor}\r\n                />\r\n                <View\r\n                    style={{\r\n                        paddingTop: 0,\r\n                        paddingBottom: 0,\r\n                        minHeight,\r\n                    }}\r\n                >\r\n                    <InputLabel parentState={parentState} labelProps={labelProps} />\r\n                    {render?.({\r\n                        ...rest,\r\n                        ref: innerRef,\r\n                        onChangeText,\r\n                        // @ts-ignore\r\n                        placeholder: label\r\n                            ? parentState.placeholder\r\n                            : this.props.placeholder,\r\n                        placeholderTextColor: placeholderTextColor || placeholderColor,\r\n                        editable: !disabled && editable,\r\n                        selectionColor:\r\n                            typeof selectionColor === \"undefined\"\r\n                                ? activeColor\r\n                                : selectionColor,\r\n                        onFocus,\r\n                        onBlur,\r\n                        underlineColorAndroid: \"transparent\",\r\n                        multiline,\r\n                        style: [\r\n                            styles.input,\r\n                            { paddingLeft, paddingRight },\r\n                            !multiline || (multiline && height) ? { height: flatHeight } : {},\r\n                            paddingFlat,\r\n                            {\r\n                                ...font,\r\n                                fontSize,\r\n                                fontWeight,\r\n                                color: inputTextColor,\r\n                                textAlignVertical: multiline ? \"top\" : \"center\",\r\n                                textAlign: textAlign\r\n                                    ? textAlign\r\n                                    : I18nManager.isRTL\r\n                                        ? \"right\"\r\n                                        : \"left\",\r\n                            },\r\n                            adornmentStyleAdjustmentForNativeInput,\r\n                        ],\r\n                    })}\r\n                </View>\r\n                <TextInputAdornment {...adornmentProps} />\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextInputFlat;\r\n\r\ntype UnderlineProps = {\r\n    parentState: {\r\n        focused: boolean;\r\n    };\r\n    error?: boolean;\r\n    colors: {\r\n        error: string;\r\n    };\r\n    activeColor: string;\r\n    underlineColorCustom?: string;\r\n};\r\n\r\nconst Underline = ({\r\n    parentState,\r\n    error,\r\n    colors,\r\n    activeColor,\r\n    underlineColorCustom,\r\n}: UnderlineProps) => {\r\n    let backgroundColor = parentState.focused\r\n        ? activeColor\r\n        : underlineColorCustom;\r\n    if (error) backgroundColor = colors.error;\r\n    return (\r\n        <Animated.View\r\n            style={[\r\n                styles.underline,\r\n                {\r\n                    backgroundColor,\r\n                    // Underlines is thinner when input is not focused\r\n                    transform: [{ scaleY: parentState.focused ? 1 : 0.5 }],\r\n                },\r\n            ]}\r\n        />\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    placeholder: {\r\n        position: \"absolute\",\r\n        left: 0,\r\n    },\r\n    underline: {\r\n        position: \"absolute\",\r\n        left: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        height: 2,\r\n    },\r\n    input: {\r\n        flexGrow: 1,\r\n        margin: 0,\r\n        zIndex: 1,\r\n    },\r\n    inputFlat: {\r\n        paddingTop: 24,\r\n        paddingBottom: 4,\r\n    },\r\n    inputFlatDense: {\r\n        paddingTop: 22,\r\n        paddingBottom: 2,\r\n    },\r\n});\r\n"]}