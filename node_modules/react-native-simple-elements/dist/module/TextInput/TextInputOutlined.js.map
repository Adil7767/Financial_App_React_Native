{"version":3,"sources":["TextInputOutlined.tsx"],"names":["React","View","TextInput","NativeTextInput","StyleSheet","I18nManager","Platform","color","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","InputLabel","LabelBackground","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","ADORNMENT_OFFSET","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingOut","interpolatePlaceholder","calculateOutlinedIconAndAffixTopPosition","AdornmentType","AdornmentSide","ThemeContext","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","Component","render","disabled","editable","label","error","selectionColor","underlineColor","dense","style","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","props","theme","context","adornmentConfig","colors","fonts","font","regular","hasActiveOutline","focused","fontSize","fontSizeStyle","fontWeight","height","backgroundColor","background","textAlign","viewStyle","flatten","inputTextColor","activeColor","outlineColor","placeholderColor","errorColor","text","alpha","rgb","string","primary","placeholder","labelScale","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","type","Left","Icon","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","measured","labelProps","placeholderStyle","wiggleOffsetX","minHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","paddingTop","paddingBottom","ref","underlineColorAndroid","input","textAlignVertical","Outline","outline","borderRadius","roundness","borderWidth","borderColor","create","position","paddingHorizontal","top","bottom","flexGrow","margin","zIndex"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    View,\r\n    TextInput as NativeTextInput,\r\n    StyleSheet,\r\n    I18nManager,\r\n    Platform,\r\n    TextStyle,\r\n} from \"react-native\";\r\nimport color from \"color\";\r\nimport TextInputAdornment, {\r\n    getAdornmentConfig,\r\n    getAdornmentStyleAdjustmentForNativeInput,\r\n    TextInputAdornmentProps,\r\n} from \"./Adornment/TextInputAdornment\";\r\n\r\nimport InputLabel from \"./Label/InputLabel\";\r\nimport LabelBackground from \"./Label/LabelBackground\";\r\nimport type { RenderProps, ChildTextInputProps } from \"./types\";\r\n\r\nimport {\r\n    MAXIMIZED_LABEL_FONT_SIZE,\r\n    MINIMIZED_LABEL_FONT_SIZE,\r\n    LABEL_WIGGLE_X_OFFSET,\r\n    ADORNMENT_SIZE,\r\n    ADORNMENT_OFFSET,\r\n} from \"./constants\";\r\n\r\nimport {\r\n    calculateLabelTopPosition,\r\n    calculateInputHeight,\r\n    calculatePadding,\r\n    adjustPaddingOut,\r\n    Padding,\r\n    interpolatePlaceholder,\r\n    calculateOutlinedIconAndAffixTopPosition,\r\n} from \"./helpers\";\r\nimport { AdornmentType, AdornmentSide } from \"./Adornment/enums\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\n\r\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\r\nconst LABEL_PADDING_TOP = 8;\r\nconst MIN_HEIGHT = 64;\r\nconst MIN_DENSE_HEIGHT = 48;\r\nconst INPUT_PADDING_HORIZONTAL = 14;\r\n\r\nclass TextInputOutlined extends React.Component<ChildTextInputProps> {\r\n\r\n    static contextType = ThemeContext as any;\r\n    static defaultProps = {\r\n        disabled: false,\r\n        error: false,\r\n        multiline: false,\r\n        editable: true,\r\n        render: (props: RenderProps) => <NativeTextInput {...props} />,\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            disabled,\r\n            editable,\r\n            label,\r\n            error,\r\n            selectionColor,\r\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n            underlineColor,\r\n            dense,\r\n            style,\r\n            render,\r\n            multiline,\r\n            parentState,\r\n            innerRef,\r\n            onFocus,\r\n            forceFocus,\r\n            onBlur,\r\n            onChangeText,\r\n            onLayoutAnimatedText,\r\n            onLeftAffixLayoutChange,\r\n            onRightAffixLayoutChange,\r\n            left,\r\n            right,\r\n            placeholderTextColor,\r\n            ...rest\r\n        } = this.props;\r\n        const theme = this.context;\r\n\r\n        const adornmentConfig = getAdornmentConfig({ left, right });\r\n\r\n        const { colors, fonts } = theme;\r\n        const font = fonts.regular;\r\n        const hasActiveOutline = parentState.focused || error;\r\n\r\n        const {\r\n            fontSize: fontSizeStyle,\r\n            fontWeight,\r\n            height,\r\n            backgroundColor = colors.background,\r\n            textAlign,\r\n            ...viewStyle\r\n        } = (StyleSheet.flatten(style) || {}) as TextStyle;\r\n        const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\r\n\r\n        let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\r\n\r\n        if (disabled) {\r\n            inputTextColor = activeColor = color(colors.text)\r\n                .alpha(0.54)\r\n                .rgb()\r\n                .string();\r\n            placeholderColor = outlineColor = colors.disabled;\r\n        } else {\r\n            inputTextColor = colors.text;\r\n            activeColor = error ? colors.error : colors.primary;\r\n            placeholderColor = outlineColor = colors.placeholder;\r\n            errorColor = colors.error;\r\n        }\r\n\r\n        const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\r\n        const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\r\n\r\n        const labelWidth = parentState.labelLayout.width;\r\n        const labelHeight = parentState.labelLayout.height;\r\n        const labelHalfWidth = labelWidth / 2;\r\n        const labelHalfHeight = labelHeight / 2;\r\n\r\n        const baseLabelTranslateX =\r\n            (I18nManager.isRTL ? 1 : -1) *\r\n            (labelHalfWidth -\r\n                (labelScale * labelWidth) / 2 -\r\n                (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\r\n\r\n        let labelTranslationXOffset = 0;\r\n        const isAdornmentLeftIcon = adornmentConfig.some(\r\n            ({ side, type }) =>\r\n                side === AdornmentSide.Left && type === AdornmentType.Icon\r\n        );\r\n        if (isAdornmentLeftIcon) {\r\n            labelTranslationXOffset =\r\n                (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\r\n        }\r\n\r\n        const minInputHeight =\r\n            (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\r\n\r\n        const inputHeight = calculateInputHeight(\r\n            labelHeight,\r\n            height,\r\n            minInputHeight\r\n        );\r\n\r\n        const topPosition = calculateLabelTopPosition(\r\n            labelHeight,\r\n            inputHeight,\r\n            LABEL_PADDING_TOP\r\n        );\r\n\r\n        if (height && typeof height !== \"number\") {\r\n            // eslint-disable-next-line\r\n            console.warn('Currently we support only numbers in height prop');\r\n        }\r\n\r\n        const paddingSettings = {\r\n            height: height ? +height : null,\r\n            labelHalfHeight,\r\n            offset: LABEL_PADDING_TOP,\r\n            multiline: multiline ? multiline : null,\r\n            dense: dense ? dense : null,\r\n            topPosition,\r\n            fontSize,\r\n            label,\r\n            scale: fontScale,\r\n            isAndroid: Platform.OS === \"android\",\r\n            styles: StyleSheet.flatten(\r\n                dense ? styles.inputOutlinedDense : styles.inputOutlined\r\n            ) as Padding,\r\n        };\r\n\r\n        const pad = calculatePadding(paddingSettings);\r\n\r\n        const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\r\n\r\n        const baseLabelTranslateY =\r\n            -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\r\n\r\n        const placeholderOpacity = hasActiveOutline\r\n            ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\r\n            : parentState.labelLayout.measured\r\n                ? 1\r\n                : 0;\r\n\r\n        const labelProps = {\r\n            label,\r\n            onLayoutAnimatedText,\r\n            placeholderOpacity,\r\n            error,\r\n            placeholderStyle: styles.placeholder,\r\n            baseLabelTranslateY,\r\n            baseLabelTranslateX,\r\n            font,\r\n            fontSize,\r\n            fontWeight,\r\n            labelScale,\r\n            wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\r\n            topPosition,\r\n            hasActiveOutline,\r\n            activeColor,\r\n            placeholderColor,\r\n            backgroundColor,\r\n            errorColor,\r\n            labelTranslationXOffset,\r\n        };\r\n\r\n        const minHeight = (height ||\r\n            (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\r\n\r\n        const { leftLayout, rightLayout } = parentState;\r\n\r\n        const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\r\n            height: minHeight,\r\n            affixHeight: leftLayout.height || 0,\r\n            labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\r\n        });\r\n\r\n        const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\r\n            height: minHeight,\r\n            affixHeight: rightLayout.height || 0,\r\n            labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\r\n        });\r\n        const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\r\n            height: minHeight,\r\n            affixHeight: ADORNMENT_SIZE,\r\n            labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\r\n        });\r\n\r\n        const rightAffixWidth = right\r\n            ? rightLayout.width || ADORNMENT_SIZE\r\n            : ADORNMENT_SIZE;\r\n\r\n        const leftAffixWidth = left\r\n            ? leftLayout.width || ADORNMENT_SIZE\r\n            : ADORNMENT_SIZE;\r\n\r\n        const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput(\r\n            {\r\n                adornmentConfig,\r\n                rightAffixWidth,\r\n                leftAffixWidth,\r\n                mode: \"outlined\",\r\n            }\r\n        );\r\n        const affixTopPosition = {\r\n            [AdornmentSide.Left]: leftAffixTopPosition,\r\n            [AdornmentSide.Right]: rightAffixTopPosition,\r\n        };\r\n        const onAffixChange = {\r\n            [AdornmentSide.Left]: onLeftAffixLayoutChange,\r\n            [AdornmentSide.Right]: onRightAffixLayoutChange,\r\n        };\r\n\r\n        let adornmentProps: TextInputAdornmentProps = {\r\n            adornmentConfig,\r\n            forceFocus,\r\n            topPosition: {\r\n                [AdornmentType.Icon]: iconTopPosition,\r\n                [AdornmentType.Affix]: affixTopPosition,\r\n            },\r\n            onAffixChange,\r\n            isTextInputFocused: parentState.focused,\r\n        };\r\n        if (adornmentConfig.length) {\r\n            adornmentProps = {\r\n                ...adornmentProps,\r\n                left,\r\n                right,\r\n                textStyle: { ...font, fontSize, fontWeight },\r\n                visible: this.props.parentState.labeled,\r\n            };\r\n        }\r\n\r\n        return (\r\n            <View style={viewStyle}>\r\n                {/*\r\n          Render the outline separately from the container\r\n          This is so that the label can overlap the outline\r\n          Otherwise the border will cut off the label on Android\r\n          */}\r\n                <View>\r\n                    <Outline\r\n                        theme={theme}\r\n                        hasActiveOutline={hasActiveOutline}\r\n                        activeColor={activeColor}\r\n                        outlineColor={outlineColor}\r\n                        backgroundColor={backgroundColor as any}\r\n                    />\r\n                    <View\r\n                        style={{\r\n                            paddingTop: LABEL_PADDING_TOP,\r\n                            paddingBottom: 0,\r\n                            minHeight,\r\n                        }}\r\n                    >\r\n                        <InputLabel\r\n                            parentState={parentState}\r\n                            labelProps={labelProps as any}\r\n                            labelBackground={LabelBackground}\r\n                        />\r\n                        {render?.({\r\n                            ...rest,\r\n                            ref: innerRef,\r\n                            onChangeText,\r\n                            placeholder: label\r\n                                ? parentState.placeholder\r\n                                : this.props.placeholder,\r\n                            placeholderTextColor: placeholderTextColor || placeholderColor,\r\n                            editable: !disabled && editable,\r\n                            selectionColor:\r\n                                typeof selectionColor === \"undefined\"\r\n                                    ? activeColor\r\n                                    : selectionColor,\r\n                            onFocus,\r\n                            onBlur,\r\n                            underlineColorAndroid: \"transparent\",\r\n                            multiline,\r\n                            style: [\r\n                                styles.input,\r\n                                !multiline || (multiline && height)\r\n                                    ? { height: inputHeight }\r\n                                    : {},\r\n                                paddingOut,\r\n                                {\r\n                                    ...font,\r\n                                    fontSize,\r\n                                    fontWeight,\r\n                                    color: inputTextColor,\r\n                                    textAlignVertical: multiline ? \"top\" : \"center\",\r\n                                    textAlign: textAlign\r\n                                        ? textAlign\r\n                                        : I18nManager.isRTL\r\n                                            ? \"right\"\r\n                                            : \"left\",\r\n                                },\r\n                                adornmentStyleAdjustmentForNativeInput,\r\n                            ],\r\n                        } as RenderProps)}\r\n                    </View>\r\n                    <TextInputAdornment {...adornmentProps} />\r\n                </View>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextInputOutlined;\r\n\r\ntype OutlineType = {\r\n    activeColor: string;\r\n    hasActiveOutline?: boolean;\r\n    outlineColor?: string;\r\n    backgroundColor?: string;\r\n    theme: DefaultTheme;\r\n};\r\n\r\nconst Outline = ({\r\n    theme,\r\n    hasActiveOutline,\r\n    activeColor,\r\n    outlineColor,\r\n    backgroundColor,\r\n}: OutlineType) => (\r\n    <View\r\n        pointerEvents=\"none\"\r\n        style={[\r\n            styles.outline,\r\n            {\r\n                backgroundColor,\r\n                borderRadius: theme.roundness,\r\n                borderWidth: hasActiveOutline ? 2 : 1,\r\n                borderColor: hasActiveOutline ? activeColor : outlineColor,\r\n            },\r\n        ]}\r\n    />\r\n);\r\n\r\nconst styles = StyleSheet.create({\r\n    placeholder: {\r\n        position: \"absolute\",\r\n        left: 0,\r\n        paddingHorizontal: INPUT_PADDING_HORIZONTAL,\r\n    },\r\n    outline: {\r\n        position: \"absolute\",\r\n        left: 0,\r\n        right: 0,\r\n        top: 6,\r\n        bottom: 0,\r\n    },\r\n    input: {\r\n        flexGrow: 1,\r\n        paddingHorizontal: INPUT_PADDING_HORIZONTAL,\r\n        margin: 0,\r\n        zIndex: 1,\r\n    },\r\n    inputOutlined: {\r\n        paddingTop: 8,\r\n        paddingBottom: 8,\r\n    },\r\n    inputOutlinedDense: {\r\n        paddingTop: 4,\r\n        paddingBottom: 4,\r\n    },\r\n});\r\n"]}