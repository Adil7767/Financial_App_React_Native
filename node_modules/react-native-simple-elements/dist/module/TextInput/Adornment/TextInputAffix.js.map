{"version":3,"sources":["TextInputAffix.tsx"],"names":["React","color","Text","StyleSheet","Animated","AdornmentSide","ThemeContext","AFFIX_OFFSET","AffixContext","createContext","textStyle","fontFamily","topPosition","side","Left","AffixAdornment","affix","onLayout","visible","paddingHorizontal","TextInputAffix","text","labelStyle","useContext","theme","textColor","colors","alpha","dark","rgb","string","offset","style","top","styles","container","opacity","interpolate","inputRange","outputRange","displayName","create","position","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport color from \"color\";\r\nimport {\r\n    Text,\r\n    StyleSheet,\r\n    StyleProp,\r\n    TextStyle,\r\n    LayoutChangeEvent,\r\n    Animated,\r\n} from \"react-native\";\r\n\r\nimport { AdornmentSide } from \"./enums\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\n\r\nconst AFFIX_OFFSET = 12;\r\n\r\ntype Props = {\r\n    text: string;\r\n    onLayout?: (event: LayoutChangeEvent) => void;\r\n    textStyle?: StyleProp<TextStyle>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n};\r\n\r\ntype ContextState = {\r\n    topPosition: number | null;\r\n    onLayout?: (event: LayoutChangeEvent) => void;\r\n    visible?: Animated.Value;\r\n    textStyle?: StyleProp<TextStyle>;\r\n    side: AdornmentSide;\r\n    paddingHorizontal?: number | string;\r\n};\r\n\r\nconst AffixContext = React.createContext<ContextState>({\r\n    textStyle: {\r\n        fontFamily: \"\",\r\n        color: \"\",\r\n    },\r\n    topPosition: null,\r\n    side: AdornmentSide.Left,\r\n});\r\n\r\nconst AffixAdornment: React.FunctionComponent<{ affix: React.ReactNode; testID: string; } & ContextState> = ({\r\n    affix,\r\n    side,\r\n    textStyle,\r\n    topPosition,\r\n    onLayout,\r\n    visible,\r\n    paddingHorizontal,\r\n}) => {\r\n\r\n    return (\r\n        <AffixContext.Provider\r\n            value={{\r\n                side,\r\n                textStyle,\r\n                topPosition,\r\n                onLayout,\r\n                visible,\r\n                paddingHorizontal,\r\n            }}\r\n        >\r\n            { affix }\r\n        </AffixContext.Provider>\r\n    );\r\n};\r\n\r\nconst TextInputAffix = ({ text, textStyle: labelStyle }: Props) => {\r\n    const {\r\n        textStyle,\r\n        onLayout,\r\n        topPosition,\r\n        side,\r\n        visible,\r\n        paddingHorizontal,\r\n    } = React.useContext(AffixContext);\r\n    const theme = React.useContext(ThemeContext);\r\n    const textColor = color(theme.colors.text)\r\n        .alpha(theme.dark ? 0.7 : 0.54)\r\n        .rgb()\r\n        .string();\r\n\r\n    const offset =\r\n        typeof paddingHorizontal === \"number\" ? paddingHorizontal : AFFIX_OFFSET;\r\n\r\n    const style = {\r\n        top: topPosition,\r\n        [side]: offset,\r\n    };\r\n\r\n    return (\r\n        <Animated.View\r\n            style={\r\n                [\r\n                    styles.container,\r\n                    style,\r\n                    {\r\n                        opacity:\r\n                            visible?.interpolate({\r\n                                inputRange: [0, 1],\r\n                                outputRange: [1, 0],\r\n                            }) || 1,\r\n                    },\r\n                ]\r\n            }\r\n            onLayout={ onLayout }\r\n        >\r\n            <Text style={ [{ color: textColor }, textStyle, labelStyle] }> { text } </Text>\r\n        </Animated.View>\r\n    );\r\n};\r\n\r\nTextInputAffix.displayName = \"TextInput.Affix\";\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        position: \"absolute\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n});\r\n\r\nexport default TextInputAffix;\r\n\r\n// @component-docs ignore-next-line\r\nexport { TextInputAffix, AffixAdornment };\r\n"]}