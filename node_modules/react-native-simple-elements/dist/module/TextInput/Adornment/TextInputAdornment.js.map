{"version":3,"sources":["TextInputAdornment.tsx"],"names":["React","TextInputIcon","IconAdornment","TextInputAffix","AffixAdornment","ADORNMENT_OFFSET","OUTLINED_INPUT_OFFSET","AdornmentSide","AdornmentType","InputMode","getAdornmentConfig","left","right","adornmentConfig","side","Left","adornment","Right","forEach","isValidElement","type","Affix","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","length","adornmentStyleAdjustmentForNativeInput","map","isLeftSide","inputModeAdornemntOffset","Outlined","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","inputAdornmentComponent","commonProps","key","testID"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport TextInputIcon, { IconAdornment } from \"./TextInputIcon\";\r\nimport TextInputAffix, { AffixAdornment } from \"./TextInputAffix\";\r\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from \"../constants\";\r\nimport type {\r\n    LayoutChangeEvent,\r\n    TextStyle,\r\n    StyleProp,\r\n    Animated,\r\n} from \"react-native\";\r\nimport type {\r\n    AdornmentConfig,\r\n    AdornmentStyleAdjustmentForNativeInput,\r\n} from \"./types\";\r\nimport { AdornmentSide, AdornmentType, InputMode } from \"./enums\";\r\n\r\nexport function getAdornmentConfig({\r\n    left,\r\n    right,\r\n}: {\r\n    left?: React.ReactNode;\r\n    right?: React.ReactNode;\r\n}): Array<AdornmentConfig> {\r\n    const adornmentConfig: any[] = [];\r\n    if (left || right) {\r\n        [\r\n            { side: AdornmentSide.Left, adornment: left },\r\n            { side: AdornmentSide.Right, adornment: right },\r\n        ].forEach(({ side, adornment }) => {\r\n            if (adornment && React.isValidElement(adornment)) {\r\n                let type;\r\n                if (adornment.type === TextInputAffix) {\r\n                    type = AdornmentType.Affix;\r\n                } else if (adornment.type === TextInputIcon) {\r\n                    type = AdornmentType.Icon;\r\n                }\r\n                adornmentConfig.push({\r\n                    side,\r\n                    type,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    return adornmentConfig;\r\n}\r\n\r\nexport function getAdornmentStyleAdjustmentForNativeInput({\r\n    adornmentConfig,\r\n    leftAffixWidth,\r\n    rightAffixWidth,\r\n    paddingHorizontal,\r\n    inputOffset = 0,\r\n    mode,\r\n}: {\r\n    inputOffset?: number;\r\n    adornmentConfig: AdornmentConfig[];\r\n    leftAffixWidth: number;\r\n    rightAffixWidth: number;\r\n    mode?: \"outlined\" | \"flat\";\r\n    paddingHorizontal?: number | string;\r\n}): AdornmentStyleAdjustmentForNativeInput | Record<string, any> {\r\n    if (adornmentConfig.length) {\r\n        const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\r\n            ({ type, side }: AdornmentConfig) => {\r\n                const isLeftSide = side === AdornmentSide.Left;\r\n                const inputModeAdornemntOffset =\r\n                    mode === InputMode.Outlined\r\n                        ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\r\n                        : ADORNMENT_OFFSET;\r\n                const paddingKey = `padding${captalize(side)}`;\r\n                const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\r\n                const padding =\r\n                    typeof paddingHorizontal === \"number\"\r\n                        ? paddingHorizontal\r\n                        : inputModeAdornemntOffset;\r\n                const offset = affixWidth + padding;\r\n\r\n                const isAffix = type === AdornmentType.Affix;\r\n                const marginKey = `margin${captalize(side)}`;\r\n\r\n                return {\r\n                    [marginKey]: isAffix ? 0 : offset,\r\n                    [paddingKey]: isAffix ? offset : inputOffset,\r\n                };\r\n            }\r\n        );\r\n        const allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(\r\n            (mergedStyles, currentStyle) => {\r\n                return {\r\n                    ...mergedStyles,\r\n                    ...currentStyle,\r\n                };\r\n            },\r\n            {}\r\n        );\r\n        return allStyleAdjustmentsMerged;\r\n    } else {\r\n        return [{}];\r\n    }\r\n}\r\n\r\nconst captalize = (text: string) =>\r\n    text.charAt(0).toUpperCase() + text.slice(1);\r\n\r\nexport interface TextInputAdornmentProps {\r\n    forceFocus: () => void;\r\n    adornmentConfig: AdornmentConfig[];\r\n    topPosition: {\r\n        [AdornmentType.Affix]: {\r\n            [AdornmentSide.Left]: number | null;\r\n            [AdornmentSide.Right]: number | null;\r\n        };\r\n        [AdornmentType.Icon]: number;\r\n    };\r\n    onAffixChange: {\r\n        [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\r\n        [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\r\n    };\r\n    left?: React.ReactNode;\r\n    right?: React.ReactNode;\r\n    textStyle?: StyleProp<TextStyle>;\r\n    visible?: Animated.Value;\r\n    isTextInputFocused: boolean;\r\n    paddingHorizontal?: number | string;\r\n}\r\n\r\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\r\n    adornmentConfig,\r\n    left,\r\n    right,\r\n    onAffixChange,\r\n    textStyle,\r\n    visible,\r\n    topPosition,\r\n    isTextInputFocused,\r\n    forceFocus,\r\n    paddingHorizontal,\r\n}) => {\r\n    if (adornmentConfig.length) {\r\n        return (\r\n            <>\r\n                {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\r\n                    let inputAdornmentComponent;\r\n                    if (side === AdornmentSide.Left) {\r\n                        inputAdornmentComponent = left;\r\n                    } else if (side === AdornmentSide.Right) {\r\n                        inputAdornmentComponent = right;\r\n                    }\r\n\r\n                    const commonProps = {\r\n                        key: side,\r\n                        side: side,\r\n                        testID: `${side}-${type}-adornment`,\r\n                        isTextInputFocused,\r\n                        paddingHorizontal,\r\n                    };\r\n                    if (type === AdornmentType.Icon) {\r\n                        return (\r\n                            <IconAdornment\r\n                                {...commonProps}\r\n                                icon={inputAdornmentComponent}\r\n                                topPosition={topPosition[AdornmentType.Icon]}\r\n                                forceFocus={forceFocus}\r\n                            />\r\n                        );\r\n                    } else if (type === AdornmentType.Affix) {\r\n                        return (\r\n                            <AffixAdornment\r\n                                {...commonProps}\r\n                                topPosition={topPosition[AdornmentType.Affix][side]}\r\n                                affix={inputAdornmentComponent}\r\n                                textStyle={textStyle}\r\n                                onLayout={onAffixChange[side]}\r\n                                visible={visible}\r\n                            />\r\n                        );\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                })}\r\n            </>\r\n        );\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\nexport default TextInputAdornment;\r\n"]}