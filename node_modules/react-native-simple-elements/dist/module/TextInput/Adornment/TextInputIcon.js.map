{"version":3,"sources":["TextInputIcon.tsx"],"names":["React","View","StyleSheet","IconButton","ICON_SIZE","ICON_OFFSET","StyleContext","createContext","style","isTextInputFocused","forceFocus","IconAdornment","icon","topPosition","side","top","contextState","TextInputIcon","onPress","forceTextInputFocus","rest","useContext","onPressWithFocusControl","useCallback","styles","container","iconButton","displayName","defaultProps","create","position","width","height","justifyContent","alignItems","margin"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAuD,cAAvD;AAEA,OAAOC,UAAP,MAAuB,kBAAvB;AAeA,OAAO,MAAMC,SAAS,GAAG,EAAlB;AACP,MAAMC,WAAW,GAAG,EAApB;AAQA,MAAMC,YAAY,gBAAGN,KAAK,CAACO,aAAN,CAAsC;AACvDC,EAAAA,KAAK,EAAE,EADgD;AAEvDC,EAAAA,kBAAkB,EAAE,KAFmC;AAGvDC,EAAAA,UAAU,EAAE,OAAO,EAAP;AAH2C,CAAtC,CAArB;;AAMA,MAAMC,aAOL,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,WAAR;AAAqBC,EAAAA,IAArB;AAA2BL,EAAAA,kBAA3B;AAA+CC,EAAAA;AAA/C,CAAD,KAAiE;AACjE,QAAMF,KAAK,GAAG;AACVO,IAAAA,GAAG,EAAEF,WADK;AAEV,KAACC,IAAD,GAAQT;AAFE,GAAd;AAIA,QAAMW,YAAY,GAAG;AAAER,IAAAA,KAAF;AAASC,IAAAA,kBAAT;AAA6BC,IAAAA;AAA7B,GAArB;AAEA,sBACI,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEM;AAA9B,KAA6CJ,IAA7C,CADJ;AAGH,CAjBD;;AAmBA,MAAMK,aAAa,GAAG,CAAC;AACnBL,EAAAA,IADmB;AAEnBM,EAAAA,OAFmB;AAGnBC,EAAAA,mBAHmB;AAInB,KAAGC;AAJgB,CAAD,KAKT;AACT,QAAM;AAAEZ,IAAAA,KAAF;AAASC,IAAAA,kBAAT;AAA6BC,IAAAA;AAA7B,MAA4CV,KAAK,CAACqB,UAAN,CAC9Cf,YAD8C,CAAlD;AAIA,QAAMgB,uBAAuB,GAAGtB,KAAK,CAACuB,WAAN,CAAkB,MAAM;AACpD,QAAIJ,mBAAmB,IAAI,CAACV,kBAA5B,EAAgD;AAC5CC,MAAAA,UAAU;AACb;;AACDQ,IAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO;AACV,GAL+B,EAK7B,CAACC,mBAAD,EAAsBT,UAAtB,EAAkCD,kBAAlC,EAAsDS,OAAtD,CAL6B,CAAhC;AAOA,sBACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACM,MAAM,CAACC,SAAR,EAAmBjB,KAAnB;AAAb,kBACI,oBAAC,UAAD;AACI,IAAA,IAAI,EAAEI,IADV;AAEI,IAAA,KAAK,EAAEY,MAAM,CAACE,UAFlB;AAGI,IAAA,IAAI,EAAEtB,SAHV;AAII,IAAA,OAAO,EAAEkB;AAJb,KAKQF,IALR,EADJ,CADJ;AAWH,CA5BD;;AA6BAH,aAAa,CAACU,WAAd,GAA4B,gBAA5B;AAEAV,aAAa,CAACW,YAAd,GAA6B;AACzBT,EAAAA,mBAAmB,EAAE;AADI,CAA7B;AAIA,MAAMK,MAAM,GAAGtB,UAAU,CAAC2B,MAAX,CAAkB;AAC7BJ,EAAAA,SAAS,EAAE;AACPK,IAAAA,QAAQ,EAAE,UADH;AAEPC,IAAAA,KAAK,EAAE3B,SAFA;AAGP4B,IAAAA,MAAM,EAAE5B,SAHD;AAIP6B,IAAAA,cAAc,EAAE,QAJT;AAKPC,IAAAA,UAAU,EAAE;AALL,GADkB;AAQ7BR,EAAAA,UAAU,EAAE;AACRS,IAAAA,MAAM,EAAE;AADA;AARiB,CAAlB,CAAf;AAaA,eAAelB,aAAf,C,CAEA;;AACA,SAASN,aAAT","sourcesContent":["import React from \"react\";\r\nimport { View, StyleSheet, StyleProp, ViewStyle } from \"react-native\";\r\n\r\nimport IconButton from \"../../IconButton\";\r\nimport { $Omit } from \"../../types\";\r\nimport { DefaultTheme } from \"styled-components\";\r\n\r\ntype Props = $Omit<\r\n    React.ComponentProps<typeof IconButton>,\r\n    \"icon\" | \"theme\"\r\n> & {\r\n    icon: React.ReactElement;\r\n    onPress?: () => void;\r\n    forceTextInputFocus?: boolean;\r\n    style?: StyleProp<ViewStyle>;\r\n    theme?: DefaultTheme;\r\n};\r\n\r\nexport const ICON_SIZE = 24;\r\nconst ICON_OFFSET = 12;\r\n\r\ntype StyleContextType = {\r\n    style: StyleProp<ViewStyle>;\r\n    isTextInputFocused: boolean;\r\n    forceFocus: () => void;\r\n};\r\n\r\nconst StyleContext = React.createContext<StyleContextType>({\r\n    style: {},\r\n    isTextInputFocused: false,\r\n    forceFocus: () => ({} as any),\r\n});\r\n\r\nconst IconAdornment: React.FunctionComponent<\r\n    {\r\n        testID: string;\r\n        icon: React.ReactNode;\r\n        topPosition: number;\r\n        side: \"left\" | \"right\";\r\n    } & Omit<StyleContextType, \"style\">\r\n> = ({ icon, topPosition, side, isTextInputFocused, forceFocus }) => {\r\n    const style = {\r\n        top: topPosition,\r\n        [side]: ICON_OFFSET,\r\n    };\r\n    const contextState = { style, isTextInputFocused, forceFocus };\r\n\r\n    return (\r\n        <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\r\n    );\r\n};\r\n\r\nconst TextInputIcon = ({\r\n    icon,\r\n    onPress,\r\n    forceTextInputFocus,\r\n    ...rest\r\n}: Props) => {\r\n    const { style, isTextInputFocused, forceFocus } = React.useContext(\r\n        StyleContext\r\n    );\r\n\r\n    const onPressWithFocusControl = React.useCallback(() => {\r\n        if (forceTextInputFocus && !isTextInputFocused) {\r\n            forceFocus();\r\n        }\r\n        onPress?.();\r\n    }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\r\n\r\n    return (\r\n        <View style={[styles.container, style]}>\r\n            <IconButton\r\n                icon={icon}\r\n                style={styles.iconButton}\r\n                size={ICON_SIZE}\r\n                onPress={onPressWithFocusControl}\r\n                {...rest}\r\n            />\r\n        </View>\r\n    );\r\n};\r\nTextInputIcon.displayName = \"TextInput.Icon\";\r\n\r\nTextInputIcon.defaultProps = {\r\n    forceTextInputFocus: true,\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        position: \"absolute\",\r\n        width: ICON_SIZE,\r\n        height: ICON_SIZE,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    iconButton: {\r\n        margin: 0,\r\n    },\r\n});\r\n\r\nexport default TextInputIcon;\r\n\r\n// @component-docs ignore-next-line\r\nexport { IconAdornment };\r\n"]}