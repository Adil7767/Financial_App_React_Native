{"version":3,"sources":["RadioButtonAndroid.tsx"],"names":["React","Animated","View","StyleSheet","color","RadioButtonContext","handlePress","isChecked","TouchableRipple","ThemeContext","BORDER_WIDTH","RadioButtonAndroid","disabled","onPress","value","status","testID","rest","theme","useContext","current","borderAnim","useRef","Value","radioAnim","isFirstRendering","scale","animation","useEffect","setValue","timing","toValue","duration","useNativeDriver","start","checkedColor","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","radioColor","context","checked","contextValue","fade","undefined","onValueChange","styles","container","radio","borderColor","borderWidth","absoluteFill","radioContainer","dot","backgroundColor","transform","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin","marginTop","marginRight","marginBottom","marginLeft","RadioButtonAndroidWithTheme"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Animated, View, StyleSheet } from \"react-native\";\r\nimport color from \"color\";\r\nimport { RadioButtonContext, RadioButtonContextType } from \"./RadioButtonGroup\";\r\nimport { handlePress, isChecked } from \"./utils\";\r\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\r\nimport { $RemoveChildren } from \"../types\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\n\r\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\r\n    /**\r\n     * Value of the radio button\r\n     */\r\n    value: string;\r\n    /**\r\n     * Status of radio button.\r\n     */\r\n    status?: \"checked\" | \"unchecked\";\r\n    /**\r\n     * Whether radio is disabled.\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * Function to execute on press.\r\n     */\r\n    onPress?: (param?: any) => void;\r\n    /**\r\n     * Custom color for unchecked radio.\r\n     */\r\n    uncheckedColor?: string;\r\n    /**\r\n     * Custom color for radio.\r\n     */\r\n    color?: string;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n    /**\r\n     * testID to be used on tests.\r\n     */\r\n    testID?: string;\r\n};\r\n\r\nconst BORDER_WIDTH = 2;\r\n\r\n/**\r\n * Radio buttons allow the selection a single option from a set.\r\n * This component follows platform guidelines for Android, but can be used\r\n * on any platform.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img src=\"screenshots/radio-enabled.android.png\" />\r\n *     <figcaption>Enabled</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/radio-disabled.android.png\" />\r\n *     <figcaption>Disabled</figcaption>\r\n *   </figure>\r\n * </div>\r\n */\r\nconst RadioButtonAndroid = ({\r\n    disabled,\r\n    onPress,\r\n    value,\r\n    status,\r\n    testID,\r\n    ...rest\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n    const { current: borderAnim } = React.useRef<Animated.Value>(\r\n        new Animated.Value(BORDER_WIDTH)\r\n    );\r\n\r\n    const { current: radioAnim } = React.useRef<Animated.Value>(\r\n        new Animated.Value(1)\r\n    );\r\n\r\n    const isFirstRendering = React.useRef<boolean>(true);\r\n\r\n    const { scale } = theme.animation;\r\n\r\n    React.useEffect(() => {\r\n        // Do not run animation on very first rendering\r\n        if (isFirstRendering.current) {\r\n            isFirstRendering.current = false;\r\n            return;\r\n        }\r\n\r\n        if (status === \"checked\") {\r\n            radioAnim.setValue(1.2);\r\n\r\n            Animated.timing(radioAnim, {\r\n                toValue: 1,\r\n                duration: 150 * scale,\r\n                useNativeDriver: true,\r\n            }).start();\r\n        } else {\r\n            borderAnim.setValue(10);\r\n\r\n            Animated.timing(borderAnim, {\r\n                toValue: BORDER_WIDTH,\r\n                duration: 150 * scale,\r\n                useNativeDriver: false,\r\n            }).start();\r\n        }\r\n    }, [status, borderAnim, radioAnim, scale]);\r\n\r\n    const checkedColor = rest.color || theme.colors.accent;\r\n    const uncheckedColor =\r\n        rest.uncheckedColor ||\r\n        color(theme.colors.text)\r\n            .alpha(theme.dark ? 0.7 : 0.54)\r\n            .rgb()\r\n            .string();\r\n\r\n    let rippleColor: string, radioColor: string;\r\n\r\n    return (\r\n        <RadioButtonContext.Consumer>\r\n            {(context?: RadioButtonContextType) => {\r\n                const checked =\r\n                    isChecked({\r\n                        contextValue: context?.value,\r\n                        status,\r\n                        value,\r\n                    }) === \"checked\";\r\n\r\n                if (disabled) {\r\n                    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\r\n                    radioColor = theme.colors.disabled;\r\n                } else {\r\n                    rippleColor = color(checkedColor).fade(0.32).rgb().string();\r\n                    radioColor = checked ? checkedColor : uncheckedColor;\r\n                }\r\n\r\n                return (\r\n                    <TouchableRipple\r\n                        {...rest}\r\n                        borderless\r\n                        rippleColor={rippleColor}\r\n                        onPress={\r\n                            disabled\r\n                                ? undefined\r\n                                : () => {\r\n                                    handlePress({\r\n                                        onPress,\r\n                                        onValueChange: context?.onValueChange,\r\n                                        value,\r\n                                    });\r\n                                }\r\n                        }\r\n                        // accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\r\n                        // accessibilityComponentType={\r\n                        //     checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\r\n                        // }\r\n                        accessibilityRole=\"radio\"\r\n                        accessibilityState={{ disabled, checked }}\r\n                        accessibilityLiveRegion=\"polite\"\r\n                        style={styles.container}\r\n                        testID={testID}\r\n                    >\r\n                        <Animated.View\r\n                            style={[\r\n                                styles.radio,\r\n                                {\r\n                                    borderColor: radioColor,\r\n                                    borderWidth: borderAnim,\r\n                                },\r\n                            ]}\r\n                        >\r\n                            {checked ? (\r\n                                <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\r\n                                    <Animated.View\r\n                                        style={[\r\n                                            styles.dot,\r\n                                            {\r\n                                                backgroundColor: radioColor,\r\n                                                transform: [{ scale: radioAnim }],\r\n                                            },\r\n                                        ]}\r\n                                    />\r\n                                </View>\r\n                            ) : null}\r\n                        </Animated.View>\r\n                    </TouchableRipple>\r\n                );\r\n            }}\r\n        </RadioButtonContext.Consumer>\r\n    );\r\n};\r\n\r\nRadioButtonAndroid.displayName = \"RadioButton.Android\";\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        borderRadius: 18,\r\n    },\r\n    radioContainer: {\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    radio: {\r\n        height: 20,\r\n        width: 20,\r\n        borderRadius: 10,\r\n        margin: 8,\r\n        marginTop: 8,\r\n        marginRight: 8,\r\n        marginBottom: 8,\r\n        marginLeft: 8,\r\n    },\r\n    dot: {\r\n        height: 10,\r\n        width: 10,\r\n        borderRadius: 5,\r\n    },\r\n});\r\n\r\nexport default RadioButtonAndroid;\r\n\r\n// @component-docs ignore-next-line\r\nconst RadioButtonAndroidWithTheme = RadioButtonAndroid;\r\n// @component-docs ignore-next-line\r\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };\r\n"]}