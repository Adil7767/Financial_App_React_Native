{"version":3,"sources":["Text.tsx"],"names":["React","Text","NativeText","StyleSheet","ThemeContext","style","rest","ref","root","useRef","theme","useContext","useImperativeHandle","setNativeProps","args","current","fonts","regular","color","colors","text","styles","create","textAlign","forwardRef"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACIC,IAAI,IAAIC,UADZ,EAIIC,UAJJ,QAKO,cALP;AAMA,SAAuBC,YAAvB,QAA2C,mBAA3C;;AAYA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMH,IAA6C,GAAG,CAClD;AAAEI,EAAAA,KAAF;AAAS,KAAGC;AAAZ,CADkD,EAElDC,GAFkD,KAGjD;AACD,QAAMC,IAAI,GAAGR,KAAK,CAACS,MAAN,CAAgC,IAAhC,CAAb;AACA,QAAMC,KAAK,GAAGV,KAAK,CAACW,UAAN,CAAiBP,YAAjB,CAAd;AAEAJ,EAAAA,KAAK,CAACY,mBAAN,CAA0BL,GAA1B,EAA+B,OAAO;AAClCM,IAAAA,cAAc,EAAGC,IAAD;AAAA;;AAAA,8BAA+BN,IAAI,CAACO,OAApC,kDAA+B,cAAcF,cAAd,CAA6BC,IAA7B,CAA/B;AAAA;AADkB,GAAP,CAA/B;AAIA,sBACI,oBAAC,UAAD,eACQR,IADR;AAEI,IAAA,GAAG,EAAEE,IAFT;AAGI,IAAA,KAAK,EAAE,CACH,EACI,GAAGE,KAAK,CAACM,KAAN,CAAYC,OADnB;AAEIC,MAAAA,KAAK,EAAER,KAAK,CAACS,MAAN,CAAaC;AAFxB,KADG,EAKHC,MAAM,CAACD,IALJ,EAMHf,KANG;AAHX,KADJ;AAcH,CAzBD;;AA2BA,MAAMgB,MAAM,GAAGlB,UAAU,CAACmB,MAAX,CAAkB;AAC7BF,EAAAA,IAAI,EAAE;AACFG,IAAAA,SAAS,EAAE;AADT;AADuB,CAAlB,CAAf;AAMA,4BAAevB,KAAK,CAACwB,UAAN,CAAiBvB,IAAjB,CAAf","sourcesContent":["import * as React from \"react\";\nimport {\n    Text as NativeText,\n    TextStyle,\n    StyleProp,\n    StyleSheet,\n} from \"react-native\";\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\n\ntype Props = React.ComponentProps<typeof NativeText> & {\n    children?: React.ReactNode,\n\n    style?: StyleProp<TextStyle>;\n    /**\n     * @optional\n     */\n    theme?: DefaultTheme;\n};\n\n// @component-group Typography\n\n/**\n * Text component which follows styles from the theme.\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst Text: React.RefForwardingComponent<{}, Props> = (\n    { style, ...rest }: Props,\n    ref\n) => {\n    const root = React.useRef<NativeText | null>(null);\n    const theme = React.useContext(ThemeContext);\n\n    React.useImperativeHandle(ref, () => ({\n        setNativeProps: (args: Record<string, any>) => root.current?.setNativeProps(args),\n    }));\n\n    return (\n        <NativeText\n            {...rest}\n            ref={root}\n            style={[\n                {\n                    ...theme.fonts.regular,\n                    color: theme.colors.text,\n                },\n                styles.text,\n                style,\n            ]}\n        />\n    );\n};\n\nconst styles = StyleSheet.create({\n    text: {\n        textAlign: \"left\",\n    },\n});\n\nexport default React.forwardRef(Text);\n"]}