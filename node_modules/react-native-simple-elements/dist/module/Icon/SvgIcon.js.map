{"version":3,"sources":["SvgIcon.tsx"],"names":["React","Text","NativeText","Platform","ThemeContext","isImageSource","source","Object","prototype","hasOwnProperty","call","uri","OS","startsWith","test","getIconId","isValidIcon","isEqualIcon","a","b","SvgIcon","props","icon","Icon","color","rest","theme","useContext","iconColor","colors","text","size","outline","colorStyle","stroke","fill","defaultProps","direction"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACIC,IAAI,IAAIC,UADZ,EAC8CC,QAD9C,QAGO,cAHP;AAIA,SAAuBC,YAAvB,QAA2C,mBAA3C;;AAcA,MAAMC,aAAa,GAAIC,MAAD,IAClB;AACC,OAAOA,MAAP,KAAkB,QAAlB,IACGA,MAAM,KAAK,IADd,IAEGC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6C,KAA7C,CAFH,IAGG,OAAOA,MAAM,CAACK,GAAd,KAAsB,QAH1B,IAIA;AACA,OAAOL,MAAP,KAAkB,QALlB,IAMA;AACCH,QAAQ,CAACS,EAAT,KAAgB,KAAhB,IACG,OAAON,MAAP,KAAkB,QADrB,KAEIA,MAAM,CAACO,UAAP,CAAkB,YAAlB,KACG,gCAAgCC,IAAhC,CAAqCR,MAArC,CAHP,CATL;;AAcA,MAAMS,SAAS,GAAIT,MAAD,IAAiB;AAC/B,MACI,OAAOA,MAAP,KAAkB,QAAlB,IACAA,MAAM,KAAK,IADX,IAEAC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6C,KAA7C,CAFA,IAGA,OAAOA,MAAM,CAACK,GAAd,KAAsB,QAJ1B,EAKE;AACE,WAAOL,MAAM,CAACK,GAAd;AACH;;AAED,SAAOL,MAAP;AACH,CAXD;;AAaA,OAAO,MAAMU,WAAW,GAAIV,MAAD,IACvB,OAAOA,MAAP,KAAkB,QAAlB,IACA,OAAOA,MAAP,KAAkB,UADlB,IAEAD,aAAa,CAACC,MAAD,CAHV;AAKP,OAAO,MAAMW,WAAW,GAAG,CAACC,CAAD,EAASC,CAAT,KACvBD,CAAC,KAAKC,CAAN,IAAWJ,SAAS,CAACG,CAAD,CAAT,KAAiBH,SAAS,CAACI,CAAD,CADlC;;AAqBP,MAAMC,OAAO,GAAIC,KAAD,IAAkB;AAC9B,QAAM;AAAEC,IAAAA,IAAI,EAAEC,IAAR;AAAcC,IAAAA,KAAd;AAAqB,OAAGC;AAAxB,MAAiCJ,KAAvC;AACA,QAAMK,KAAK,GAAG1B,KAAK,CAAC2B,UAAN,CAAiBvB,YAAjB,CAAd;AACA,QAAMwB,SAAS,GAAGJ,KAAK,IAAIE,KAAK,CAACG,MAAN,CAAaC,IAAxC;AACA,QAAMC,IAAI,GAAGN,IAAI,CAACM,IAAL,IAAa,EAA1B;AACA,QAAMC,OAAO,GAAGP,IAAI,CAACO,OAAL,IAAgB,KAAhC;AAEA,QAAMC,UAAU,GAAGD,OAAO,GAAG;AACzBE,IAAAA,MAAM,EAAEN;AADiB,GAAH,GAEtB;AACAO,IAAAA,IAAI,EAAEP;AADN,GAFJ;AAMA,SAAOP,KAAK,CAACC,IAAN;AAAA;AAEC;AACA,sBAAC,IAAD,eACQG,IADR,EAEQQ,UAFR;AAGI,IAAA,KAAK,EAAEF,IAHX;AAII,IAAA,MAAM,EAAEA;AAJZ,KAHD,gBAUH,oBAAC,UAAD,eAVJ;AAWH,CAxBD;;AA0BAX,OAAO,CAACgB,YAAR,GAAuB;AACnBC,EAAAA,SAAS,EAAE;AADQ,CAAvB;AAIA,eAAejB,OAAf","sourcesContent":["import * as React from \"react\";\nimport {\n    Text as NativeText, TextStyle, StyleProp, Platform,\n    ImageSourcePropType,\n} from \"react-native\";\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\n\ntype IconSourceBase = string | ImageSourcePropType;\n\nexport type IconSource =\n    | IconSourceBase\n    | Readonly<{ source: IconSourceBase; direction: \"rtl\" | \"ltr\" | \"auto\" }>\n    | ((props: IconProps & { color: string }) => React.ReactNode);\n\ntype IconProps = {\n    size: number;\n    allowFontScaling?: boolean;\n};\n\nconst isImageSource = (source: any) =>\n    // source is an object with uri\n    (typeof source === \"object\" &&\n        source !== null &&\n        Object.prototype.hasOwnProperty.call(source, \"uri\") &&\n        typeof source.uri === \"string\") ||\n    // source is a module, e.g. - require('image')\n    typeof source === \"number\" ||\n    // image url on web\n    (Platform.OS === \"web\" &&\n        typeof source === \"string\" &&\n        (source.startsWith(\"data:image\") ||\n            /\\.(bmp|jpg|jpeg|png|gif|svg)$/.test(source)));\n\nconst getIconId = (source: any) => {\n    if (\n        typeof source === \"object\" &&\n        source !== null &&\n        Object.prototype.hasOwnProperty.call(source, \"uri\") &&\n        typeof source.uri === \"string\"\n    ) {\n        return source.uri;\n    }\n\n    return source;\n};\n\nexport const isValidIcon = (source: any) =>\n    typeof source === \"string\" ||\n    typeof source === \"function\" ||\n    isImageSource(source);\n\nexport const isEqualIcon = (a: any, b: any) =>\n    a === b || getIconId(a) === getIconId(b);\n\ntype Props = React.ComponentProps<typeof NativeText> & {\n    icon: React.ReactElement,\n\n    size?: number,\n\n    color?: string,\n\n    outline?: boolean,\n\n    direction?: string,\n\n    style?: StyleProp<TextStyle>;\n    /**\n     * @optional\n     */\n    theme?: DefaultTheme;\n};\n\nconst SvgIcon = (props: Props) => {\n    const { icon: Icon, color, ...rest } = props;\n    const theme = React.useContext(ThemeContext);\n    const iconColor = color || theme.colors.text;\n    const size = rest.size || 24;\n    const outline = rest.outline || false;\n\n    const colorStyle = outline ? {\n        stroke: iconColor,\n    } : {\n        fill: iconColor,\n    };\n\n    return props.icon ?\n        (\n            // @ts-ignore\n            <Icon\n                {...rest}\n                {...colorStyle}\n                width={size}\n                height={size}\n            />\n        ) :\n        <NativeText>Icon</NativeText>;\n};\n\nSvgIcon.defaultProps = {\n    direction: \"ltr\",\n};\n\nexport default SvgIcon;\n"]}