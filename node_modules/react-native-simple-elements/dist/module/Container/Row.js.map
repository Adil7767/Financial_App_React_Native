{"version":3,"sources":["Row.tsx"],"names":["React","screenSize","isHidden","View","cloneElements","props","rowSize","size","Children","map","children","element","cloneElement","Row","style","display","flexDirection","flexWrap","nowrap","alignItems","justifyContent","backgroundColor"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,IAAT,QAAqB,cAArB;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC7B;AACA,QAAMC,OAAO,GAAGD,KAAK,CAACE,IAAN,GAAa,CAAb,GAAiBF,KAAK,CAACE,IAAvB,GAA8B,EAA9C;AAEA,SAAOP,KAAK,CAACQ,QAAN,CAAeC,GAAf,CAAmBJ,KAAK,CAACK,QAAzB,EAAoCC,OAAD,IAAa;AACnD,wBAAOX,KAAK,CAACY,YAAN,CAAmBD,OAAnB,EAA4B;AAAEL,MAAAA,OAAO,EAAEA;AAAX,KAA5B,CAAP;AACH,GAFM,CAAP;AAGH,CAPD;;AAqBA,MAAMO,GAAG,GAAIR,KAAD,IAAkB;AAC1B,MAAIH,QAAQ,CAACD,UAAD,EAAaI,KAAb,CAAZ,EAAiC;AAC7B,WAAO,IAAP;AACH,GAFD,MAEO;AACH,wBACI,oBAAC,IAAD,eACQA,KADR;AAEI,MAAA,KAAK,EAAE,CAACA,KAAK,CAACS,KAAP,EACH;AACIC,QAAAA,OAAO,EAAE,MADb;AAEIC,QAAAA,aAAa,EAAE,KAFnB;AAGIC,QAAAA,QAAQ,EAAEZ,KAAK,CAACa,MAAN,GAAe,QAAf,GAA0B,MAHxC;AAIIC,QAAAA,UAAU,EAAEd,KAAK,CAACc,UAJtB;AAKIC,QAAAA,cAAc,EAAEf,KAAK,CAACe,cAL1B;AAMIC,QAAAA,eAAe,EAAE;AANrB,OADG,CAFX;AAYI,MAAA,MAAM,EAAC;AAZX,QAcKjB,aAAa,CAACC,KAAD,CAdlB,CADJ;AAkBH;AACJ,CAvBD;;AAyBA,eAAeQ,GAAf","sourcesContent":["import * as React from \"react\";\nimport { screenSize } from \"./utils/ScreenSize\";\nimport { isHidden } from \"./utils/helpers\";\nimport { View } from \"react-native\";\n\nconst cloneElements = (props) => {\n    //if size doesn't exist or is 0 default to 12\n    const rowSize = props.size > 0 ? props.size : 12;\n\n    return React.Children.map(props.children, (element) => {\n        return React.cloneElement(element, { rowSize: rowSize });\n    });\n};\n\ntype Props = {\n    size?: number,\n    nowrap?: boolean,\n    smHidden?: boolean,\n    mdHidden?: boolean,\n    lgHidden?: boolean,\n    style?: any,\n    alignItems?: string,\n    justifyContent?: string,\n    children: React.ReactNode,\n};\n\nconst Row = (props: Props) => {\n    if (isHidden(screenSize, props)) {\n        return null;\n    } else {\n        return (\n            <View \n                {...props}\n                style={[props.style,\n                    {\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        flexWrap: props.nowrap ? \"nowrap\" : \"wrap\",\n                        alignItems: props.alignItems,\n                        justifyContent: props.justifyContent,\n                        backgroundColor: \"transparent\",\n                    }]\n                }\n                testID=\"row\"\n            >\n                {cloneElements(props)}\n            </View>\n        );\n    }\n};\n\nexport default Row;\n"]}