function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from "react";
import useScreenSize from "./utils/useScreenSize";
import { isHidden, getComponentWidth, getComponentOffset } from "./utils/helpers";
import { View } from "react-native";

const Column = props => {
  const {
    sm,
    smOffset,
    smHidden,
    md,
    mdOffset,
    mdHidden,
    lg,
    lgOffset,
    lgHidden,
    rowSize,
    ...rest
  } = props;
  const gridProps = {
    sm,
    smOffset,
    smHidden,
    md,
    mdOffset,
    mdHidden,
    lg,
    lgOffset,
    lgHidden,
    rowSize
  };
  const {
    screenSizeType
  } = useScreenSize();

  if (isHidden(screenSizeType, gridProps)) {
    return null;
  } else {
    return /*#__PURE__*/React.createElement(View, _extends({}, rest, {
      style: [props.style, {
        display: "flex",
        width: getComponentWidth(screenSizeType, gridProps),
        flexDirection: "column",
        backgroundColor: "transparent",
        marginLeft: getComponentOffset(screenSizeType, gridProps)
      }],
      testID: "column"
    }), rest.children);
  }
};

export default Column;
//# sourceMappingURL=Column.js.map