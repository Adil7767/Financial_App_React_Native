{"version":3,"sources":["Column.tsx"],"names":["React","useScreenSize","isHidden","getComponentWidth","getComponentOffset","View","Column","props","sm","smOffset","smHidden","md","mdOffset","mdHidden","lg","lgOffset","lgHidden","rowSize","rest","gridProps","screenSizeType","style","display","width","flexDirection","backgroundColor","marginLeft","children"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,SAASC,QAAT,EAAmBC,iBAAnB,EAAsCC,kBAAtC,QAAgE,iBAAhE;AACA,SAASC,IAAT,QAAqB,cAArB;;AAiBA,MAAMC,MAAM,GAAIC,KAAD,IAAkB;AAC7B,QAAM;AACFC,IAAAA,EADE;AAEFC,IAAAA,QAFE;AAGFC,IAAAA,QAHE;AAIFC,IAAAA,EAJE;AAKFC,IAAAA,QALE;AAMFC,IAAAA,QANE;AAOFC,IAAAA,EAPE;AAQFC,IAAAA,QARE;AASFC,IAAAA,QATE;AAUFC,IAAAA,OAVE;AAWF,OAAGC;AAXD,MAYFX,KAZJ;AAcA,QAAMY,SAAS,GAAG;AACdX,IAAAA,EADc;AAEdC,IAAAA,QAFc;AAGdC,IAAAA,QAHc;AAIdC,IAAAA,EAJc;AAKdC,IAAAA,QALc;AAMdC,IAAAA,QANc;AAOdC,IAAAA,EAPc;AAQdC,IAAAA,QARc;AASdC,IAAAA,QATc;AAUdC,IAAAA;AAVc,GAAlB;AAaA,QAAM;AAAEG,IAAAA;AAAF,MAAqBnB,aAAa,EAAxC;;AAEA,MAAIC,QAAQ,CAACkB,cAAD,EAAiBD,SAAjB,CAAZ,EAAyC;AACrC,WAAO,IAAP;AACH,GAFD,MAEO;AACH,wBACI,oBAAC,IAAD,eACQD,IADR;AAEI,MAAA,KAAK,EAAE,CACHX,KAAK,CAACc,KADH,EAEH;AACIC,QAAAA,OAAO,EAAE,MADb;AAEIC,QAAAA,KAAK,EAAEpB,iBAAiB,CAACiB,cAAD,EAAiBD,SAAjB,CAF5B;AAGIK,QAAAA,aAAa,EAAE,QAHnB;AAIIC,QAAAA,eAAe,EAAE,aAJrB;AAKIC,QAAAA,UAAU,EAAEtB,kBAAkB,CAACgB,cAAD,EAAiBD,SAAjB;AALlC,OAFG,CAFX;AAYI,MAAA,MAAM,EAAC;AAZX,QAcKD,IAAI,CAACS,QAdV,CADJ;AAkBH;AACJ,CApDD;;AAsDA,eAAerB,MAAf","sourcesContent":["import * as React from \"react\";\nimport useScreenSize from \"./utils/useScreenSize\";\nimport { isHidden, getComponentWidth, getComponentOffset } from \"./utils/helpers\";\nimport { View } from \"react-native\";\n\ntype Props = {\n    sm?: number,\n    smOffset?: number,\n    smHidden?: boolean,\n    md?: number,\n    mdOffset?: number,\n    mdHidden?: boolean,\n    lg?: number,\n    lgOffset?: number,\n    lgHidden?: boolean,\n    rowSize?: number,\n    style?: any,\n    children: React.ReactNode,\n};\n\nconst Column = (props: Props) => {\n    const {\n        sm,\n        smOffset,\n        smHidden,\n        md,\n        mdOffset,\n        mdHidden,\n        lg,\n        lgOffset,\n        lgHidden,\n        rowSize,\n        ...rest\n    } = props;\n\n    const gridProps = {\n        sm,\n        smOffset,\n        smHidden,\n        md,\n        mdOffset,\n        mdHidden,\n        lg,\n        lgOffset,\n        lgHidden,\n        rowSize\n    };\n\n    const { screenSizeType } = useScreenSize();\n\n    if (isHidden(screenSizeType, gridProps)) {\n        return null;\n    } else {\n        return (\n            <View\n                {...rest}\n                style={[\n                    props.style,\n                    {\n                        display: \"flex\",\n                        width: getComponentWidth(screenSizeType, gridProps),\n                        flexDirection: \"column\",\n                        backgroundColor: \"transparent\",\n                        marginLeft: getComponentOffset(screenSizeType, gridProps)\n                    }]\n                }\n                testID=\"column\"\n            >\n                {rest.children}\n            </View>\n        );\n    }\n};\n\nexport default Column;\n"]}