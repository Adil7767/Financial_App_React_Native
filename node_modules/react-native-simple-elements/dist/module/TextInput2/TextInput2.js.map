{"version":3,"sources":["TextInput2.tsx"],"names":["React","Text","View","TextInput","Animated","Easing","Platform","StyleSheet","ThemeContext","renderNode","SvgIcon","renderText","content","defaultProps","style","flatten","Input","Component","Value","shakeAnimationValue","setValue","timing","duration","toValue","easing","bounce","useNativeDriver","start","focus","input","blur","clear","isFocused","setNativeProps","nativeProps","render","containerStyle","disabled","disabledInputStyle","inputContainerStyle","leftIcon","leftIconContainerStyle","rightIcon","rightIconContainerStyle","InputComponent","inputStyle","errorProps","errorStyle","errorMessage","label","labelStyle","labelProps","renderErrorMessage","attributes","props","translateX","interpolate","inputRange","outputRange","hideErrorMessage","styles","container","fontSize","color","context","colors","surface","select","android","fontFamily","fontWeight","default","flexDirection","borderBottomWidth","alignItems","borderColor","transform","iconContainer","ref","black","flex","minHeight","disabledInput","margin","error","height","padding","create","width","paddingHorizontal","opacity","justifyContent","paddingRight","marginVertical"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n    Text,\n    View,\n    TextInput,\n    Animated,\n    Easing,\n    Platform,\n    StyleSheet,\n    ViewStyle,\n    StyleProp,\n    TextStyle,\n    TextInputProps,\n} from \"react-native\";\nimport { ThemeContext } from \"styled-components\";\nimport { renderNode } from \"../helpers\";\nimport { SvgIcon } from \"../Icon\";\n\nconst renderText = (content: any, defaultProps: any, style: StyleProp<any>) =>\n    renderNode(Text, content, {\n        ...defaultProps,\n        style: StyleSheet.flatten([style, defaultProps && defaultProps.style]),\n    });\n\nexport type InputProps = React.ComponentPropsWithRef<typeof TextInput> & {\n    containerStyle?: StyleProp<ViewStyle>;\n    disabled?: boolean;\n    disabledInputStyle?: StyleProp<TextStyle>;\n    inputContainerStyle?: StyleProp<ViewStyle>;\n    leftIcon?: React.ReactElement;\n    leftIconContainerStyle?: StyleProp<ViewStyle>;\n    rightIcon?: React.ReactElement;\n    rightIconContainerStyle?: StyleProp<ViewStyle>;\n    inputStyle?: StyleProp<TextStyle>;\n    InputComponent?: React.ComponentType | React.ForwardRefExoticComponent<any>;\n    errorProps?: Record<string, any>;\n    errorStyle?: StyleProp<TextStyle>;\n    errorMessage?: string;\n    label?: string | React.ReactNode;\n    labelStyle?: StyleProp<TextStyle>;\n    labelProps?: Record<string, any>;\n    renderErrorMessage?: boolean;\n};\n\nexport class Input extends React.Component<\n    InputProps\n> {\n    static displayName = \"Input\";\n    static contextType = ThemeContext as any;\n\n    input: any;\n    shakeAnimationValue = new Animated.Value(0);\n\n    focus(): void {\n        this.input.focus();\n    }\n\n    blur(): void {\n        this.input.blur();\n    }\n\n    clear(): void {\n        this.input.clear();\n    }\n\n    isFocused(): boolean {\n        return this.input.isFocused();\n    }\n\n    setNativeProps(nativeProps: Partial<TextInputProps>): void {\n        this.input.setNativeProps(nativeProps);\n    }\n\n    shake = () => {\n        const { shakeAnimationValue } = this;\n        shakeAnimationValue.setValue(0);\n        // Animation duration based on Material Design\n        // https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations\n        Animated.timing(shakeAnimationValue, {\n            duration: 375,\n            toValue: 3,\n            easing: Easing.bounce,\n            useNativeDriver: true,\n        }).start();\n    };\n\n    render() {\n        const {\n            containerStyle,\n            disabled,\n            disabledInputStyle,\n            inputContainerStyle,\n            leftIcon,\n            leftIconContainerStyle,\n            rightIcon,\n            rightIconContainerStyle,\n            InputComponent = TextInput,\n            inputStyle,\n            errorProps,\n            errorStyle,\n            errorMessage,\n            label,\n            labelStyle,\n            labelProps,\n            renderErrorMessage = true,\n            style,\n            ...attributes\n        } = this.props;\n\n        const translateX = this.shakeAnimationValue.interpolate({\n            inputRange: [0, 0.5, 1, 1.5, 2, 2.5, 3],\n            outputRange: [0, -15, 0, 15, 0, -15, 0],\n        });\n\n        const hideErrorMessage = !renderErrorMessage && !errorMessage;\n\n        return (\n            <View\n                testID=\"input__view-wrapper\"\n                style={StyleSheet.flatten([styles.container, containerStyle])}\n            >\n                {renderText(\n                    label,\n                    { style: labelStyle, ...labelProps },\n                    {\n                        fontSize: 16,\n                        color: this.context.colors.surface,\n                        ...Platform.select({\n                            android: {\n                                fontFamily: \"sans-serif\",\n                                fontWeight: \"bold\",\n                                // ...fonts.android.bold,\n                            },\n                            default: {\n                                fontWeight: \"bold\",\n                            },\n                        }),\n                    }\n                )}\n\n                <Animated.View\n                    style={StyleSheet.flatten([\n                        {\n                            flexDirection: \"row\",\n                            borderBottomWidth: 1,\n                            alignItems: \"center\",\n                            borderColor: this.context.colors.surface,\n                        },\n                        inputContainerStyle,\n                        { transform: [{ translateX }] },\n                    ])}\n                >\n                    {leftIcon && (\n                        <View\n                            style={StyleSheet.flatten([\n                                styles.iconContainer,\n                                leftIconContainerStyle,\n                            ])}\n                        >\n                            {renderNode(SvgIcon, leftIcon)}\n                        </View>\n                    )}\n\n                    <InputComponent\n                        testID=\"input__text-input\"\n                        underlineColorAndroid=\"transparent\"\n                        editable={!disabled}\n                        ref={(ref: any) => {\n                            this.input = ref;\n                        }}\n                        style={StyleSheet.flatten([\n                            {\n                                color: this.context.colors?.black,\n                                fontSize: 18,\n                                flex: 1,\n                                minHeight: 40,\n                            },\n                            inputStyle,\n                            disabled && styles.disabledInput,\n                            disabled && disabledInputStyle,\n                            style,\n                        ])}\n                        placeholderTextColor={this.context.colors?.surface}\n                        {...attributes}\n                    />\n\n                    {rightIcon && (\n                        <View\n                            style={StyleSheet.flatten([\n                                styles.iconContainer,\n                                rightIconContainerStyle,\n                            ])}\n                        >\n                            {renderNode(SvgIcon, rightIcon)}\n                        </View>\n                    )}\n                </Animated.View>\n\n                <Text\n                    {...errorProps}\n                    style={StyleSheet.flatten([\n                        {\n                            margin: 5,\n                            fontSize: 12,\n                            color: this.context.colors.error,\n                        },\n                        errorStyle && errorStyle,\n                        hideErrorMessage && {\n                            height: 0,\n                            margin: 0,\n                            padding: 0,\n                        },\n                    ])}\n                >\n                    {errorMessage}\n                </Text>\n            </View>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        width: \"100%\",\n        paddingHorizontal: 10,\n    },\n    disabledInput: {\n        opacity: 0.5,\n    },\n    iconContainer: {\n        height: 40,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        paddingRight: 4,\n        marginVertical: 4,\n    },\n});\n"]}