{"version":3,"sources":["ParallaxImage.tsx"],"names":["React","Animated","Easing","ActivityIndicator","findNodeHandle","styled","ParallaxContainer","View","ParallaxLoaderContainer","ParallaxImage","Component","constructor","props","offset","width","height","status","animOpacity","Value","_onLoad","bind","_onError","_measureLayout","setNativeProps","nativeProps","_container","componentDidMount","_mounted","setTimeout","componentWillUnmount","dimensions","vertical","carouselRef","sliderWidth","sliderHeight","itemWidth","itemHeight","measureLayout","x","y","pageX","pageY","setState","Math","ceil","event","state","fadeDuration","onLoad","timing","toValue","duration","easing","out","quad","isInteraction","useNativeDriver","start","onError","image","scrollPosition","parallaxFactor","AnimatedImageComponent","other","parallaxPadding","requiredStyles","position","dynamicStyles","opacity","transform","translateX","interpolate","inputRange","outputRange","extrapolate","translateY","resizeMode","undefined","spinner","showSpinner","spinnerColor","render","c","containerStyle","Image"],"mappings":"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","sourcesContent":["// Parallax effect inspired by https://github.com/oblador/react-native-parallax/\n\nimport * as React from \"react\";\nimport {\n    Animated,\n    Easing,\n    ActivityIndicator,\n    findNodeHandle,\n    StyleProp,\n    ViewStyle,\n} from \"react-native\";\nimport styled from \"styled-components/native\";\n\nconst ParallaxContainer = styled.View`\n    overflow: hidden;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst ParallaxLoaderContainer = styled.View`\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    align-items: center;\n    justify-content: center;\n`;\n\ntype Props = {\n    // ...StyleProp<ImageStyle>,\n    carouselRef: Record<string, unknown>, // passed from <Carousel />\n    itemHeight: number, // passed from <Carousel />\n    itemWidth: number, // passed from <Carousel />\n    scrollPosition: Record<string, unknown>, // passed from <Carousel />\n    sliderHeight: number, // passed from <Carousel />\n    sliderWidth: number, // passed from <Carousel />\n    vertical: boolean, // passed from <Carousel />\n    containerStyle: StyleProp<ViewStyle>,\n    dimensions: {\n        width: number,\n        height: number,\n    },\n    fadeDuration: number,\n    parallaxFactor: number,\n    showSpinner: boolean,\n    spinnerColor: string,\n    AnimatedImageComponent: (() => React.ReactNode) | Record<string, unknown>,\n\n    onLoad?: (evt?) => void,\n    onError?: (evt?) => void,\n};\n\ntype State = {\n    offset: number,\n    width: number,\n    height: number,\n    status: number, // 1 -> loading; 2 -> loaded // 3 -> transition finished; 4 -> error\n    animOpacity: Animated.Value,\n}\n\nexport default class ParallaxImage extends React.Component<Props, State> {\n\n    static defaultProps = {\n        containerStyle: {},\n        fadeDuration: 500,\n        parallaxFactor: 0.3,\n        showSpinner: true,\n        spinnerColor: \"rgba(0, 0, 0, 0.4)\",\n        AnimatedImageComponent: Animated.Image,\n    };\n\n    state: State = {\n        offset: 0,\n        width: 0,\n        height: 0,\n        status: 1, // 1 -> loading; 2 -> loaded // 3 -> transition finished; 4 -> error\n        animOpacity: new Animated.Value(0),\n    };\n\n    _container;\n    _mounted: boolean;\n\n    constructor(props) {\n        super(props);\n\n        this._onLoad = this._onLoad.bind(this);\n        this._onError = this._onError.bind(this);\n        this._measureLayout = this._measureLayout.bind(this);\n    }\n\n    setNativeProps(nativeProps) {\n        this._container.setNativeProps(nativeProps);\n    }\n\n    componentDidMount() {\n        this._mounted = true;\n\n        setTimeout(() => {\n            this._measureLayout();\n        }, 0);\n    }\n\n    componentWillUnmount() {\n        this._mounted = false;\n    }\n\n    _measureLayout() {\n        if (this._container) {\n            const {\n                dimensions,\n                vertical,\n                carouselRef,\n                sliderWidth,\n                sliderHeight,\n                itemWidth,\n                itemHeight,\n            } = this.props;\n\n            if (carouselRef) {\n                this._container.measureLayout(\n                    // @ts-ignore\n                    findNodeHandle(carouselRef),\n                    (x, y, width, height, pageX, pageY) => {\n                        const offset = vertical\n                            ? y - (sliderHeight - itemHeight) / 2\n                            : x - (sliderWidth - itemWidth) / 2;\n\n                        this.setState({\n                            offset: offset,\n                            width:\n                                dimensions && dimensions.width\n                                    ? dimensions.width\n                                    : Math.ceil(width),\n                            height:\n                                dimensions && dimensions.height\n                                    ? dimensions.height\n                                    : Math.ceil(height),\n                        });\n                    }\n                );\n            }\n        }\n    }\n\n    _onLoad(event) {\n        const { animOpacity } = this.state;\n        const { fadeDuration, onLoad } = this.props;\n\n        if (!this._mounted) {\n            return;\n        }\n\n        this.setState({ status: 2 });\n\n        if (onLoad) {\n            onLoad(event);\n        }\n\n        Animated.timing(animOpacity, {\n            toValue: 1,\n            duration: fadeDuration,\n            easing: Easing.out(Easing.quad),\n            isInteraction: false,\n            useNativeDriver: true,\n        }).start(() => {\n            this.setState({ status: 3 });\n        });\n    }\n\n    // If arg is missing from method signature, it just won't be called\n    _onError(event) {\n        const { onError } = this.props;\n\n        this.setState({ status: 4 });\n\n        if (onError) {\n            onError(event);\n        }\n    }\n\n    get image() {\n        const { status, animOpacity, offset, width, height } = this.state;\n        const {\n            scrollPosition,\n            vertical,\n            sliderWidth,\n            sliderHeight,\n            parallaxFactor,\n            AnimatedImageComponent,\n            ...other\n        } = this.props;\n\n        const parallaxPadding = (vertical ? height : width) * parallaxFactor;\n        const requiredStyles = { position: \"relative\" };\n        const dynamicStyles = {\n            width: vertical ? width : width + parallaxPadding * 2,\n            height: vertical ? height + parallaxPadding * 2 : height,\n            opacity: animOpacity,\n            transform: scrollPosition\n                ? [\n                    {\n                        translateX: !vertical\n                            // @ts-ignore\n                            ? scrollPosition.interpolate({\n                                inputRange: [offset - sliderWidth, offset + sliderWidth],\n                                outputRange: [-parallaxPadding, parallaxPadding],\n                                extrapolate: \"clamp\",\n                            })\n                            : 0,\n                    },\n                    {\n                        translateY: vertical\n                            // @ts-ignore\n                            ? scrollPosition.interpolate({\n                                inputRange: [offset - sliderHeight, offset + sliderHeight],\n                                outputRange: [-parallaxPadding, parallaxPadding],\n                                extrapolate: \"clamp\",\n                            })\n                            : 0,\n                    },\n                ]\n                : [],\n        };\n\n        return (\n            // @ts-ignore\n            <AnimatedImageComponent\n                {...other}\n                style={[\n                    {\n                        position: \"relative\",\n                        resizeMode: \"cover\",\n                        width: null,\n                        height: null,\n                    },\n                    requiredStyles,\n                    dynamicStyles,\n                ]}\n                onLoad={this._onLoad}\n                onError={status !== 3 ? this._onError : undefined} // prevent infinite-loop bug\n            />\n        );\n    }\n\n    get spinner() {\n        const { status } = this.state;\n        const { showSpinner, spinnerColor } = this.props;\n\n        return status === 1 && showSpinner ? (\n            <ParallaxLoaderContainer>\n                <ActivityIndicator\n                    size={\"small\"}\n                    color={spinnerColor}\n                    animating={true}\n                />\n            </ParallaxLoaderContainer>\n        ) : (\n            false\n        );\n    }\n\n    render() {\n\n        return (\n            <ParallaxContainer\n                ref={c => {\n                    this._container = c;\n                }}\n                pointerEvents={\"none\"}\n                onLayout={this._measureLayout}\n            >\n                {this.image}\n                {this.spinner}\n            </ParallaxContainer>\n        );\n    }\n}\n"]}