{"version":3,"sources":["Provider.tsx"],"names":["React","AccessibilityInfo","Appearance","ThemeProvider","Provider","SettingsProvider","PortalHost","LightTheme","DarkTheme","DrawerContext","ThemeProviver","props","colorSchemeName","theme","getColorScheme","reduceMotionEnabled","setReduceMotionEnabled","useState","colorScheme","setColorScheme","handleAppearanceChange","preferences","drawerIsOpen","setDrawerIsOpen","useEffect","addEventListener","removeEventListener","addChangeListener","removeChangeListener","getTheme","providedTheme","animation","scale","children","settings"],"mappings":"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","sourcesContent":["\r\nimport * as React from \"react\";\r\nimport { AccessibilityInfo, Appearance, ColorSchemeName } from \"react-native\";\r\nimport { DefaultTheme, ThemeProvider } from \"styled-components\";\r\nimport { Provider as SettingsProvider, Settings } from \"./settings\";\r\nimport PortalHost from \"../Portal/PortalHost\";\r\nimport LightTheme from \"./LightTheme\";\r\nimport DarkTheme from \"./DarkTheme\";\r\nimport DrawerContext from \"../Drawer/DrawerContext\";\r\n\r\ntype Props = {\r\n    children: React.ReactNode;\r\n    theme?: DefaultTheme;\r\n    settings?: Settings;\r\n    colorSchemeName?: ColorSchemeName;\r\n};\r\n\r\nconst ThemeProviver = ({ ...props }: Props) => {\r\n    const colorSchemeName =\r\n        (!props.theme && Appearance?.getColorScheme()) || (props.colorSchemeName || \"light\");\r\n\r\n    const [reduceMotionEnabled, setReduceMotionEnabled] = React.useState<boolean>(\r\n        false\r\n    );\r\n    const [colorScheme, setColorScheme] = React.useState<ColorSchemeName>(\r\n        colorSchemeName\r\n    );\r\n\r\n    const handleAppearanceChange = (\r\n        preferences: Appearance.AppearancePreferences\r\n    ) => {\r\n        const { colorScheme } = preferences;\r\n        setColorScheme(colorScheme);\r\n    };\r\n\r\n    const [ drawerIsOpen, setDrawerIsOpen ] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        if (!props.theme) {\r\n            AccessibilityInfo.addEventListener(\r\n                \"reduceMotionChanged\",\r\n                setReduceMotionEnabled\r\n            );\r\n        }\r\n        return () => {\r\n            if (!props.theme) {\r\n                AccessibilityInfo.removeEventListener(\r\n                    \"reduceMotionChanged\",\r\n                    setReduceMotionEnabled\r\n                );\r\n            }\r\n        };\r\n    }, [props.theme]);\r\n\r\n    React.useEffect(() => {\r\n        if (!props.theme) Appearance?.addChangeListener(handleAppearanceChange);\r\n        return () => {\r\n            if (!props.theme)\r\n                Appearance?.removeChangeListener(handleAppearanceChange);\r\n        };\r\n    }, [props.theme]);\r\n\r\n    const getTheme = () => {\r\n        const { theme: providedTheme } = props;\r\n\r\n        if (providedTheme) {\r\n            return providedTheme;\r\n        } else {\r\n            const theme = (colorScheme === \"dark\"\r\n                ? DarkTheme\r\n                : LightTheme) as DefaultTheme;\r\n\r\n            return {\r\n                ...theme,\r\n                animation: {\r\n                    ...theme.animation,\r\n                    scale: reduceMotionEnabled ? 0 : 1,\r\n                },\r\n            };\r\n        }\r\n    };\r\n\r\n    const { children, settings } = props;\r\n    return (\r\n        <PortalHost>\r\n            <SettingsProvider value={settings || { }}>\r\n                <DrawerContext.Provider value={{\r\n                    drawerIsOpen,\r\n                    setDrawerIsOpen,\r\n                }}>\r\n                    <ThemeProvider theme={getTheme()}>\r\n                        {children}\r\n                    </ThemeProvider>\r\n                </DrawerContext.Provider>\r\n            </SettingsProvider>\r\n        </PortalHost>\r\n    );\r\n};\r\n\r\nexport default ThemeProviver;\r\n"]}