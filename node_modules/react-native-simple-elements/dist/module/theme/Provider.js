import * as React from "react";
import { AccessibilityInfo, Appearance } from "react-native";
import { ThemeProvider } from "styled-components";
import { Provider as SettingsProvider } from "./settings";
import PortalHost from "../Portal/PortalHost";
import LightTheme from "./LightTheme";
import DarkTheme from "./DarkTheme";
import DrawerContext from "../Drawer/DrawerContext";

const ThemeProviver = ({ ...props
}) => {
  const colorSchemeName = !props.theme && (Appearance === null || Appearance === void 0 ? void 0 : Appearance.getColorScheme()) || props.colorSchemeName || "light";
  const [reduceMotionEnabled, setReduceMotionEnabled] = React.useState(false);
  const [colorScheme, setColorScheme] = React.useState(colorSchemeName);

  const handleAppearanceChange = preferences => {
    const {
      colorScheme
    } = preferences;
    setColorScheme(colorScheme);
  };

  const [drawerIsOpen, setDrawerIsOpen] = React.useState(false);
  React.useEffect(() => {
    if (!props.theme) {
      AccessibilityInfo.addEventListener("reduceMotionChanged", setReduceMotionEnabled);
    }

    return () => {
      if (!props.theme) {
        AccessibilityInfo.removeEventListener("reduceMotionChanged", setReduceMotionEnabled);
      }
    };
  }, [props.theme]);
  React.useEffect(() => {
    if (!props.theme) Appearance === null || Appearance === void 0 ? void 0 : Appearance.addChangeListener(handleAppearanceChange);
    return () => {
      if (!props.theme) Appearance === null || Appearance === void 0 ? void 0 : Appearance.removeChangeListener(handleAppearanceChange);
    };
  }, [props.theme]);

  const getTheme = () => {
    const {
      theme: providedTheme
    } = props;

    if (providedTheme) {
      return providedTheme;
    } else {
      const theme = colorScheme === "dark" ? DarkTheme : LightTheme;
      return { ...theme,
        animation: { ...theme.animation,
          scale: reduceMotionEnabled ? 0 : 1
        }
      };
    }
  };

  const {
    children,
    settings
  } = props;
  return /*#__PURE__*/React.createElement(PortalHost, null, /*#__PURE__*/React.createElement(SettingsProvider, {
    value: settings || {}
  }, /*#__PURE__*/React.createElement(DrawerContext.Provider, {
    value: {
      drawerIsOpen,
      setDrawerIsOpen
    }
  }, /*#__PURE__*/React.createElement(ThemeProvider, {
    theme: getTheme()
  }, children))));
};

export default ThemeProviver;
//# sourceMappingURL=Provider.js.map