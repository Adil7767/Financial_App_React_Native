{"version":3,"sources":["shadow.ts"],"names":["Colors","Animated","SHADOW_COLOR","black","SHADOW_OPACITY","shadow","elevation","Value","inputRange","shadowColor","shadowOffset","width","height","interpolate","outputRange","shadowOpacity","shadowRadius","radius"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,UAAxB;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA,MAAMC,YAAY,GAAGF,MAAM,CAACG,KAA5B;AACA,MAAMC,cAAc,GAAG,IAAvB;AAEA,eAAe,SAASC,MAAT,CAAgBC,SAAkC,GAAG,CAArD,EAAwD;AACnE,MAAIA,SAAS,YAAYL,QAAQ,CAACM,KAAlC,EAAyC;AACrC,UAAMC,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,EAAhB,CAAnB;AAEA,WAAO;AACHC,MAAAA,WAAW,EAAEP,YADV;AAEHQ,MAAAA,YAAY,EAAE;AACVC,QAAAA,KAAK,EAAE,IAAIV,QAAQ,CAACM,KAAb,CAAmB,CAAnB,CADG;AAEVK,QAAAA,MAAM,EAAEN,SAAS,CAACO,WAAV,CAAsB;AAC1BL,UAAAA,UAD0B;AAE1BM,UAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqB,EAArB;AAFa,SAAtB;AAFE,OAFX;AASHC,MAAAA,aAAa,EAAE,IAAId,QAAQ,CAACM,KAAb,CAAmBH,cAAnB,CATZ;AAUHY,MAAAA,YAAY,EAAEV,SAAS,CAACO,WAAV,CAAsB;AAChCL,QAAAA,UADgC;AAEhCM,QAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,IAAJ,EAAU,GAAV,EAAe,CAAf,EAAkB,CAAlB,EAAqB,EAArB;AAFmB,OAAtB;AAVX,KAAP;AAeH,GAlBD,MAkBO;AACH,QAAIR,SAAS,KAAK,CAAlB,EAAqB;AACjB,aAAO,EAAP;AACH;;AAED,QAAIM,MAAJ,EAAYK,MAAZ;;AACA,YAAQX,SAAR;AACA,WAAK,CAAL;AACIM,QAAAA,MAAM,GAAG,GAAT;AACAK,QAAAA,MAAM,GAAG,IAAT;AACA;;AACJ,WAAK,CAAL;AACIL,QAAAA,MAAM,GAAG,IAAT;AACAK,QAAAA,MAAM,GAAG,GAAT;AACA;;AACJ;AACIL,QAAAA,MAAM,GAAGN,SAAS,GAAG,CAArB;AACAW,QAAAA,MAAM,GAAGX,SAAT;AAXJ;;AAcA,WAAO;AACHG,MAAAA,WAAW,EAAEP,YADV;AAEHQ,MAAAA,YAAY,EAAE;AACVC,QAAAA,KAAK,EAAE,CADG;AAEVC,QAAAA;AAFU,OAFX;AAMHG,MAAAA,aAAa,EAAEX,cANZ;AAOHY,MAAAA,YAAY,EAAEC;AAPX,KAAP;AASH;AACJ","sourcesContent":["import * as Colors from \"./colors\";\nimport { Animated } from \"react-native\";\n\nconst SHADOW_COLOR = Colors.black;\nconst SHADOW_OPACITY = 0.24;\n\nexport default function shadow(elevation: number | Animated.Value = 0) {\n    if (elevation instanceof Animated.Value) {\n        const inputRange = [0, 1, 2, 3, 8, 24];\n\n        return {\n            shadowColor: SHADOW_COLOR,\n            shadowOffset: {\n                width: new Animated.Value(0),\n                height: elevation.interpolate({\n                    inputRange,\n                    outputRange: [0, 0.5, 0.75, 2, 7, 23],\n                }),\n            },\n            shadowOpacity: new Animated.Value(SHADOW_OPACITY),\n            shadowRadius: elevation.interpolate({\n                inputRange,\n                outputRange: [0, 0.75, 1.5, 3, 8, 24],\n            }),\n        };\n    } else {\n        if (elevation === 0) {\n            return {};\n        }\n\n        let height, radius;\n        switch (elevation) {\n        case 1:\n            height = 0.5;\n            radius = 0.75;\n            break;\n        case 2:\n            height = 0.75;\n            radius = 1.5;\n            break;\n        default:\n            height = elevation - 1;\n            radius = elevation;\n        }\n\n        return {\n            shadowColor: SHADOW_COLOR,\n            shadowOffset: {\n                width: 0,\n                height,\n            },\n            shadowOpacity: SHADOW_OPACITY,\n            shadowRadius: radius,\n        };\n    }\n}\n"]}