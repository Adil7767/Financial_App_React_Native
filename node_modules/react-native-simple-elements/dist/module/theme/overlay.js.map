{"version":3,"sources":["overlay.ts"],"names":["color","Animated","DarkTheme","overlay","elevation","surfaceColor","colors","surface","Value","inputRange","interpolate","outputRange","map","calculateColor","overlayTransparency","elevationOverlayTransparency","mix","hex"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,eAAe,SAASC,OAAT,CACXC,SAAkC,GAAG,CAD1B,EAEXC,YAAoB,GAAGH,SAAS,CAACI,MAAV,CAAiBC,OAF7B,EAGb;AACE,MAAIH,SAAS,YAAYH,QAAQ,CAACO,KAAlC,EAAyC;AACrC,UAAMC,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,EAAhB,CAAnB;AACA,WAAOL,SAAS,CAACM,WAAV,CAAsB;AACzBD,MAAAA,UADyB;AAEzBE,MAAAA,WAAW,EAAEF,UAAU,CAACG,GAAX,CAAgBR,SAAD,IAAe;AACvC,eAAOS,cAAc,CAACR,YAAD,EAAeD,SAAf,CAArB;AACH,OAFY;AAFY,KAAtB,CAAP;AAMH;;AACD,SAAOS,cAAc,CAACR,YAAD,EAAeD,SAAf,CAArB;AACH;;AACD,SAASS,cAAT,CAAwBR,YAAxB,EAA8CD,SAA9C,EAAiE;AAC7D,MAAIU,mBAAJ;;AACA,MAAIV,SAAS,IAAI,CAAb,IAAkBA,SAAS,IAAI,EAAnC,EAAuC;AACnCU,IAAAA,mBAAmB,GAAGC,4BAA4B,CAACX,SAAD,CAAlD;AACH,GAFD,MAEO,IAAIA,SAAS,GAAG,EAAhB,EAAoB;AACvBU,IAAAA,mBAAmB,GAAGC,4BAA4B,CAAC,EAAD,CAAlD;AACH,GAFM,MAEA;AACHD,IAAAA,mBAAmB,GAAGC,4BAA4B,CAAC,CAAD,CAAlD;AACH;;AACD,SAAOf,KAAK,CAACK,YAAD,CAAL,CACFW,GADE,CACEhB,KAAK,CAAC,OAAD,CADP,EACkBc,mBAAmB,GAAG,IADxC,EAEFG,GAFE,EAAP;AAGH;;AACD,MAAMF,4BAAsD,GAAG;AAC3D,KAAG,CADwD;AAE3D,KAAG,CAFwD;AAG3D,KAAG,CAHwD;AAI3D,KAAG,CAJwD;AAK3D,KAAG,EALwD;AAM3D,KAAG,EANwD;AAO3D,KAAG,IAPwD;AAQ3D,KAAG,EARwD;AAS3D,KAAG,IATwD;AAU3D,MAAI,EAVuD;AAW3D,MAAI,IAXuD;AAY3D,MAAI,EAZuD;AAa3D,MAAI,KAbuD;AAc3D,MAAI,IAduD;AAe3D,MAAI,KAfuD;AAgB3D,MAAI,EAhBuD;AAiB3D,MAAI,KAjBuD;AAkB3D,MAAI,KAlBuD;AAmB3D,MAAI,KAnBuD;AAoB3D,MAAI,KApBuD;AAqB3D,MAAI,IArBuD;AAsB3D,MAAI,KAtBuD;AAuB3D,MAAI,KAvBuD;AAwB3D,MAAI;AAxBuD,CAA/D","sourcesContent":["import color from \"color\";\nimport { Animated } from \"react-native\";\nimport DarkTheme from \"./DarkTheme\";\n\nexport default function overlay(\n    elevation: number | Animated.Value = 1,\n    surfaceColor: string = DarkTheme.colors.surface\n) {\n    if (elevation instanceof Animated.Value) {\n        const inputRange = [0, 1, 2, 3, 8, 24];\n        return elevation.interpolate({\n            inputRange,\n            outputRange: inputRange.map((elevation) => {\n                return calculateColor(surfaceColor, elevation);\n            }),\n        });\n    }\n    return calculateColor(surfaceColor, elevation);\n}\nfunction calculateColor(surfaceColor: string, elevation: number) {\n    let overlayTransparency: number;\n    if (elevation >= 1 && elevation <= 24) {\n        overlayTransparency = elevationOverlayTransparency[elevation];\n    } else if (elevation > 24) {\n        overlayTransparency = elevationOverlayTransparency[24];\n    } else {\n        overlayTransparency = elevationOverlayTransparency[1];\n    }\n    return color(surfaceColor)\n        .mix(color(\"white\"), overlayTransparency * 0.01)\n        .hex();\n}\nconst elevationOverlayTransparency: { [id: number]: number } = {\n    1: 5,\n    2: 7,\n    3: 8,\n    4: 9,\n    5: 10,\n    6: 11,\n    7: 11.5,\n    8: 12,\n    9: 12.5,\n    10: 13,\n    11: 13.5,\n    12: 14,\n    13: 14.25,\n    14: 14.5,\n    15: 14.75,\n    16: 15,\n    17: 15.12,\n    18: 15.24,\n    19: 15.36,\n    20: 15.48,\n    21: 15.6,\n    22: 15.72,\n    23: 15.84,\n    24: 16,\n};\n"]}