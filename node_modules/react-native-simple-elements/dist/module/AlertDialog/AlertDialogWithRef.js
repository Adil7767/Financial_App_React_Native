function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from "react";
import { StyleSheet } from "react-native";
import AlertDialog from "./AlertDialog";
import Surface from "../Surface";
import { DialogTitle, DialogContent, DialogActions } from "../Dialog";
import Button from "../Button";
import { ThemeContext } from "styled-components";
import Text from "../Text";
const defaultProps = {
  mode: "message",
  translations: {
    confirmText: "Ok",
    cancelText: "Cancel"
  }
};

const AlertDialogWithRef = ({
  innerRef,
  children,
  mode,
  title,
  message,
  translations,
  dialogContentStyle,
  messageStyle,
  ...rest
}) => {
  const [visible, setVisible] = React.useState(false);
  const optionsRef = React.useRef({});
  const {
    colors
  } = React.useContext(ThemeContext);
  React.useImperativeHandle(innerRef, () => ({
    open: options => {
      optionsRef.current = {
        onConfirm: options === null || options === void 0 ? void 0 : options.onConfirm,
        onCancel: options === null || options === void 0 ? void 0 : options.onCancel
      };
      setVisible(true);
    },
    close: () => {
      setVisible(false);
    }
  }));

  const _handleConfirm = () => {
    if (optionsRef && optionsRef.current && optionsRef.current.onConfirm) {
      optionsRef.current.onConfirm();
    }

    innerRef.current.close();
  };

  const _handleDismiss = () => {
    innerRef.current.close();
  };

  return /*#__PURE__*/React.createElement(AlertDialog, _extends({
    animationType: "fade",
    visible: visible,
    onDismiss: _handleDismiss
  }, rest), /*#__PURE__*/React.createElement(Surface, null, title ? /*#__PURE__*/React.createElement(DialogTitle, null, title) : null, /*#__PURE__*/React.createElement(DialogContent, {
    style: [styles.dialogContentStyle, dialogContentStyle]
  }, message ? /*#__PURE__*/React.createElement(Text, {
    style: [mode === "error" && styles.errorMessage, mode === "error" && {
      color: colors.error
    }, messageStyle]
  }, message) : children), /*#__PURE__*/React.createElement(DialogActions, null, mode === "confirm" ? /*#__PURE__*/React.createElement(Button, {
    onPress: _handleDismiss
  }, translations === null || translations === void 0 ? void 0 : translations.cancelText) : null, /*#__PURE__*/React.createElement(Button, {
    onPress: _handleConfirm
  }, translations === null || translations === void 0 ? void 0 : translations.confirmText))));
};

AlertDialogWithRef.defaultProps = defaultProps;
export default AlertDialogWithRef;
const styles = StyleSheet.create({
  dialogContentStyle: {
    paddingHorizontal: 16
  },
  errorMessage: {}
});
//# sourceMappingURL=AlertDialogWithRef.js.map