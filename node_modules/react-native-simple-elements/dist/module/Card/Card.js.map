{"version":3,"sources":["Card.tsx"],"names":["React","StyleSheet","Animated","TouchableWithoutFeedback","View","CardContent","CardActions","CardCover","CardTitle","Surface","ThemeContext","Card","elevation","cardElevation","onLongPress","onPress","children","style","testID","accessible","rest","theme","useContext","current","useRef","Value","handlePressIn","dark","mode","animation","scale","timing","toValue","duration","useNativeDriver","start","handlePressOut","roundness","total","Children","count","siblings","map","child","isValidElement","type","displayName","borderRadius","undefined","styles","innerContainer","index","cloneElement","Content","Actions","Cover","Title","create","flexGrow","flexShrink"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    StyleProp,\r\n    StyleSheet,\r\n    Animated,\r\n    TouchableWithoutFeedback,\r\n    View,\r\n    ViewStyle,\r\n} from \"react-native\";\r\nimport CardContent from \"./CardContent\";\r\nimport CardActions from \"./CardActions\";\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nimport CardCover, { CardCover as _CardCover } from \"./CardCover\";\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nimport CardTitle, { CardTitle as _CardTitle } from \"./CardTitle\";\r\nimport Surface from \"../Surface\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\n\r\ntype Props = React.ComponentProps<typeof Surface> & {\r\n    /**\r\n     * Resting elevation of the card which controls the drop shadow.\r\n     */\r\n    elevation?: number;\r\n    /**\r\n     * Function to execute on long press.\r\n     */\r\n    onLongPress?: () => void;\r\n    /**\r\n     * Function to execute on press.\r\n     */\r\n    onPress?: () => void;\r\n    /**\r\n     * Content of the `Card`.\r\n     */\r\n    children: React.ReactNode;\r\n    style?: StyleProp<ViewStyle>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n    /**\r\n     * Pass down testID from card props to touchable\r\n     */\r\n    testID?: string;\r\n    /**\r\n     * Pass down accessible from card props to touchable\r\n     */\r\n    accessible?: boolean;\r\n};\r\n\r\n/**\r\n * A card is a sheet of material that serves as an entry point to more detailed information.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\r\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { AvatarIcon } from 'react-native-simple-elements/components/Avatar';\r\n * import Button from 'react-native-simple-elements/components/Button';\r\n * import Card from 'react-native-simple-elements/components/Card';\r\n * import { Title, Paragraph } from 'react-native-simple-elements/components/Text';\r\n *\r\n * const LeftContent = props => <AvatarIcon {...props} icon=\"folder\" />\r\n *\r\n * const MyComponent = () => (\r\n *   <Card>\r\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\r\n *     <Card.Content>\r\n *       <Title>Card title</Title>\r\n *       <Paragraph>Card content</Paragraph>\r\n *     </Card.Content>\r\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\r\n *     <Card.Actions>\r\n *       <Button>Cancel</Button>\r\n *       <Button>Ok</Button>\r\n *     </Card.Actions>\r\n *   </Card>\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst Card = ({\r\n    elevation: cardElevation = 1,\r\n    onLongPress,\r\n    onPress,\r\n    children,\r\n    style,\r\n    testID,\r\n    accessible,\r\n    ...rest\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n\r\n    const { current: elevation } = React.useRef<Animated.Value>(\r\n        new Animated.Value(cardElevation)\r\n    );\r\n\r\n    const handlePressIn = () => {\r\n        const {\r\n            dark,\r\n            mode,\r\n            animation: { scale },\r\n        } = theme;\r\n        Animated.timing(elevation, {\r\n            toValue: 8,\r\n            duration: 150 * scale,\r\n            useNativeDriver: !dark || mode === \"exact\",\r\n        }).start();\r\n    };\r\n\r\n    const handlePressOut = () => {\r\n        const {\r\n            dark,\r\n            mode,\r\n            animation: { scale },\r\n        } = theme;\r\n        Animated.timing(elevation, {\r\n            toValue: cardElevation,\r\n            duration: 150 * scale,\r\n            useNativeDriver: !dark || mode === \"exact\",\r\n        }).start();\r\n    };\r\n\r\n    const { roundness } = theme;\r\n    const total = React.Children.count(children);\r\n    const siblings = React.Children.map(children, (child) =>\r\n        React.isValidElement(child) && child.type\r\n            ? (child.type as any).displayName\r\n            : null\r\n    );\r\n    return (\r\n        <Surface\r\n            // @ts-ignore\r\n            style={[{ borderRadius: roundness, elevation }, style]}\r\n            {...rest}\r\n        >\r\n            <TouchableWithoutFeedback\r\n                delayPressIn={0}\r\n                disabled={!(onPress || onLongPress)}\r\n                onLongPress={onLongPress}\r\n                onPress={onPress}\r\n                onPressIn={onPress ? handlePressIn : undefined}\r\n                onPressOut={onPress ? handlePressOut : undefined}\r\n                testID={testID}\r\n                accessible={accessible}\r\n            >\r\n                <View style={styles.innerContainer}>\r\n                    {React.Children.map(children, (child, index) =>\r\n                        React.isValidElement(child)\r\n                            ? React.cloneElement(child, {\r\n                                index,\r\n                                total,\r\n                                siblings,\r\n                            })\r\n                            : child\r\n                    )}\r\n                </View>\r\n            </TouchableWithoutFeedback>\r\n        </Surface>\r\n    );\r\n};\r\n\r\n// @component ./CardContent.tsx\r\nCard.Content = CardContent;\r\n// @component ./CardActions.tsx\r\nCard.Actions = CardActions;\r\n// @component ./CardCover.tsx\r\nCard.Cover = CardCover;\r\n// @component ./CardTitle.tsx\r\nCard.Title = CardTitle;\r\n\r\nconst styles = StyleSheet.create({\r\n    innerContainer: {\r\n        flexGrow: 1,\r\n        flexShrink: 1,\r\n    },\r\n});\r\n\r\nexport default Card;\r\n"]}