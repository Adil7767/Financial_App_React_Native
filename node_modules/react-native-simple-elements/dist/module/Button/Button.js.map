{"version":3,"sources":["Button.tsx"],"names":["React","Animated","StyleSheet","View","color","ActivityIndicator","SvgIcon","Surface","Text","TouchableRipple","black","white","ThemeContext","Button","disabled","compact","mode","dark","loading","icon","buttonColor","children","uppercase","accessibilityLabel","onPress","onLongPress","focusedStyle","hoveredStyle","pressedStyle","style","contentStyle","labelStyle","testID","accessible","rest","theme","useContext","current","elevation","useRef","Value","useEffect","setValue","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","alpha","rgb","string","primary","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","customLabelColor","fontSize","customLabelSize","textStyle","elevationRes","iconStyle","flexDirection","styles","iconReverse","button","content","label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    Animated,\r\n    ViewStyle,\r\n    StyleSheet,\r\n    StyleProp,\r\n    TextStyle,\r\n    View,\r\n} from \"react-native\";\r\nimport color from \"color\";\r\nimport ActivityIndicator from \"../ActivityIndicator/ActivityIndicator\";\r\nimport { SvgIcon } from \"../Icon\";\r\nimport Surface from \"../Surface/Surface\";\r\nimport Text from \"../Text\";\r\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\r\nimport { black, white } from \"../theme/colors\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\n\r\ntype Props = React.ComponentProps<typeof Surface> & {\r\n    /**\r\n     * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\r\n     * - `text` - flat button without background or outline (low emphasis)\r\n     * - `outlined` - button with an outline (medium emphasis)\r\n     * - `contained` - button with a background color and elevation shadow (high emphasis)\r\n     */\r\n    mode?: \"text\" | \"outlined\" | \"contained\";\r\n    /**\r\n     * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\r\n     */\r\n    dark?: boolean;\r\n    /**\r\n     * Use a compact look, useful for `text` buttons in a row.\r\n     */\r\n    compact?: boolean;\r\n    /**\r\n     * Custom text color for flat button, or background color for contained button.\r\n     */\r\n    color?: string;\r\n    /**\r\n     * Whether to show a loading indicator.\r\n     */\r\n    loading?: boolean;\r\n    /**\r\n     * Icon to display for the `Button`.\r\n     */\r\n    icon?: React.ReactElement;\r\n    /**\r\n     * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * Label text of the button.\r\n     */\r\n    children: React.ReactNode;\r\n    /**\r\n     * Make the label text uppercased. Note that this won't work if you pass React elements as children.\r\n     */\r\n    uppercase?: boolean;\r\n    /**\r\n     * Accessibility label for the button. This is read by the screen reader when the user taps the button.\r\n     */\r\n    accessibilityLabel?: string;\r\n    /**\r\n     * Function to execute on press.\r\n     */\r\n    onPress?: () => void;\r\n    /**\r\n     * Function to execute on long press.\r\n     */\r\n    onLongPress?: () => void;\r\n    /**\r\n     * Style of button's inner content.\r\n     * Use this prop to apply custom height and width.\r\n     */\r\n    contentStyle?: StyleProp<ViewStyle>;\r\n\r\n    focusedStyle?: StyleProp<ViewStyle>;\r\n\r\n    hoveredStyle?: StyleProp<ViewStyle>;\r\n\r\n    pressedStyle?: StyleProp<ViewStyle>;\r\n\r\n    style?: StyleProp<ViewStyle>;\r\n    /**\r\n     * Style for the button text.\r\n     */\r\n    labelStyle?: StyleProp<TextStyle>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n    /**\r\n     * testID to be used on tests.\r\n     */\r\n    testID?: string;\r\n};\r\n\r\n/**\r\n * A button is component that the user can press to trigger an action.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img src=\"screenshots/button-1.png\" />\r\n *     <figcaption>Text button</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/button-2.png\" />\r\n *     <figcaption>Outlined button</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/button-3.png\" />\r\n *     <figcaption>Contained button</figcaption>\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import Button from 'react-native-simple-elements/components/Button';\r\n *\r\n * const MyComponent = () => (\r\n *     <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\r\n *         Press me\r\n *     </Button>\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst Button = ({\r\n    disabled,\r\n    compact,\r\n    mode = \"text\",\r\n    dark,\r\n    loading,\r\n    icon,\r\n    color: buttonColor,\r\n    children,\r\n    uppercase = true,\r\n    accessibilityLabel,\r\n    onPress,\r\n    onLongPress,\r\n    focusedStyle,\r\n    hoveredStyle,\r\n    pressedStyle,\r\n    style,\r\n    contentStyle,\r\n    labelStyle,\r\n    testID,\r\n    accessible,\r\n    ...rest\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n\r\n    const { current: elevation } = React.useRef<Animated.Value>(\r\n        new Animated.Value(mode === \"contained\" ? 2 : 0)\r\n    );\r\n    React.useEffect(() => {\r\n        elevation.setValue(mode === \"contained\" ? 2 : 0);\r\n    }, [mode, elevation]);\r\n\r\n    const handlePressIn = () => {\r\n        if (mode === \"contained\") {\r\n            const { scale } = theme.animation;\r\n            Animated.timing(elevation, {\r\n                toValue: 8,\r\n                duration: 200 * scale,\r\n                useNativeDriver: true,\r\n            }).start();\r\n        }\r\n    };\r\n\r\n    const handlePressOut = () => {\r\n        if (mode === \"contained\") {\r\n            const { scale } = theme.animation;\r\n            Animated.timing(elevation, {\r\n                toValue: 2,\r\n                duration: 150 * scale,\r\n                useNativeDriver: true,\r\n            }).start();\r\n        }\r\n    };\r\n\r\n    const { colors, roundness } = theme;\r\n    const font = theme.fonts.medium;\r\n\r\n    let backgroundColor: string,\r\n        borderColor: string,\r\n        textColor: string,\r\n        borderWidth: number;\r\n\r\n    if (mode === \"contained\") {\r\n        if (disabled) {\r\n            backgroundColor = color(theme.dark ? white : black)\r\n                .alpha(0.12)\r\n                .rgb()\r\n                .string();\r\n        } else if (buttonColor) {\r\n            backgroundColor = buttonColor;\r\n        } else {\r\n            backgroundColor = colors.primary;\r\n        }\r\n    } else {\r\n        backgroundColor = \"transparent\";\r\n    }\r\n\r\n    if (mode === \"outlined\") {\r\n        borderColor = color(theme.dark ? white : black)\r\n            .alpha(0.29)\r\n            .rgb()\r\n            .string();\r\n        borderWidth = StyleSheet.hairlineWidth;\r\n    } else {\r\n        borderColor = \"transparent\";\r\n        borderWidth = 0;\r\n    }\r\n\r\n    if (disabled) {\r\n        textColor = color(theme.dark ? white : black)\r\n            .alpha(0.32)\r\n            .rgb()\r\n            .string();\r\n    } else if (mode === \"contained\") {\r\n        let isDark;\r\n\r\n        if (typeof dark === \"boolean\") {\r\n            isDark = dark;\r\n        } else {\r\n            isDark =\r\n            backgroundColor === \"transparent\"\r\n                ? false\r\n                : !color(backgroundColor).isLight();\r\n        }\r\n\r\n        textColor = isDark ? white : black;\r\n    } else if (buttonColor) {\r\n        textColor = buttonColor;\r\n    } else {\r\n        textColor = colors.primary;\r\n    }\r\n\r\n    const rippleColor = color(textColor).alpha(0.32).rgb().string();\r\n    const buttonStyle = {\r\n        backgroundColor,\r\n        borderColor,\r\n        borderWidth,\r\n        borderRadius: roundness,\r\n    };\r\n    const touchableStyle = {\r\n        borderRadius: style\r\n            ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||\r\n            roundness\r\n            : roundness,\r\n    };\r\n\r\n    const { color: customLabelColor, fontSize: customLabelSize } =\r\n        StyleSheet.flatten(labelStyle) || {};\r\n\r\n    const textStyle = { color: textColor, ...font };\r\n    const elevationRes = disabled || mode !== \"contained\" ? 0 : elevation;\r\n    const iconStyle =\r\n        StyleSheet.flatten(contentStyle)?.flexDirection === \"row-reverse\"\r\n            ? styles.iconReverse\r\n            : styles.icon;\r\n\r\n    return (\r\n        <Surface\r\n            {...rest}\r\n            style={[\r\n                styles.button,\r\n                compact && styles.compact,\r\n        { elevation: elevationRes } as ViewStyle,\r\n        buttonStyle,\r\n        style,\r\n            ]}\r\n        >\r\n            <TouchableRipple\r\n                borderless\r\n                // delayPressIn={0}\r\n                onPress={onPress}\r\n                onLongPress={onLongPress}\r\n                onPressIn={handlePressIn}\r\n                onPressOut={handlePressOut}\r\n                accessibilityLabel={accessibilityLabel}\r\n                // accessibilityTraits={disabled ? [\"button\", \"disabled\"] : \"button\"}\r\n                // accessibilityComponentType=\"button\"\r\n                accessibilityRole=\"button\"\r\n                accessibilityState={{ disabled }}\r\n                accessible={accessible}\r\n                disabled={disabled}\r\n                rippleColor={rippleColor}\r\n                style={touchableStyle}\r\n                focusedStyle={focusedStyle}\r\n                hoveredStyle={hoveredStyle}\r\n                pressedStyle={pressedStyle}\r\n                testID={testID}\r\n            >\r\n                <View style={[styles.content, contentStyle]}>\r\n                    {icon && loading !== true ? (\r\n                        <View style={iconStyle}>\r\n                            <SvgIcon\r\n                                icon={icon}\r\n                                size={customLabelSize ?? 16}\r\n                                color={\r\n                                    typeof customLabelColor === \"string\"\r\n                                        ? customLabelColor\r\n                                        : textColor\r\n                                }\r\n                            />\r\n                        </View>\r\n                    ) : null}\r\n                    {loading ? (\r\n                        <ActivityIndicator\r\n                            size={customLabelSize ?? 16}\r\n                            color={\r\n                                typeof customLabelColor === \"string\"\r\n                                    ? customLabelColor\r\n                                    : textColor\r\n                            }\r\n                            style={iconStyle}\r\n                        />\r\n                    ) : null}\r\n                    <Text\r\n                        selectable={false}\r\n                        numberOfLines={1}\r\n                        style={[\r\n                            styles.label,\r\n                            compact && styles.compactLabel,\r\n                            uppercase && styles.uppercaseLabel,\r\n                            textStyle,\r\n                            font,\r\n                            labelStyle,\r\n                        ]}\r\n                    >\r\n                        {children}\r\n                    </Text>\r\n                </View>\r\n            </TouchableRipple>\r\n        </Surface>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    button: {\r\n        minWidth: 64,\r\n        borderStyle: \"solid\",\r\n    },\r\n    compact: {\r\n        minWidth: \"auto\",\r\n    },\r\n    content: {\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    icon: {\r\n        marginLeft: 12,\r\n        marginRight: -4,\r\n    },\r\n    iconReverse: {\r\n        marginRight: 12,\r\n        marginLeft: -4,\r\n    },\r\n    label: {\r\n        textAlign: \"center\",\r\n        letterSpacing: 1,\r\n        marginVertical: 9,\r\n        marginHorizontal: 16,\r\n    },\r\n    compactLabel: {\r\n        marginHorizontal: 8,\r\n    },\r\n    uppercaseLabel: {\r\n        textTransform: \"uppercase\",\r\n    },\r\n});\r\n\r\nexport default Button;\r\n"]}