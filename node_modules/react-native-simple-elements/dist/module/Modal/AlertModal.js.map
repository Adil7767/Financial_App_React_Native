{"version":3,"sources":["AlertModal.tsx"],"names":["React","View","KeyboardAvoidingView","Modal","RNModal","TouchableOpacity","Animated","PanResponder","Platform","Dimensions","ThemeContext","WindowHeight","get","height","SUPPORTED_ORIENTATIONS","defaultProps","animationType","openDuration","closeDuration","closeOnDragDown","dragFromTopOnly","closeOnPressMask","closeOnPressBack","keyboardAvoidingViewEnabled","OS","customStyles","onClose","onOpen","children","AlertModal","props","visible","setVisible","useState","theme","useContext","opacityValue","useRef","Value","current","transformValue","pan","ValueXY","panResponder","undefined","useEffect","setModalVisible","parallel","timing","toValue","duration","useNativeDriver","start","setValue","x","y","createPanResponder","create","onStartShouldSetPanResponder","onPanResponderMove","e","gestureState","dy","event","onPanResponderRelease","spring","close","panStyle","transform","getTranslateTransform","flex","backgroundColor","wrapper","panHandlers","colors","backdrop","width","overflow","opacity","scale","justifyContent","alignItems","container","borderRadius","margin","draggableIcon"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    View,\r\n    KeyboardAvoidingView,\r\n    Modal as RNModal,\r\n    TouchableOpacity,\r\n    Animated,\r\n    PanResponder,\r\n    Platform,\r\n    Dimensions\r\n} from \"react-native\";\r\nimport { ThemeContext } from \"styled-components\";\r\n\r\nconst WindowHeight = Dimensions.get(\"window\").height;\r\n\r\nconst SUPPORTED_ORIENTATIONS = [\r\n    \"portrait\",\r\n    \"portrait-upside-down\",\r\n    \"landscape\",\r\n    \"landscape-left\",\r\n    \"landscape-right\"\r\n];\r\n\r\ntype Props = {\r\n    animationType?: \"none\" | \"slide\" | \"fade\",\r\n    visible: boolean,\r\n    openDuration?: number,\r\n    closeDuration?: number,\r\n    closeOnDragDown?: boolean,\r\n    closeOnPressMask?: boolean,\r\n    dragFromTopOnly?: boolean,\r\n    closeOnPressBack?: boolean,\r\n    keyboardAvoidingViewEnabled?: boolean,\r\n    customStyles?: Record<string, unknown>,\r\n    onClose?: (evt) => void,\r\n    onOpen?: (evt) => void,\r\n    children?: React.ReactNode,\r\n};\r\n\r\n// type State = {\r\n//     animatedHeight: Animated.Value,\r\n//     pan: Animated.ValueXY,\r\n//     modalVisible: boolean,\r\n// }\r\n\r\nconst defaultProps = {\r\n    animationType: \"none\",\r\n    openDuration: 300,\r\n    closeDuration: 200,\r\n    closeOnDragDown: false,\r\n    dragFromTopOnly: false,\r\n    closeOnPressMask: true,\r\n    closeOnPressBack: true,\r\n    keyboardAvoidingViewEnabled: Platform.OS === \"ios\",\r\n    customStyles: {},\r\n    onClose: null,\r\n    onOpen: null,\r\n    children: <View />\r\n};\r\n\r\nconst AlertModal = (props: Props) => {\r\n\r\n    const {\r\n        animationType,\r\n        closeOnDragDown,\r\n        dragFromTopOnly,\r\n        closeOnPressMask,\r\n        closeOnPressBack,\r\n        children,\r\n        customStyles,\r\n        keyboardAvoidingViewEnabled,\r\n        openDuration,\r\n        closeDuration,\r\n        onOpen,\r\n        onClose,\r\n    } = props;\r\n\r\n    const [ visible, setVisible ] = React.useState(false);\r\n    const theme = React.useContext(ThemeContext);\r\n\r\n    const opacityValue = React.useRef(new Animated.Value(0)).current;\r\n    const transformValue = React.useRef(new Animated.Value(0.9)).current;\r\n    const pan = React.useRef(new Animated.ValueXY());\r\n\r\n    const panResponder = React.useRef(undefined);\r\n\r\n    React.useEffect(() => {\r\n        if (!visible && props.visible) {\r\n            setModalVisible(true, props);\r\n        } else if (visible && !props.visible) {\r\n            setModalVisible(false, props);\r\n        }\r\n    }, [ props.visible ]);\r\n\r\n    // state: State = {\r\n    //     modalVisible: false,\r\n    //     animatedHeight: new Animated.Value(0),\r\n    //     pan: new Animated.ValueXY()\r\n    // };\r\n\r\n    // panResponder;\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n\r\n    //     this.createPanResponder(props);\r\n    // }\r\n\r\n    const setModalVisible = (visible, props?) => {\r\n        // const { height, minClosingHeight, openDuration, closeDuration, onClose, onOpen } = this.props;\r\n        // const { animatedHeight, pan } = this.state;\r\n        if (visible) {\r\n            setVisible(visible);\r\n            if (typeof onOpen === \"function\") onOpen(props);\r\n            Animated.parallel([\r\n                Animated.timing(opacityValue, {\r\n                    toValue: 1,\r\n                    duration: openDuration || 300,\r\n                    useNativeDriver: true,\r\n                }),\r\n                Animated.timing(transformValue, {\r\n                    toValue: 1,\r\n                    duration: openDuration || 300,\r\n                    useNativeDriver: true,\r\n                }),\r\n            ]).start();\r\n        } else {\r\n            Animated.parallel([\r\n                Animated.timing(opacityValue, {\r\n                    toValue: 0,\r\n                    duration: closeDuration || 300,\r\n                    useNativeDriver: true,\r\n                }),\r\n                Animated.timing(transformValue, {\r\n                    toValue: 1.1,\r\n                    duration: closeDuration || 300,\r\n                    useNativeDriver: true,\r\n                }),\r\n            ]).start(() => {\r\n                pan.current.setValue({ x: 0, y: 0 });\r\n                setVisible(visible);\r\n\r\n                // this.setState({\r\n                //     modalVisible: visible,\r\n                //     animatedHeight: new Animated.Value(0)\r\n                // });\r\n\r\n                if (typeof onClose === \"function\") onClose(props);\r\n            });\r\n        }\r\n    };\r\n\r\n    const createPanResponder = (props) => {\r\n        const { closeOnDragDown, height } = props;\r\n        // const { pan } = this.state;\r\n        panResponder.current = PanResponder.create({\r\n            onStartShouldSetPanResponder: () => closeOnDragDown,\r\n            onPanResponderMove: (e, gestureState) => {\r\n                if (gestureState.dy > 0) {\r\n                    Animated.event([null, { dy: pan.current.y }], { useNativeDriver: false })(e, gestureState);\r\n                }\r\n            },\r\n            onPanResponderRelease: (e, gestureState) => {\r\n                if (height / 4 - gestureState.dy < 0) {\r\n                    setModalVisible(false);\r\n                } else {\r\n                    Animated.spring(pan.current, { toValue: { x: 0, y: 0 }, useNativeDriver: false }).start();\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    // const open = (props?) => {\r\n    //     setModalVisible(true, props);\r\n    // }\r\n\r\n    const close = (props?) => {\r\n        setModalVisible(false, props);\r\n    };\r\n\r\n    // const { animatedHeight, pan } = this.state;\r\n\r\n    if (!props.visible && !panResponder.current) {\r\n        createPanResponder(props);\r\n    }\r\n\r\n    const panStyle = {\r\n        transform: pan.current.getTranslateTransform()\r\n    };\r\n\r\n    return (\r\n        <RNModal\r\n            transparent\r\n            animationType={animationType}\r\n            visible={visible}\r\n\r\n            // @ts-ignore\r\n            supportedOrientations={SUPPORTED_ORIENTATIONS}\r\n            onRequestClose={() => {\r\n                if (closeOnPressBack) setModalVisible(false);\r\n            }}\r\n        >\r\n            <KeyboardAvoidingView\r\n                enabled={keyboardAvoidingViewEnabled}\r\n                behavior=\"padding\"\r\n                style={[\r\n                    {\r\n                        flex: 1,\r\n                        backgroundColor: \"#00000077\",\r\n                    },\r\n                    customStyles.wrapper,\r\n                ]}\r\n            >\r\n                <TouchableOpacity\r\n                    style={{\r\n                        flex: 1,\r\n                        backgroundColor: \"transparent\"\r\n                    }}\r\n                    activeOpacity={1}\r\n                    onPress={() => (closeOnPressMask ? close() : null)}\r\n                />\r\n                <Animated.View\r\n                    {...(!dragFromTopOnly && panResponder.current?.panHandlers ? panResponder.current.panHandlers : {} )}\r\n                    style={[\r\n                        panStyle,\r\n                        {\r\n                            backgroundColor: theme.colors.backdrop,\r\n                            width: \"100%\",\r\n                            height: WindowHeight,\r\n                            overflow: \"hidden\"\r\n                        },\r\n                        // { height: animatedHeight.current },\r\n                        {\r\n                            opacity: opacityValue,\r\n                            transform: [\r\n                                { scale: transformValue },\r\n                            ]\r\n                        },\r\n                        {\r\n                            justifyContent: \"center\",\r\n                            alignItems: \"center\",\r\n                        },\r\n                        customStyles.container\r\n                    ]}\r\n                >\r\n                    {closeOnDragDown && (\r\n                        <View\r\n                            {...(dragFromTopOnly && panResponder.current?.panHandlers ? panResponder.current.panHandlers : {})}\r\n                            style={{\r\n                                width: \"100%\",\r\n                                alignItems: \"center\",\r\n                                backgroundColor: \"transparent\"\r\n                            }}\r\n                        >\r\n                            <View style={[\r\n                                {\r\n                                    width: 35,\r\n                                    height: 5,\r\n                                    borderRadius: 5,\r\n                                    margin: 10,\r\n                                    backgroundColor: \"#ccc\",\r\n                                },\r\n                                customStyles.draggableIcon,\r\n                            ]} />\r\n                        </View>\r\n                    )}\r\n                    {children}\r\n                </Animated.View>\r\n            </KeyboardAvoidingView>\r\n        </RNModal>\r\n    );\r\n};\r\n\r\nAlertModal.defaultProps = defaultProps;\r\n\r\nexport default AlertModal;\r\n"]}