function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from "react";
import { View, KeyboardAvoidingView, Modal as RNModal, Animated, PanResponder, Dimensions, Platform } from "react-native";
const WindowHeight = Dimensions.get("window").height;
const SUPPORTED_ORIENTATIONS = ["portrait", "portrait-upside-down", "landscape", "landscape-left", "landscape-right"];
// type State = {
//     animatedHeight: Animated.Value,
//     pan: Animated.ValueXY,
//     modalVisible: boolean,
// }
const defaultProps = {
  animationType: "none",
  height: WindowHeight,
  minClosingHeight: 0,
  openDuration: 300,
  closeDuration: 200,
  closeOnDragDown: false,
  dragFromTopOnly: false,
  closeOnPressMask: true,
  closeOnPressBack: true,
  keyboardAvoidingViewEnabled: Platform.OS === "ios",
  customStyles: {},
  onClose: null,
  onOpen: null,
  children: /*#__PURE__*/React.createElement(View, null)
};

const FullscreenModal = ({
  visible,
  animationType,
  closeOnDragDown,
  dragFromTopOnly,
  closeOnPressBack,
  children,
  customStyles,
  keyboardAvoidingViewEnabled,
  height,
  onOpen,
  onClose
}) => {
  var _panResponder$current, _panResponder$current2;

  const [modalVisible, setModalVisible] = React.useState(false);
  const pan = React.useRef(new Animated.ValueXY());
  const panResponder = React.useRef(undefined);
  React.useEffect(() => {
    if (!modalVisible && visible) {
      _setModalVisible(true);
    } else if (modalVisible && !visible) {
      _setModalVisible(false);
    }
  }, [visible]);

  const _setModalVisible = (visible, props) => {
    if (visible) {
      setModalVisible(visible);
      if (typeof onOpen === "function") onOpen(props);
    } else {
      setModalVisible(visible);
      if (typeof onClose === "function") onClose(props);
    }
  };

  const createPanResponder = () => {
    panResponder.current = PanResponder.create({
      onStartShouldSetPanResponder: () => closeOnDragDown,
      onPanResponderMove: (e, gestureState) => {
        if (gestureState.dy > 0) {
          Animated.event([null, {
            dy: pan.current.y
          }], {
            useNativeDriver: false
          })(e, gestureState);
        }
      },
      onPanResponderRelease: (e, gestureState) => {
        if (height / 4 - gestureState.dy < 0) {
          _setModalVisible(false);
        } else {
          Animated.spring(pan.current, {
            toValue: {
              x: 0,
              y: 0
            },
            useNativeDriver: false
          }).start();
        }
      }
    });
  };

  if (!visible && !panResponder.current) {
    createPanResponder();
  }

  const panStyle = {
    transform: pan.current.getTranslateTransform()
  };
  return /*#__PURE__*/React.createElement(RNModal, {
    transparent: true,
    animationType: animationType,
    visible: modalVisible // @ts-ignore
    ,
    supportedOrientations: SUPPORTED_ORIENTATIONS,
    onRequestClose: () => {
      if (closeOnPressBack) _setModalVisible(false);
    }
  }, /*#__PURE__*/React.createElement(KeyboardAvoidingView, {
    enabled: keyboardAvoidingViewEnabled,
    behavior: "padding",
    style: [{
      flex: 1,
      backgroundColor: "#00000077"
    }, customStyles.wrapper]
  }, /*#__PURE__*/React.createElement(Animated.View, _extends({}, !dragFromTopOnly && (_panResponder$current = panResponder.current) !== null && _panResponder$current !== void 0 && _panResponder$current.panHandlers ? panResponder.current.panHandlers : {}, {
    style: [panStyle, {
      backgroundColor: "#fff",
      width: "100%",
      height: WindowHeight,
      overflow: "hidden"
    }, customStyles.container]
  }), closeOnDragDown && /*#__PURE__*/React.createElement(View, _extends({}, dragFromTopOnly && (_panResponder$current2 = panResponder.current) !== null && _panResponder$current2 !== void 0 && _panResponder$current2.panHandlers ? panResponder.current.panHandlers : {}, {
    style: {
      width: "100%",
      alignItems: "center",
      backgroundColor: "transparent"
    }
  }), /*#__PURE__*/React.createElement(View, {
    style: [{
      width: 35,
      height: 5,
      borderRadius: 5,
      margin: 10,
      backgroundColor: "#ccc"
    }, customStyles.draggableIcon]
  })), children)));
};

FullscreenModal.defaultProps = defaultProps;
export default FullscreenModal;
//# sourceMappingURL=FullscreenModal.js.map