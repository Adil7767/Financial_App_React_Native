{"version":3,"sources":["LeftNavModal.tsx"],"names":["React","View","KeyboardAvoidingView","Modal","RNModal","TouchableOpacity","Animated","PanResponder","Platform","Dimensions","Surface","windowHeight","get","height","SUPPORTED_ORIENTATIONS","defaultProps","animationType","width","minClosingHeight","openDuration","closeDuration","closeOnDragDown","dragFromTopOnly","closeOnPressMask","closeOnPressBack","keyboardAvoidingViewEnabled","OS","customStyles","onClose","onOpen","children","additionalTopSpace","showMask","LeftNavModal","props","visible","setVisible","useState","animatedWidth","useRef","Value","pan","ValueXY","panResponder","undefined","useEffect","setModalVisible","timing","current","useNativeDriver","toValue","duration","start","setValue","x","y","createPanResponder","create","onStartShouldSetPanResponder","onPanResponderMove","e","gestureState","dy","event","onPanResponderRelease","spring","close","panStyle","transform","getTranslateTransform","flex","flexDirection","wrapper","panHandlers","marginTop","overflow","container","alignItems","backgroundColor","borderRadius","margin","draggableIcon"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    View,\r\n    KeyboardAvoidingView,\r\n    Modal as RNModal,\r\n    TouchableOpacity,\r\n    Animated,\r\n    PanResponder,\r\n    Platform,\r\n    Dimensions\r\n} from \"react-native\";\r\nimport Surface from \"../Surface\";\r\n\r\nconst windowHeight = Dimensions.get(\"window\").height;\r\n\r\nconst SUPPORTED_ORIENTATIONS = [\r\n    \"portrait\",\r\n    \"portrait-upside-down\",\r\n    \"landscape\",\r\n    \"landscape-left\",\r\n    \"landscape-right\"\r\n];\r\n\r\ntype Props = {\r\n    animationType?: \"none\" | \"slide\" | \"fade\",\r\n    visible: boolean,\r\n    width?: number,\r\n    height?: number,\r\n    minClosingHeight?: number,\r\n    openDuration?: number,\r\n    closeDuration?: number,\r\n    closeOnDragDown?: boolean,\r\n    closeOnPressMask?: boolean,\r\n    dragFromTopOnly?: boolean,\r\n    closeOnPressBack?: boolean,\r\n    keyboardAvoidingViewEnabled?: boolean,\r\n    customStyles?: Record<string, unknown>,\r\n    onClose?: (evt) => void,\r\n    onOpen?: (evt) => void,\r\n    children?: React.ReactNode,\r\n    additionalTopSpace?: number,\r\n    showMask?: boolean,\r\n};\r\n\r\n// type State = {\r\n//     animatedHeight: Animated.Value,\r\n//     pan: Animated.ValueXY,\r\n//     modalVisible: boolean,\r\n// }\r\n\r\nconst defaultProps = {\r\n    animationType: \"none\",\r\n    width: 240,\r\n    height: windowHeight,\r\n    minClosingHeight: 0,\r\n    openDuration: 300,\r\n    closeDuration: 200,\r\n    closeOnDragDown: false,\r\n    dragFromTopOnly: false,\r\n    closeOnPressMask: true,\r\n    closeOnPressBack: true,\r\n    keyboardAvoidingViewEnabled: Platform.OS === \"ios\",\r\n    customStyles: {},\r\n    onClose: null,\r\n    onOpen: null,\r\n    children: <View />,\r\n    additionalTopSpace: 0,\r\n    showMask: false,\r\n};\r\n\r\nconst LeftNavModal = (props: Props) => {\r\n\r\n    const {\r\n        width,\r\n        animationType,\r\n        closeOnDragDown,\r\n        dragFromTopOnly,\r\n        closeOnPressMask,\r\n        closeOnPressBack,\r\n        children,\r\n        customStyles,\r\n        keyboardAvoidingViewEnabled,\r\n        openDuration,\r\n        closeDuration,\r\n        minClosingHeight,\r\n        additionalTopSpace,\r\n        onOpen,\r\n        onClose,\r\n        showMask,\r\n    } = props;\r\n\r\n    const [ visible, setVisible ] = React.useState(false);\r\n    const animatedWidth = React.useRef(new Animated.Value(0));\r\n    const pan = React.useRef(new Animated.ValueXY());\r\n\r\n    const panResponder = React.useRef(undefined);\r\n\r\n    React.useEffect(() => {\r\n        if (!visible && props.visible) {\r\n            setModalVisible(true, props);\r\n        } else if (visible && !props.visible) {\r\n            setModalVisible(false, props);\r\n        }\r\n    }, [ props.visible ]);\r\n\r\n    // state: State = {\r\n    //     modalVisible: false,\r\n    //     animatedHeight: new Animated.Value(0),\r\n    //     pan: new Animated.ValueXY()\r\n    // };\r\n\r\n    // panResponder;\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n\r\n    //     this.createPanResponder(props);\r\n    // }\r\n\r\n    const setModalVisible = (visible, props?) => {\r\n        // const { height, minClosingHeight, openDuration, closeDuration, onClose, onOpen } = this.props;\r\n        // const { animatedHeight, pan } = this.state;\r\n        if (visible) {\r\n            setVisible(visible);\r\n            if (typeof onOpen === \"function\") onOpen(props);\r\n            Animated.timing(animatedWidth.current, {\r\n                useNativeDriver: false,\r\n                toValue: width,\r\n                duration: openDuration\r\n            }).start();\r\n        } else {\r\n            Animated.timing(animatedWidth.current, {\r\n                useNativeDriver: false,\r\n                toValue: minClosingHeight,\r\n                duration: closeDuration\r\n            }).start(() => {\r\n                pan.current.setValue({ x: 0, y: 0 });\r\n                animatedWidth.current = new Animated.Value(0),\r\n                setVisible(visible);\r\n\r\n                // this.setState({\r\n                //     modalVisible: visible,\r\n                //     animatedHeight: new Animated.Value(0)\r\n                // });\r\n\r\n                if (typeof onClose === \"function\") onClose(props);\r\n            });\r\n        }\r\n    };\r\n\r\n    const createPanResponder = (props) => {\r\n        const { closeOnDragDown, height } = props;\r\n        // const { pan } = this.state;\r\n        panResponder.current = PanResponder.create({\r\n            onStartShouldSetPanResponder: () => closeOnDragDown,\r\n            onPanResponderMove: (e, gestureState) => {\r\n                if (gestureState.dy > 0) {\r\n                    Animated.event([null, { dy: pan.current.y }], { useNativeDriver: false })(e, gestureState);\r\n                }\r\n            },\r\n            onPanResponderRelease: (e, gestureState) => {\r\n                if (height / 4 - gestureState.dy < 0) {\r\n                    setModalVisible(false);\r\n                } else {\r\n                    Animated.spring(pan.current, { toValue: { x: 0, y: 0 }, useNativeDriver: false }).start();\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    // const open = (props?) => {\r\n    //     setModalVisible(true, props);\r\n    // }\r\n\r\n    const close = (props?) => {\r\n        setModalVisible(false, props);\r\n    };\r\n\r\n    // const { animatedHeight, pan } = this.state;\r\n\r\n    if (!props.visible && !panResponder.current) {\r\n        createPanResponder(props);\r\n    }\r\n\r\n    const panStyle = {\r\n        transform: pan.current.getTranslateTransform()\r\n    };\r\n\r\n    return (\r\n        <RNModal\r\n            transparent\r\n            animationType={animationType}\r\n            visible={visible}\r\n\r\n            // @ts-ignore\r\n            supportedOrientations={SUPPORTED_ORIENTATIONS}\r\n            onRequestClose={() => {\r\n                if (closeOnPressBack) setModalVisible(false);\r\n            }}\r\n        >\r\n            <KeyboardAvoidingView\r\n                enabled={keyboardAvoidingViewEnabled}\r\n                behavior=\"padding\"\r\n                style={[\r\n                    {\r\n                        flex: 1,\r\n                        flexDirection: \"row\",\r\n                    },\r\n                    customStyles.wrapper,\r\n                ]}\r\n            >\r\n                <Animated.View\r\n                    {...(!dragFromTopOnly && panResponder.current?.panHandlers ? panResponder.current.panHandlers : {} )}\r\n                    style={[\r\n                        panStyle,\r\n                        {\r\n                            marginTop: additionalTopSpace,\r\n                            height: windowHeight - additionalTopSpace,\r\n                            overflow: \"hidden\"\r\n                        },\r\n                        { width: animatedWidth.current },\r\n                        customStyles.container\r\n                    ]}\r\n                >\r\n                    {closeOnDragDown && (\r\n                        <View\r\n                            {...(dragFromTopOnly && panResponder.current?.panHandlers ? panResponder.current.panHandlers : {} )}\r\n                            style={{\r\n                                width: \"100%\",\r\n                                alignItems: \"center\",\r\n                                backgroundColor: \"transparent\"\r\n                            }}\r\n                        >\r\n                            <View style={[\r\n                                {\r\n                                    width: 35,\r\n                                    height: 5,\r\n                                    borderRadius: 5,\r\n                                    margin: 10,\r\n                                    backgroundColor: \"#ccc\",\r\n                                },\r\n                                customStyles.draggableIcon,\r\n                            ]} />\r\n                        </View>\r\n                    )}\r\n                    <Surface\r\n                        style={{\r\n                            flex: 1,\r\n                        }}\r\n                    >\r\n                        {children}\r\n                    </Surface>\r\n                </Animated.View>\r\n                {showMask ?\r\n                    <TouchableOpacity\r\n                        style={{\r\n                            flex: 1,\r\n                            // backgroundColor: \"transparent\",\r\n                            backgroundColor: \"#00000077\",\r\n                        }}\r\n                        activeOpacity={1}\r\n                        onPress={() => (closeOnPressMask ? close() : null)}\r\n                    />\r\n                    :\r\n                    <View\r\n                        style={{\r\n                            flex: 1,\r\n                        }}\r\n                        pointerEvents=\"box-none\"\r\n                    />\r\n                }\r\n            </KeyboardAvoidingView>\r\n        </RNModal>\r\n    );\r\n};\r\n\r\nLeftNavModal.defaultProps = defaultProps;\r\n\r\nexport default LeftNavModal;\r\n"]}