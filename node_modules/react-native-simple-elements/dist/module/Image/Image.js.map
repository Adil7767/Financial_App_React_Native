{"version":3,"sources":["Image.tsx"],"names":["React","Animated","Image","ImageNative","StyleSheet","View","TouchableOpacity","Component","placeholderOpacity","Value","e","transition","onLoad","transitionDuration","props","state","setValue","setTimeout","timing","toValue","duration","useNativeDriver","start","render","onPress","onLongPress","placeholderStyle","PlaceholderContent","containerStyle","childrenContainerStyle","style","ImageComponent","children","attributes","hasImage","Boolean","source","width","height","styleProps","flatten","styles","container","absoluteFill","placeholderContainer","opacity","placeholder","getSize","getSizeWithHeaders","prefetch","abortPrefetch","queryCache","resolveAssetSource","create","backgroundColor","position","overflow","absoluteFillObject","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n    Animated,\n    Image as ImageNative,\n    StyleSheet,\n    View,\n    TouchableOpacity,\n    ImageProps as RNImageProps,\n    ViewStyle,\n    StyleProp,\n    ImageStyle,\n} from \"react-native\";\n\nexport type ImageProps = RNImageProps & {\n    Component?: typeof React.Component;\n    onPress?(): void;\n    onLongPress?(): void;\n    ImageComponent?: React.ComponentType<any>;\n    PlaceholderContent?: React.ReactElement<any>;\n    containerStyle?: StyleProp<ViewStyle>;\n    childrenContainerStyle?: StyleProp<ViewStyle>;\n    placeholderStyle?: StyleProp<ViewStyle>;\n    transition?: boolean;\n    transitionDuration?: number;\n};\n\ntype ImageState = {\n    placeholderOpacity: Animated.Value;\n};\n\nclass Image extends React.Component<\n    ImageProps\n> {\n    static getSize = ImageNative.getSize;\n    static getSizeWithHeaders = ImageNative.getSizeWithHeaders;\n    static prefetch = ImageNative.prefetch;\n    static abortPrefetch = ImageNative.abortPrefetch;\n    static queryCache = ImageNative.queryCache;\n    static resolveAssetSource = ImageNative.resolveAssetSource;\n\n    state: ImageState = {\n        placeholderOpacity: new Animated.Value(1),\n    };\n\n    onLoad = (e: any) => {\n        const { transition, onLoad, transitionDuration = 360 } = this.props;\n        if (!transition) {\n            this.state.placeholderOpacity.setValue(0);\n            return;\n        }\n\n        setTimeout(() => {\n            Animated.timing(this.state.placeholderOpacity, {\n                toValue: 0,\n                duration: transitionDuration,\n                useNativeDriver: true,\n            }).start();\n        }, 200);\n\n        onLoad && onLoad(e);\n    };\n\n    render() {\n        const {\n            onPress,\n            onLongPress,\n            Component = onPress || onLongPress ? TouchableOpacity : View,\n            placeholderStyle,\n            PlaceholderContent,\n            containerStyle,\n            childrenContainerStyle = null,\n            style = {},\n            ImageComponent = ImageNative,\n            children,\n            ...attributes\n        } = this.props;\n\n        const hasImage = Boolean(attributes.source);\n        const { width, height, ...styleProps } = StyleSheet.flatten(style);\n\n        return (\n            <Component\n                onPress={onPress}\n                onLongPress={onLongPress}\n                accessibilityIgnoresInvertColors={true}\n                style={StyleSheet.flatten([\n                    styles.container,\n                    { width, height, },\n                    containerStyle,\n                ])}\n            >\n                <ImageComponent\n                    testID=\"RNSP__Image\"\n                    transition={true}\n                    transitionDuration={360}\n                    {...attributes}\n                    onLoad={this.onLoad}\n                    style={StyleSheet.flatten([\n                        StyleSheet.absoluteFill,\n                        {\n                            width: width,\n                            height: height,\n                        } as StyleProp<ImageStyle>,\n                        styleProps as any,\n                    ])}\n                />\n\n                <Animated.View\n                    pointerEvents={hasImage ? \"none\" : \"auto\"}\n                    accessibilityElementsHidden={hasImage}\n                    importantForAccessibility={hasImage ? \"no-hide-descendants\" : \"yes\"}\n                    style={[\n                        styles.placeholderContainer,\n                        {\n                            opacity: hasImage ? this.state.placeholderOpacity : 1,\n                        },\n                    ]}\n                >\n                    <View\n                        testID=\"RNSP__Image__placeholder\"\n                        style={StyleSheet.flatten([\n                            style,\n                            styles.placeholder,\n                            placeholderStyle,\n                        ])}\n                    >\n                        {PlaceholderContent}\n                    </View>\n                </Animated.View>\n\n                <View\n                    testID=\"RNSP__Image__children__container\"\n                    style={childrenContainerStyle ?? style}\n                >\n                    {children}\n                </View>\n            </Component>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: \"transparent\",\n        position: \"relative\",\n        overflow: \"hidden\",\n    },\n    placeholderContainer: {\n        ...StyleSheet.absoluteFillObject,\n    },\n    placeholder: {\n        backgroundColor: \"#bdbdbd\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n});\n\nexport default Image;\n"]}