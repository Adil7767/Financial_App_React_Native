function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from "react";
import { Animated, Image as ImageNative, StyleSheet, View, TouchableOpacity } from "react-native";

class Image extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      placeholderOpacity: new Animated.Value(1)
    });

    _defineProperty(this, "onLoad", e => {
      const {
        transition,
        onLoad,
        transitionDuration = 360
      } = this.props;

      if (!transition) {
        this.state.placeholderOpacity.setValue(0);
        return;
      }

      setTimeout(() => {
        Animated.timing(this.state.placeholderOpacity, {
          toValue: 0,
          duration: transitionDuration,
          useNativeDriver: true
        }).start();
      }, 200);
      onLoad && onLoad(e);
    });
  }

  render() {
    const {
      onPress,
      onLongPress,
      Component = onPress || onLongPress ? TouchableOpacity : View,
      placeholderStyle,
      PlaceholderContent,
      containerStyle,
      childrenContainerStyle = null,
      style = {},
      ImageComponent = ImageNative,
      children,
      ...attributes
    } = this.props;
    const hasImage = Boolean(attributes.source);
    const {
      width,
      height,
      ...styleProps
    } = StyleSheet.flatten(style);
    return /*#__PURE__*/React.createElement(Component, {
      onPress: onPress,
      onLongPress: onLongPress,
      accessibilityIgnoresInvertColors: true,
      style: StyleSheet.flatten([styles.container, {
        width,
        height
      }, containerStyle])
    }, /*#__PURE__*/React.createElement(ImageComponent, _extends({
      testID: "RNSP__Image",
      transition: true,
      transitionDuration: 360
    }, attributes, {
      onLoad: this.onLoad,
      style: StyleSheet.flatten([StyleSheet.absoluteFill, {
        width: width,
        height: height
      }, styleProps])
    })), /*#__PURE__*/React.createElement(Animated.View, {
      pointerEvents: hasImage ? "none" : "auto",
      accessibilityElementsHidden: hasImage,
      importantForAccessibility: hasImage ? "no-hide-descendants" : "yes",
      style: [styles.placeholderContainer, {
        opacity: hasImage ? this.state.placeholderOpacity : 1
      }]
    }, /*#__PURE__*/React.createElement(View, {
      testID: "RNSP__Image__placeholder",
      style: StyleSheet.flatten([style, styles.placeholder, placeholderStyle])
    }, PlaceholderContent)), /*#__PURE__*/React.createElement(View, {
      testID: "RNSP__Image__children__container",
      style: childrenContainerStyle !== null && childrenContainerStyle !== void 0 ? childrenContainerStyle : style
    }, children));
  }

}

_defineProperty(Image, "getSize", ImageNative.getSize);

_defineProperty(Image, "getSizeWithHeaders", ImageNative.getSizeWithHeaders);

_defineProperty(Image, "prefetch", ImageNative.prefetch);

_defineProperty(Image, "abortPrefetch", ImageNative.abortPrefetch);

_defineProperty(Image, "queryCache", ImageNative.queryCache);

_defineProperty(Image, "resolveAssetSource", ImageNative.resolveAssetSource);

const styles = StyleSheet.create({
  container: {
    backgroundColor: "transparent",
    position: "relative",
    overflow: "hidden"
  },
  placeholderContainer: { ...StyleSheet.absoluteFillObject
  },
  placeholder: {
    backgroundColor: "#bdbdbd",
    alignItems: "center",
    justifyContent: "center"
  }
});
export default Image;
//# sourceMappingURL=Image.js.map