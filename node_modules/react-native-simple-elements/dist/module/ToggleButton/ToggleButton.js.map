{"version":3,"sources":["ToggleButton.tsx"],"names":["React","StyleSheet","color","ThemeContext","IconButton","ToggleButtonGroupContext","black","white","ToggleButton","icon","size","accessibilityLabel","disabled","style","value","status","onPress","rest","theme","useContext","borderRadius","roundness","context","backgroundColor","checked","dark","e","onValueChange","selected","styles","content","borderColor","alpha","rgb","string","create","width","height","margin","ToggleButtonWithTheme"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACIC,UADJ,QAKO,cALP;AAMA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAuBC,YAAvB,QAA2C,mBAA3C;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,SAASC,wBAAT,QAAyC,qBAAzC;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,iBAA7B;;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,CAAC;AAClBC,EAAAA,IADkB;AAElBC,EAAAA,IAFkB;AAGlBC,EAAAA,kBAHkB;AAIlBC,EAAAA,QAJkB;AAKlBC,EAAAA,KALkB;AAMlBC,EAAAA,KANkB;AAOlBC,EAAAA,MAPkB;AAQlBC,EAAAA,OARkB;AASlB,KAAGC;AATe,CAAD,KAUR;AACT,QAAMC,KAAK,GAAGlB,KAAK,CAACmB,UAAN,CAAiBhB,YAAjB,CAAd;AACA,QAAMiB,YAAY,GAAGF,KAAK,CAACG,SAA3B;AAEA,sBACI,oBAAC,wBAAD,CAA0B,QAA1B,QACMC,OAAD,IAAsE;AACnE,QAAIC,eAAJ;AAEA,UAAMC,OAAuB,GACxBF,OAAO,IAAIA,OAAO,CAACR,KAAR,KAAkBA,KAA9B,IAAwCC,MAAM,KAAK,SADvD;;AAGA,QAAIS,OAAJ,EAAa;AACTD,MAAAA,eAAe,GAAGL,KAAK,CAACO,IAAN,GACZ,0BADY,GAEZ,oBAFN;AAGH,KAJD,MAIO;AACHF,MAAAA,eAAe,GAAG,aAAlB;AACH;;AAED,wBACI,oBAAC,UAAD;AACI,MAAA,UAAU,EAAE,KADhB;AAEI,MAAA,IAAI,EAAEd,IAFV;AAGI,MAAA,OAAO,EAAGiB,CAAD,IAAwC;AAC7C,YAAIV,OAAJ,EAAa;AACTA,UAAAA,OAAO,CAACU,CAAD,CAAP;AACH;;AAED,YAAIJ,OAAJ,EAAa;AACTA,UAAAA,OAAO,CAACK,aAAR,CAAsB,CAACH,OAAD,GAAWV,KAAX,GAAmB,IAAzC;AACH;AACJ,OAXL;AAYI,MAAA,IAAI,EAAEJ,IAZV;AAaI,MAAA,kBAAkB,EAAEC,kBAbxB;AAcI,MAAA,kBAAkB,EAAE;AAAEC,QAAAA,QAAF;AAAYgB,QAAAA,QAAQ,EAAEJ;AAAtB,OAdxB;AAeI,MAAA,QAAQ,EAAEZ,QAfd;AAgBI,MAAA,KAAK,EAAE,CACHiB,MAAM,CAACC,OADJ,EAEH;AACIP,QAAAA,eADJ;AAEIH,QAAAA,YAFJ;AAGIW,QAAAA,WAAW,EAAE7B,KAAK,CAACgB,KAAK,CAACO,IAAN,GAAalB,KAAb,GAAqBD,KAAtB,CAAL,CACR0B,KADQ,CACF,IADE,EAERC,GAFQ,GAGRC,MAHQ;AAHjB,OAFG,EAUHrB,KAVG;AAhBX,OA4BQI,IA5BR,EADJ;AAgCH,GA/CL,CADJ;AAmDH,CAjED;;AAmEA,MAAMY,MAAM,GAAG5B,UAAU,CAACkC,MAAX,CAAkB;AAC7BL,EAAAA,OAAO,EAAE;AACLM,IAAAA,KAAK,EAAE,EADF;AAELC,IAAAA,MAAM,EAAE,EAFH;AAGLC,IAAAA,MAAM,EAAE;AAHH;AADoB,CAAlB,CAAf;AAQA,eAAe9B,YAAf,C,CAEA;;AACA,MAAM+B,qBAAqB,GAAG/B,YAA9B,C,CACA;;AACA,SAAS+B,qBAAqB,IAAI/B,YAAlC","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    StyleSheet,\r\n    StyleProp,\r\n    ViewStyle,\r\n    GestureResponderEvent,\r\n} from \"react-native\";\r\nimport color from \"color\";\r\nimport { DefaultTheme, ThemeContext } from \"styled-components\";\r\nimport IconButton from \"../IconButton\";\r\nimport { ToggleButtonGroupContext } from \"./ToggleButtonGroup\";\r\nimport { black, white } from \"../theme/colors\";\r\n\r\ntype Props = {\r\n    /**\r\n     * Icon to display for the `ToggleButton`.\r\n     */\r\n    icon: React.ReactElement;\r\n    /**\r\n     * Size of the icon.\r\n     */\r\n    size?: number;\r\n    /**\r\n     * Custom text color for button.s\r\n     */\r\n    color?: string;\r\n    /**\r\n     * Whether the button is disabled.\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\r\n     */\r\n    accessibilityLabel?: string;\r\n    /**\r\n     * Function to execute on press.\r\n     */\r\n    onPress?: (value?: GestureResponderEvent | string) => void;\r\n    /**\r\n     * Value of button.\r\n     */\r\n    value?: string;\r\n    /**\r\n     * Status of button.\r\n     */\r\n    status?: \"checked\" | \"unchecked\";\r\n    style?: StyleProp<ViewStyle>;\r\n    /**\r\n     * @optional\r\n     */\r\n    theme?: DefaultTheme;\r\n};\r\n\r\n/**\r\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\r\n * a group should share a common container.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import ToggleButton from 'react-native-simple-elements/components/ToggleButton';\r\n *\r\n * const ToggleButtonExample = () => {\r\n *   const [status, setStatus] = React.useState('checked');\r\n *\r\n *   const onButtonToggle = value => {\r\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\r\n *   };\r\n *\r\n *   return (\r\n *     <ToggleButton\r\n *       icon=\"bluetooth\"\r\n *       value=\"bluetooth\"\r\n *       status={status}\r\n *       onPress={onButtonToggle}\r\n *     />\r\n *   );\r\n * };\r\n *\r\n * export default ToggleButtonExample;\r\n *\r\n * ```\r\n */\r\nconst ToggleButton = ({\r\n    icon,\r\n    size,\r\n    accessibilityLabel,\r\n    disabled,\r\n    style,\r\n    value,\r\n    status,\r\n    onPress,\r\n    ...rest\r\n}: Props) => {\r\n    const theme = React.useContext(ThemeContext);\r\n    const borderRadius = theme.roundness;\r\n\r\n    return (\r\n        <ToggleButtonGroupContext.Consumer>\r\n            {(context: { value: string; onValueChange: (evt?) => void } | null) => {\r\n                let backgroundColor;\r\n\r\n                const checked: boolean | null =\r\n                    (context && context.value === value) || status === \"checked\";\r\n\r\n                if (checked) {\r\n                    backgroundColor = theme.dark\r\n                        ? \"rgba(255, 255, 255, .12)\"\r\n                        : \"rgba(0, 0, 0, .08)\";\r\n                } else {\r\n                    backgroundColor = \"transparent\";\r\n                }\r\n\r\n                return (\r\n                    <IconButton\r\n                        borderless={false}\r\n                        icon={icon}\r\n                        onPress={(e?: GestureResponderEvent | string) => {\r\n                            if (onPress) {\r\n                                onPress(e);\r\n                            }\r\n\r\n                            if (context) {\r\n                                context.onValueChange(!checked ? value : null);\r\n                            }\r\n                        }}\r\n                        size={size}\r\n                        accessibilityLabel={accessibilityLabel}\r\n                        accessibilityState={{ disabled, selected: checked }}\r\n                        disabled={disabled}\r\n                        style={[\r\n                            styles.content,\r\n                            {\r\n                                backgroundColor,\r\n                                borderRadius,\r\n                                borderColor: color(theme.dark ? white : black)\r\n                                    .alpha(0.29)\r\n                                    .rgb()\r\n                                    .string(),\r\n                            },\r\n                            style,\r\n                        ]}\r\n                        {...rest}\r\n                    />\r\n                );\r\n            }}\r\n        </ToggleButtonGroupContext.Consumer>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    content: {\r\n        width: 42,\r\n        height: 42,\r\n        margin: 0,\r\n    },\r\n});\r\n\r\nexport default ToggleButton;\r\n\r\n// @component-docs ignore-next-line\r\nconst ToggleButtonWithTheme = ToggleButton;\r\n// @component-docs ignore-next-line\r\nexport { ToggleButtonWithTheme as ToggleButton };\r\n"]}