{"version":3,"sources":["PortalHost.tsx"],"names":["React","View","StyleSheet","PortalManager","PortalContext","createContext","PortalHost","Component","manager","children","key","nextKey","mount","queue","push","type","update","op","index","findIndex","o","unmount","componentDidMount","length","action","pop","render","styles","container","props","setManager","create","flex"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { View, StyleSheet } from \"react-native\";\r\nimport PortalManager from \"./PortalManager\";\r\n\r\ntype Props = {\r\n    children: React.ReactNode;\r\n};\r\n\r\ntype Operation =\r\n    | { type: \"mount\"; key: number; children: React.ReactNode }\r\n    | { type: \"update\"; key: number; children: React.ReactNode }\r\n    | { type: \"unmount\"; key: number };\r\n\r\nexport type PortalMethods = {\r\n    mount: (children: React.ReactNode) => number;\r\n    update: (key: number, children: React.ReactNode) => void;\r\n    unmount: (key: number) => void;\r\n};\r\n\r\nexport const PortalContext = React.createContext<PortalMethods>(null as any);\r\n\r\n/**\r\n * Portal host renders all of its children `Portal` elements.\r\n * For example, you can wrap a screen in `Portal.Host` to render items above the screen.\r\n * If you're using the `Provider` component, it already includes `Portal.Host`.\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { Text } from 'react-native';\r\n * import Portal from 'react-native-simple-elements/components/Portal';\r\n *\r\n * const MyComponent = () => (\r\n *   <Portal.Host>\r\n *     <Text>Content of the app</Text>\r\n *   </Portal.Host>\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n *\r\n * Here any `Portal` elements under `<App />` are rendered alongside `<App />` and will appear above `<App />` like a `Modal`.\r\n */\r\nexport default class PortalHost extends React.Component<Props> {\r\n    static displayName = \"Portal.Host\";\r\n\r\n    componentDidMount() {\r\n        const manager = this.manager;\r\n        const queue = this.queue;\r\n\r\n        while (queue.length && manager) {\r\n            const action = queue.pop();\r\n            if (action) {\r\n                // eslint-disable-next-line default-case\r\n                switch (action.type) {\r\n                case \"mount\":\r\n                    manager.mount(action.key, action.children);\r\n                    break;\r\n                case \"update\":\r\n                    manager.update(action.key, action.children);\r\n                    break;\r\n                case \"unmount\":\r\n                    manager.unmount(action.key);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private setManager = (manager: PortalManager | undefined | null) => {\r\n        this.manager = manager;\r\n    };\r\n\r\n    private mount = (children: React.ReactNode) => {\r\n        const key = this.nextKey++;\r\n\r\n        if (this.manager) {\r\n            this.manager.mount(key, children);\r\n        } else {\r\n            this.queue.push({ type: \"mount\", key, children });\r\n        }\r\n\r\n        return key;\r\n    };\r\n\r\n    private update = (key: number, children: React.ReactNode) => {\r\n        if (this.manager) {\r\n            this.manager.update(key, children);\r\n        } else {\r\n            const op = { type: \"mount\", key, children };\r\n            const index = this.queue.findIndex(\r\n                (o) => o.type === \"mount\" || (o.type === \"update\" && o.key === key)\r\n            );\r\n\r\n            if (index > -1) {\r\n                // @ts-ignore\r\n                this.queue[index] = op;\r\n            } else {\r\n                this.queue.push(op as Operation);\r\n            }\r\n        }\r\n    };\r\n\r\n    private unmount = (key: number) => {\r\n        if (this.manager) {\r\n            this.manager.unmount(key);\r\n        } else {\r\n            this.queue.push({ type: \"unmount\", key });\r\n        }\r\n    };\r\n\r\n    private nextKey = 0;\r\n    private queue: Operation[] = [];\r\n    private manager: PortalManager | null | undefined;\r\n\r\n    render() {\r\n        return (\r\n            <PortalContext.Provider\r\n                value={{\r\n                    mount: this.mount,\r\n                    update: this.update,\r\n                    unmount: this.unmount,\r\n                }}\r\n            >\r\n                {/* Need collapsable=false here to clip the elevations, otherwise they appear above Portal components */}\r\n                <View\r\n                    style={styles.container}\r\n                    collapsable={false}\r\n                    pointerEvents=\"box-none\"\r\n                    testID=\"portal_host\"\r\n                >\r\n                    {this.props.children}\r\n                </View>\r\n                <PortalManager ref={this.setManager} />\r\n            </PortalContext.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n    },\r\n});\r\n"]}