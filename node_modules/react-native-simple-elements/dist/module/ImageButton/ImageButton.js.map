{"version":3,"sources":["ImageButton.tsx"],"names":["React","View","color","TouchableRipple","Image","ImageButton","ImageComponent","source","size","accessibilityLabel","disabled","onPress","animated","circle","style","rest","rippleColor","alpha","rgb","string","buttonSize","containerBorderRadius","iconBorderRadius","alignItems","justifyContent","overflow","margin","borderRadius","width","height","opacity","supported","top","left","bottom","right"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n    View,\n    ViewStyle,\n    StyleProp,\n    GestureResponderEvent,\n} from \"react-native\";\nimport color from \"color\";\n\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\n\nimport type { $RemoveChildren } from \"../types\";\nimport { DefaultTheme } from \"styled-components\";\nimport Image from \"../Image/Image\";\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n    ImageComponent?: React.ComponentType<any>;\n    /**\n     * Icon to display.\n     */\n    source: Record<string, any>;\n    /**\n     * Size of the icon.\n     */\n    size?: number;\n    /**\n     * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n     */\n    disabled?: boolean;\n    /**\n     * Whether an icon change is animated.\n     */\n    animated?: boolean;\n\n    circle?: boolean;\n\n    /**\n     * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n     */\n    accessibilityLabel?: string;\n    /**\n     * Function to execute on press.\n     */\n    onPress?: (e: GestureResponderEvent) => void;\n\n    style?: StyleProp<ViewStyle>;\n\n    // ref?: React.RefObject<TouchableWithoutFeedback>;\n    ref?: React.RefObject<View>;\n    /**\n     * @optional\n     */\n    theme?: DefaultTheme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import ImageButton from \"react-native-simple-elements/components/ImageButton\";\n * import * as Colors } from 'react-native-simple-elements/components/theme/colors';\n * import CameraIcon from \"@mdi/svg/svg/camera.svg\";\n *\n * const MyComponent = () => (\n *   <ImageButton\n *     source={CameraIcon}\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n */\nconst ImageButton = ({\n    ImageComponent,\n    source,\n    size = 24,\n    accessibilityLabel,\n    disabled,\n    onPress,\n    animated = false,\n    circle = false,\n    style,\n    ...rest\n}: Props) => {\n    const rippleColor = color(\"#000000\").alpha(0.32).rgb().string();\n    const buttonSize = size * 1.5;\n    const containerBorderRadius = circle ? buttonSize / 2 : 0;\n    const iconBorderRadius = circle ? size / 2 : 0;\n\n    return (\n        <TouchableRipple\n            borderless\n            centered\n            onPress={onPress}\n            rippleColor={rippleColor}\n            style={[\n                {\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    overflow: \"hidden\",\n                    margin: 6,\n                    borderRadius: buttonSize / 2,\n                },\n                { width: buttonSize, height: buttonSize, borderRadius: containerBorderRadius },\n                disabled && { opacity: 0.32 },\n                style,\n            ]}\n            accessibilityLabel={accessibilityLabel}\n            // accessibilityTraits={disabled ? [\"button\", \"disabled\"] : \"button\"}\n            // accessibilityComponentType=\"button\"\n            accessibilityRole=\"button\"\n            accessibilityState={{ disabled }}\n            disabled={disabled}\n            hitSlop={\n                // @ts-ignore - this should be fixed in react-theme-providersince withTheme() is not forwarding static property types\n                TouchableRipple.supported\n                    ? { top: 10, left: 10, bottom: 10, right: 10 }\n                    : { top: 6, left: 6, bottom: 6, right: 6 }\n            }\n            {...rest}\n        >\n            <View testID=\"icon_view\" style={{ borderRadius: iconBorderRadius }}>\n                <Image\n                    ImageComponent={ImageComponent}\n                    source={source}\n                    resizeMode=\"cover\"\n                    style={{ width: size, height: size, borderRadius: iconBorderRadius }}\n                />\n            </View>\n        </TouchableRipple>\n    );\n};\n\nexport default ImageButton;\n"]}