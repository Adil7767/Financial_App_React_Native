{"version":3,"sources":["CalendarEvent.tsx"],"names":["getEventCellPositionStyle","start","end","relativeHeight","DAY_MINUTES","diff","relativeTop","height","top","_CalendarEvent","event","onPressEvent","eventCellStyle","showTime","eventCount","eventOrder","overlapOffset","OVERLAP_OFFSET","renderEvent","ampm","theme","palettes","React","useMemo","palette","primary","eventCellOverlappings","touchableOpacityProps","injectedStyles","u","textColor","fgColors","map","p","contrastText","length","CalendarEvent"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,yBAAyB,GAAG,CAACC,KAAD,EAAcC,GAAd,KAA4B;AAC1D,QAAMC,cAAc,GAAG,OAAO,IAAIC,kBAAX,IAA0B,oBAAMF,GAAN,EAAWG,IAAX,CAAgBJ,KAAhB,EAAuB,QAAvB,CAAjD;AACA,QAAMK,WAAW,GAAG,gCAAoB,oBAAML,KAAN,CAApB,CAApB;AACA,SAAO;AACHM,IAAAA,MAAM,YAAKJ,cAAL,MADH;AAEHK,IAAAA,GAAG,YAAKF,WAAL;AAFA,GAAP;AAIH,CAPD;;AAqBA,SAASG,cAAT,CAA2B;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA,YAFuB;AAGvBC,EAAAA,cAHuB;AAIvBC,EAAAA,QAJuB;AAKvBC,EAAAA,UAAU,GAAG,CALU;AAMvBC,EAAAA,UAAU,GAAG,CANU;AAOvBC,EAAAA,aAAa,GAAGC,4BAPO;AAQvBC,EAAAA,WARuB;AASvBC,EAAAA;AATuB,CAA3B,EAU0B;AACtB,QAAMC,KAAK,GAAG,6BAAd;AAEA,QAAMC,QAAQ,GAAGC,KAAK,CAACC,OAAN,CACb,MAAM,CAACH,KAAK,CAACI,OAAN,CAAcC,OAAf,EAAwB,GAAGL,KAAK,CAACM,qBAAjC,CADO,EAEb,CAACN,KAAD,CAFa,CAAjB;AAKA,QAAMO,qBAAqB,GAAG,wEAAiC;AAC3DjB,IAAAA,KAD2D;AAE3DE,IAAAA,cAF2D;AAG3DD,IAAAA,YAH2D;AAI3DiB,IAAAA,cAAc,EAAE,CACZ5B,yBAAyB,CAACU,KAAK,CAACT,KAAP,EAAcS,KAAK,CAACR,GAApB,CADb,EAEZ,wCAA4Ba,UAA5B,EAAwCC,aAAxC,EAAuDK,QAAvD,CAFY,EAGZQ,gBAAE,UAAF,CAHY,EAIZA,gBAAE,MAAF,CAJY,EAKZA,gBAAE,MAAF,CALY;AAJ2C,GAAjC,CAA9B;AAaA,QAAMC,SAAS,GAAGR,KAAK,CAACC,OAAN,CAAc,MAAM;AAClC,UAAMQ,QAAQ,GAAGV,QAAQ,CAACW,GAAT,CAAcC,CAAD,IAAOA,CAAC,CAACC,YAAtB,CAAjB;AACA,WAAOH,QAAQ,CAACjB,UAAU,GAAGiB,QAAQ,CAACI,MAAvB,CAAR,IAA0CJ,QAAQ,CAAC,CAAD,CAAzD;AACH,GAHiB,EAGf,CAACjB,UAAD,EAAaO,QAAb,CAHe,CAAlB;;AAKA,MAAIH,WAAJ,EAAiB;AACb,WAAOA,WAAW,CAACR,KAAD,EAAQiB,qBAAR,CAAlB;AACH;;AAED,sBACI,oBAAC,0DAAD;AACI,IAAA,KAAK,EAAEjB,KADX;AAEI,IAAA,QAAQ,EAAEG,QAFd;AAGI,IAAA,IAAI,EAAEM,IAHV;AAII,IAAA,qBAAqB,EAAEQ,qBAJ3B;AAKI,IAAA,SAAS,EAAEG;AALf,IADJ;AASH;;AAEM,MAAMM,aAAa,GAAG,sBAAU3B,cAAV,CAAtB","sourcesContent":["import dayjs from \"dayjs\";\nimport * as React from \"react\";\n\nimport { OVERLAP_OFFSET, u } from \"./styles/commonStyles\";\nimport { useCalendarTouchableOpacityProps } from \"./hooks/useCalendarTouchableOpacityProps\";\nimport { EventCellStyle, EventRenderer, ICalendarEvent } from \"./interfaces\";\nimport { useTheme } from \"./theme/ThemeContext\";\nimport { DAY_MINUTES, getRelativeTopInDay, getStyleForOverlappingEvent, typedMemo } from \"./utils\";\nimport { DefaultCalendarEventRenderer } from \"./DefaultCalendarEventRenderer\";\n\nconst getEventCellPositionStyle = (start: Date, end: Date) => {\n    const relativeHeight = 100 * (1 / DAY_MINUTES) * dayjs(end).diff(start, \"minute\");\n    const relativeTop = getRelativeTopInDay(dayjs(start));\n    return {\n        height: `${relativeHeight}%`,\n        top: `${relativeTop}%`,\n    };\n};\n\ninterface CalendarEventProps<T> {\n    event: ICalendarEvent<T>\n    onPressEvent?: (event: ICalendarEvent<T>) => void\n    eventCellStyle?: EventCellStyle<T>\n    showTime: boolean\n    eventCount?: number\n    eventOrder?: number\n    overlapOffset?: number\n    renderEvent?: EventRenderer<T>\n    ampm: boolean\n}\n\nfunction _CalendarEvent<T>({\n    event,\n    onPressEvent,\n    eventCellStyle,\n    showTime,\n    eventCount = 1,\n    eventOrder = 0,\n    overlapOffset = OVERLAP_OFFSET,\n    renderEvent,\n    ampm,\n}: CalendarEventProps<T>) {\n    const theme = useTheme();\n\n    const palettes = React.useMemo(\n        () => [theme.palette.primary, ...theme.eventCellOverlappings],\n        [theme],\n    );\n\n    const touchableOpacityProps = useCalendarTouchableOpacityProps({\n        event,\n        eventCellStyle,\n        onPressEvent,\n        injectedStyles: [\n            getEventCellPositionStyle(event.start, event.end),\n            getStyleForOverlappingEvent(eventOrder, overlapOffset, palettes),\n            u[\"absolute\"],\n            u[\"mt-2\"],\n            u[\"mx-3\"],\n        ],\n    });\n\n    const textColor = React.useMemo(() => {\n        const fgColors = palettes.map((p) => p.contrastText);\n        return fgColors[eventCount % fgColors.length] || fgColors[0];\n    }, [eventCount, palettes]);\n\n    if (renderEvent) {\n        return renderEvent(event, touchableOpacityProps);\n    }\n\n    return (\n        <DefaultCalendarEventRenderer\n            event={event}\n            showTime={showTime}\n            ampm={ampm}\n            touchableOpacityProps={touchableOpacityProps}\n            textColor={textColor}\n        />\n    );\n}\n\nexport const CalendarEvent = typedMemo(_CalendarEvent);\n"]}