{"version":3,"sources":["CalendarHeader.tsx"],"names":["_CalendarHeader","dateRange","cellHeight","style","allDayEvents","onPressDateHeader","_onPress","React","useCallback","date","theme","borderColor","palette","gray","primaryBg","backgroundColor","primary","main","u","isRTL","map","_isToday","toDate","undefined","toString","height","typography","xs","color","format","contrastText","xl","Platform","OS","event","isBetween","start","end","eventCellCss","title","fontSize","sm","CalendarHeader"],"mappings":"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","sourcesContent":["import dayjs from \"dayjs\";\nimport * as React from \"react\";\nimport { Platform, Text, TouchableOpacity, View, ViewStyle } from \"react-native\";\n\nimport { eventCellCss, u } from \"./styles/commonStyles\";\nimport { ICalendarEvent } from \"./interfaces\";\nimport { useTheme } from \"./theme/ThemeContext\";\nimport { isToday, typedMemo } from \"./utils\";\n\nexport interface CalendarHeaderProps<T> {\n    dateRange: dayjs.Dayjs[]\n    cellHeight: number\n    style: ViewStyle\n    allDayEvents: ICalendarEvent<T>[]\n    onPressDateHeader?: (date: Date) => void\n}\n\nfunction _CalendarHeader<T>({\n    dateRange,\n    cellHeight,\n    style,\n    allDayEvents,\n    onPressDateHeader,\n}: CalendarHeaderProps<T>) {\n    const _onPress = React.useCallback(\n        (date: Date) => {\n            onPressDateHeader && onPressDateHeader(date);\n        },\n        [onPressDateHeader],\n    );\n\n    const theme = useTheme();\n\n    const borderColor = { borderColor: theme.palette.gray[\"200\"] };\n    const primaryBg = { backgroundColor: theme.palette.primary.main };\n\n    return (\n        <View\n            style={[\n                u[\"border-b-2\"],\n                borderColor,\n                theme.isRTL ? u[\"flex-row-reverse\"] : u[\"flex-row\"],\n                style,\n            ]}\n        >\n            <View style={[u[\"z-10\"], u[\"w-50\"], borderColor]} />\n            {dateRange.map((date) => {\n                const _isToday = isToday(date);\n                return (\n                    <TouchableOpacity\n                        style={[u[\"flex-1\"], u[\"pt-2\"]]}\n                        onPress={() => _onPress(date.toDate())}\n                        disabled={onPressDateHeader === undefined}\n                        key={date.toString()}\n                    >\n                        <View style={[u[\"justify-between\"], { height: cellHeight }]}>\n                            <Text\n                                style={[\n                                    theme.typography.xs,\n                                    u[\"text-center\"],\n                                    { color: _isToday ? theme.palette.primary.main : theme.palette.gray[\"500\"] },\n                                ]}\n                            >\n                                {date.format(\"ddd\")}\n                            </Text>\n                            <View\n                                style={\n                                    _isToday\n                                        ? [\n                                            primaryBg,\n                                            u[\"h-36\"],\n                                            u[\"w-36\"],\n                                            u[\"pb-6\"],\n                                            u[\"rounded-full\"],\n                                            u[\"items-center\"],\n                                            u[\"justify-center\"],\n                                            u[\"self-center\"],\n                                            u[\"z-20\"],\n                                        ]\n                                        : [u[\"mb-6\"]]\n                                }\n                            >\n                                <Text\n                                    style={[\n                                        {\n                                            color: _isToday\n                                                ? theme.palette.primary.contrastText\n                                                : theme.palette.gray[\"800\"],\n                                        },\n                                        theme.typography.xl,\n                                        u[\"text-center\"],\n                                        Platform.OS === \"web\" && _isToday && u[\"mt-6\"],\n                                    ]}\n                                >\n                                    {date.format(\"D\")}\n                                </Text>\n                            </View>\n                        </View>\n                        <View\n                            style={[\n                                u[\"border-l\"],\n                                { borderColor: theme.palette.gray[\"200\"] },\n                                { height: cellHeight },\n                            ]}\n                        >\n                            {allDayEvents.map((event) => {\n                                if (!dayjs(date).isBetween(event.start, event.end, \"day\", \"[]\")) {\n                                    return null;\n                                }\n                                return (\n                                    <View\n                                        style={[eventCellCss.style, primaryBg, u[\"mt-2\"]]}\n                                        key={`${event.start}${event.title}`}\n                                    >\n                                        <Text\n                                            style={{\n                                                fontSize: theme.typography.sm.fontSize,\n                                                color: theme.palette.primary.contrastText,\n                                            }}\n                                        >\n                                            {event.title}\n                                        </Text>\n                                    </View>\n                                );\n                            })}\n                        </View>\n                    </TouchableOpacity>\n                );\n            })}\n        </View>\n    );\n}\n\nexport const CalendarHeader = typedMemo(_CalendarHeader);\n"]}