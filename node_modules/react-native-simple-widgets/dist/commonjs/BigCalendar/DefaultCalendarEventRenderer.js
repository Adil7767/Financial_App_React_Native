"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultCalendarEventRenderer = DefaultCalendarEventRenderer;

var _dayjs = _interopRequireDefault(require("dayjs"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _ThemeContext = require("./theme/ThemeContext");

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function DefaultCalendarEventRenderer({
  touchableOpacityProps,
  event,
  showTime = true,
  textColor,
  ampm
}) {
  const theme = (0, _ThemeContext.useTheme)();
  const eventTimeStyle = {
    fontSize: theme.typography.xs.fontSize,
    color: textColor
  };
  const eventTitleStyle = {
    fontSize: theme.typography.sm.fontSize,
    color: textColor
  };
  return /*#__PURE__*/React.createElement(_reactNative.TouchableOpacity, touchableOpacityProps, (0, _dayjs.default)(event.end).diff(event.start, "minute") < 32 && showTime ? /*#__PURE__*/React.createElement(_reactNative.Text, {
    style: eventTitleStyle
  }, event.title, ",", /*#__PURE__*/React.createElement(_reactNative.Text, {
    style: eventTimeStyle
  }, (0, _dayjs.default)(event.start).format(ampm ? "hh:mm a" : "HH:mm"))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_reactNative.Text, {
    style: eventTitleStyle
  }, event.title), showTime && /*#__PURE__*/React.createElement(_reactNative.Text, {
    style: eventTimeStyle
  }, (0, _utils.formatStartEnd)(event.start, event.end, ampm ? "h:mm a" : "HH:mm")), event.children && event.children));
}
//# sourceMappingURL=DefaultCalendarEventRenderer.js.map