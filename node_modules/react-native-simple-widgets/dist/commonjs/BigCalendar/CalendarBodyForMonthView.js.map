{"version":3,"sources":["CalendarBodyForMonthView.tsx"],"names":["_CalendarBodyForMonthView","containerHeight","targetDate","style","onPressCell","events","onPressEvent","eventCellStyle","onSwipeHorizontal","hideNowIndicator","renderEvent","maxVisibleEventCount","weekStartsOn","now","calendarWidth","setCalendarWidth","React","useState","panResponder","weeks","toDate","minCellHeight","theme","height","u","borderColor","palette","gray","nativeEvent","layout","width","panHandlers","map","week","i","isRTL","Platform","OS","minHeight","d","date","ii","textAlign","typography","sm","color","format","primary","main","sort","a","b","start","isSame","aDuration","dayjs","duration","end","diff","days","bDuration","getTime","filter","isBetween","startOf","endOf","reduce","elements","event","index","fontSize","marginTop","fontWeight","length","CalendarBodyForMonthView"],"mappings":"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","sourcesContent":["import calendarize from \"calendarize\";\nimport dayjs from \"dayjs\";\nimport * as React from \"react\";\nimport { Platform, Text, TouchableOpacity, View, ViewStyle } from \"react-native\";\n\nimport { u } from \"./styles/commonStyles\";\nimport { useNow } from \"./hooks/useNow\";\nimport { usePanResponder } from \"./hooks/usePanResponder\";\nimport {\n    EventCellStyle,\n    EventRenderer,\n    HorizontalDirection,\n    ICalendarEvent,\n    WeekNum,\n} from \"./interfaces\";\nimport { useTheme } from \"./theme/ThemeContext\";\nimport { typedMemo } from \"./utils\";\nimport { CalendarEventForMonthView } from \"./CalendarEventForMonthView\";\n\ninterface CalendarBodyForMonthViewProps<T> {\n    containerHeight: number\n    targetDate: dayjs.Dayjs\n    events: ICalendarEvent<T>[]\n    style: ViewStyle\n    eventCellStyle?: EventCellStyle<T>\n    hideNowIndicator?: boolean\n    onPressCell?: (date: Date) => void\n    onPressEvent?: (event: ICalendarEvent<T>) => void\n    onSwipeHorizontal?: (d: HorizontalDirection) => void\n    renderEvent?: EventRenderer<T>\n    maxVisibleEventCount: number\n    weekStartsOn: WeekNum\n}\n\nfunction _CalendarBodyForMonthView<T>({\n    containerHeight,\n    targetDate,\n    style,\n    onPressCell,\n    events,\n    onPressEvent,\n    eventCellStyle,\n    onSwipeHorizontal,\n    hideNowIndicator,\n    renderEvent,\n    maxVisibleEventCount,\n    weekStartsOn,\n}: CalendarBodyForMonthViewProps<T>) {\n    const { now } = useNow(!hideNowIndicator);\n    const [calendarWidth, setCalendarWidth] = React.useState<number>(0);\n\n    const panResponder = usePanResponder({\n        onSwipeHorizontal,\n    });\n\n    const weeks = calendarize(targetDate.toDate(), weekStartsOn);\n\n    const minCellHeight = containerHeight / 5 - 30;\n    const theme = useTheme();\n\n    return (\n        <View\n            style={[\n                {\n                    height: containerHeight,\n                },\n                u[\"flex-column\"],\n                u[\"flex-1\"],\n                u[\"border-b\"],\n                u[\"border-l\"],\n                u[\"border-r\"],\n                u[\"rounded\"],\n                { borderColor: theme.palette.gray[\"200\"] },\n                style,\n            ]}\n            onLayout={({ nativeEvent: { layout } }) => setCalendarWidth(layout.width)}\n            {...panResponder.panHandlers}\n        >\n            {weeks.map((week, i) => (\n                <View\n                    key={i}\n                    style={[\n                        u[\"flex-1\"],\n                        theme.isRTL ? u[\"flex-row-reverse\"] : u[\"flex-row\"],\n                        Platform.OS === \"android\" && style, // TODO: in Android, backgroundColor is not applied to child components\n                        {\n                            minHeight: minCellHeight,\n                        },\n                    ]}\n                >\n                    {week\n                        .map((d) => (d > 0 ? targetDate.date(d) : null))\n                        .map((date, ii) => (\n                            <TouchableOpacity\n                                onPress={() => date && onPressCell && onPressCell(date.toDate())}\n                                style={[\n                                    i > 0 && u[\"border-t\"],\n                                    theme.isRTL && ii > 0 && u[\"border-r\"],\n                                    !theme.isRTL && ii > 0 && u[\"border-l\"],\n                                    { borderColor: theme.palette.gray[\"200\"] },\n                                    u[\"p-2\"],\n                                    u[\"flex-1\"],\n                                    u[\"flex-column\"],\n                                    {\n                                        minHeight: minCellHeight,\n                                    },\n                                ]}\n                                key={ii}\n                            >\n                                <Text\n                                    style={[\n                                        { textAlign: \"center\" },\n                                        theme.typography.sm,\n                                        {\n                                            color:\n                                                date?.format(\"YYYY-MM-DD\") === now.format(\"YYYY-MM-DD\")\n                                                    ? theme.palette.primary.main\n                                                    : theme.palette.gray[\"800\"],\n                                        },\n                                    ]}\n                                >\n                                    {date && date.format(\"D\")}\n                                </Text>\n                                {date &&\n                                    events\n                                        .sort((a, b) => {\n                                            if (dayjs(a.start).isSame(b.start, \"day\")) {\n                                                const aDuration = dayjs.duration(dayjs(a.end).diff(dayjs(a.start))).days();\n                                                const bDuration = dayjs.duration(dayjs(b.end).diff(dayjs(b.start))).days();\n                                                return bDuration - aDuration;\n                                            }\n                                            return a.start.getTime() - b.start.getTime();\n                                        })\n                                        .filter(({ start, end }) =>\n                                            date.isBetween(\n                                                dayjs(start).startOf(\"day\"),\n                                                dayjs(end).endOf(\"day\"),\n                                                null,\n                                                \"[)\",\n                                            ),\n                                        )\n                                        .reduce(\n                                            (elements, event, index, events) => [\n                                                ...elements,\n                                                index > maxVisibleEventCount ? null : index === maxVisibleEventCount ? (\n                                                    <Text\n                                                        key={index}\n                                                        style={{ fontSize: 11, marginTop: 2, fontWeight: \"bold\" }}\n                                                    >\n                                                        {events.length - maxVisibleEventCount} More\n                                                    </Text>\n                                                ) : (\n                                                    <CalendarEventForMonthView\n                                                        key={index}\n                                                        event={event}\n                                                        eventCellStyle={eventCellStyle}\n                                                        onPressEvent={onPressEvent}\n                                                        renderEvent={renderEvent}\n                                                        date={date}\n                                                        dayOfTheWeek={ii}\n                                                        calendarWidth={calendarWidth}\n                                                        isRTL={theme.isRTL}\n                                                    />\n                                                ),\n                                            ],\n                                            [] as (null | JSX.Element)[],\n                                        )}\n                            </TouchableOpacity>\n                        ))}\n                </View>\n            ))}\n        </View>\n    );\n}\n\nexport const CalendarBodyForMonthView = typedMemo(_CalendarBodyForMonthView);\n"]}