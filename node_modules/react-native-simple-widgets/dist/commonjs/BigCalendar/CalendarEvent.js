"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarEvent = void 0;

var _dayjs = _interopRequireDefault(require("dayjs"));

var React = _interopRequireWildcard(require("react"));

var _commonStyles = require("./styles/commonStyles");

var _useCalendarTouchableOpacityProps = require("./hooks/useCalendarTouchableOpacityProps");

var _ThemeContext = require("./theme/ThemeContext");

var _utils = require("./utils");

var _DefaultCalendarEventRenderer = require("./DefaultCalendarEventRenderer");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getEventCellPositionStyle = (start, end) => {
  const relativeHeight = 100 * (1 / _utils.DAY_MINUTES) * (0, _dayjs.default)(end).diff(start, "minute");
  const relativeTop = (0, _utils.getRelativeTopInDay)((0, _dayjs.default)(start));
  return {
    height: "".concat(relativeHeight, "%"),
    top: "".concat(relativeTop, "%")
  };
};

function _CalendarEvent({
  event,
  onPressEvent,
  eventCellStyle,
  showTime,
  eventCount = 1,
  eventOrder = 0,
  overlapOffset = _commonStyles.OVERLAP_OFFSET,
  renderEvent,
  ampm
}) {
  const theme = (0, _ThemeContext.useTheme)();
  const palettes = React.useMemo(() => [theme.palette.primary, ...theme.eventCellOverlappings], [theme]);
  const touchableOpacityProps = (0, _useCalendarTouchableOpacityProps.useCalendarTouchableOpacityProps)({
    event,
    eventCellStyle,
    onPressEvent,
    injectedStyles: [getEventCellPositionStyle(event.start, event.end), (0, _utils.getStyleForOverlappingEvent)(eventOrder, overlapOffset, palettes), _commonStyles.u["absolute"], _commonStyles.u["mt-2"], _commonStyles.u["mx-3"]]
  });
  const textColor = React.useMemo(() => {
    const fgColors = palettes.map(p => p.contrastText);
    return fgColors[eventCount % fgColors.length] || fgColors[0];
  }, [eventCount, palettes]);

  if (renderEvent) {
    return renderEvent(event, touchableOpacityProps);
  }

  return /*#__PURE__*/React.createElement(_DefaultCalendarEventRenderer.DefaultCalendarEventRenderer, {
    event: event,
    showTime: showTime,
    ampm: ampm,
    touchableOpacityProps: touchableOpacityProps,
    textColor: textColor
  });
}

const CalendarEvent = (0, _utils.typedMemo)(_CalendarEvent);
exports.CalendarEvent = CalendarEvent;
//# sourceMappingURL=CalendarEvent.js.map