"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarHeader = void 0;

var _dayjs = _interopRequireDefault(require("dayjs"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _commonStyles = require("./styles/commonStyles");

var _ThemeContext = require("./theme/ThemeContext");

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _CalendarHeader({
  dateRange,
  cellHeight,
  style,
  allDayEvents,
  onPressDateHeader
}) {
  const _onPress = React.useCallback(date => {
    onPressDateHeader && onPressDateHeader(date);
  }, [onPressDateHeader]);

  const theme = (0, _ThemeContext.useTheme)();
  const borderColor = {
    borderColor: theme.palette.gray["200"]
  };
  const primaryBg = {
    backgroundColor: theme.palette.primary.main
  };
  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [_commonStyles.u["border-b-2"], borderColor, theme.isRTL ? _commonStyles.u["flex-row-reverse"] : _commonStyles.u["flex-row"], style]
  }, /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [_commonStyles.u["z-10"], _commonStyles.u["w-50"], borderColor]
  }), dateRange.map(date => {
    const _isToday = (0, _utils.isToday)(date);

    return /*#__PURE__*/React.createElement(_reactNative.TouchableOpacity, {
      style: [_commonStyles.u["flex-1"], _commonStyles.u["pt-2"]],
      onPress: () => _onPress(date.toDate()),
      disabled: onPressDateHeader === undefined,
      key: date.toString()
    }, /*#__PURE__*/React.createElement(_reactNative.View, {
      style: [_commonStyles.u["justify-between"], {
        height: cellHeight
      }]
    }, /*#__PURE__*/React.createElement(_reactNative.Text, {
      style: [theme.typography.xs, _commonStyles.u["text-center"], {
        color: _isToday ? theme.palette.primary.main : theme.palette.gray["500"]
      }]
    }, date.format("ddd")), /*#__PURE__*/React.createElement(_reactNative.View, {
      style: _isToday ? [primaryBg, _commonStyles.u["h-36"], _commonStyles.u["w-36"], _commonStyles.u["pb-6"], _commonStyles.u["rounded-full"], _commonStyles.u["items-center"], _commonStyles.u["justify-center"], _commonStyles.u["self-center"], _commonStyles.u["z-20"]] : [_commonStyles.u["mb-6"]]
    }, /*#__PURE__*/React.createElement(_reactNative.Text, {
      style: [{
        color: _isToday ? theme.palette.primary.contrastText : theme.palette.gray["800"]
      }, theme.typography.xl, _commonStyles.u["text-center"], _reactNative.Platform.OS === "web" && _isToday && _commonStyles.u["mt-6"]]
    }, date.format("D")))), /*#__PURE__*/React.createElement(_reactNative.View, {
      style: [_commonStyles.u["border-l"], {
        borderColor: theme.palette.gray["200"]
      }, {
        height: cellHeight
      }]
    }, allDayEvents.map(event => {
      if (!(0, _dayjs.default)(date).isBetween(event.start, event.end, "day", "[]")) {
        return null;
      }

      return /*#__PURE__*/React.createElement(_reactNative.View, {
        style: [_commonStyles.eventCellCss.style, primaryBg, _commonStyles.u["mt-2"]],
        key: "".concat(event.start).concat(event.title)
      }, /*#__PURE__*/React.createElement(_reactNative.Text, {
        style: {
          fontSize: theme.typography.sm.fontSize,
          color: theme.palette.primary.contrastText
        }
      }, event.title));
    })));
  }));
}

const CalendarHeader = (0, _utils.typedMemo)(_CalendarHeader);
exports.CalendarHeader = CalendarHeader;
//# sourceMappingURL=CalendarHeader.js.map