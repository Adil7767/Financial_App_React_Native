{"version":3,"sources":["CalendarBody.tsx"],"names":["styles","StyleSheet","create","nowIndicator","position","zIndex","height","width","_CalendarBody","containerHeight","cellHeight","dateRange","style","onPressCell","events","onPressEvent","eventCellStyle","ampm","showTime","scrollOffsetMinutes","onSwipeHorizontal","hideNowIndicator","overlapOffset","renderEvent","scrollView","React","useRef","now","useEffect","current","Platform","OS","setTimeout","scrollTo","y","animated","panResponder","_onPressCell","useCallback","date","toDate","_renderMappedEvent","event","start","title","end","theme","panHandlers","x","u","isRTL","hours","map","hour","toString","filter","isBetween","startOf","endOf","isBefore","isAfter","backgroundColor","palette","top","CalendarBody"],"mappings":"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","sourcesContent":["import dayjs from \"dayjs\";\nimport * as React from \"react\";\nimport { Platform, ScrollView, StyleSheet, View, ViewStyle } from \"react-native\";\n\nimport { u } from \"./styles/commonStyles\";\nimport { useNow } from \"./hooks/useNow\";\nimport { usePanResponder } from \"./hooks/usePanResponder\";\nimport { EventCellStyle, EventRenderer, HorizontalDirection, ICalendarEvent } from \"./interfaces\";\nimport { useTheme } from \"./theme/ThemeContext\";\nimport {\n    getCountOfEventsAtEvent,\n    getOrderOfEvent,\n    getRelativeTopInDay,\n    hours,\n    isToday,\n    typedMemo,\n} from \"./utils\";\nimport { CalendarEvent } from \"./CalendarEvent\";\nimport { HourGuideCell } from \"./HourGuideCell\";\nimport { HourGuideColumn } from \"./HourGuideColumn\";\n\nconst styles = StyleSheet.create({\n    nowIndicator: {\n        position: \"absolute\",\n        zIndex: 10000,\n        height: 2,\n        width: \"100%\",\n    },\n});\n\ninterface CalendarBodyProps<T> {\n    cellHeight: number\n    containerHeight: number\n    dateRange: dayjs.Dayjs[]\n    events: ICalendarEvent<T>[]\n    scrollOffsetMinutes: number\n    ampm: boolean\n    showTime: boolean\n    style: ViewStyle\n    eventCellStyle?: EventCellStyle<T>\n    hideNowIndicator?: boolean\n    overlapOffset?: number\n    onPressCell?: (date: Date) => void\n    onPressEvent?: (event: ICalendarEvent<T>) => void\n    onSwipeHorizontal?: (d: HorizontalDirection) => void\n    renderEvent?: EventRenderer<T>\n}\n\nfunction _CalendarBody<T>({\n    containerHeight,\n    cellHeight,\n    dateRange,\n    style,\n    onPressCell,\n    events,\n    onPressEvent,\n    eventCellStyle,\n    ampm,\n    showTime,\n    scrollOffsetMinutes,\n    onSwipeHorizontal,\n    hideNowIndicator,\n    overlapOffset,\n    renderEvent,\n}: CalendarBodyProps<T>) {\n    const scrollView = React.useRef<ScrollView>(null);\n    const { now } = useNow(!hideNowIndicator);\n\n    React.useEffect(() => {\n        if (scrollView.current && scrollOffsetMinutes && Platform.OS !== \"ios\") {\n            // We add delay here to work correct on React Native\n            // see: https://stackoverflow.com/questions/33208477/react-native-android-scrollview-scrollto-not-working\n            setTimeout(\n                () => {\n                    if (scrollView && scrollView.current) {\n                        scrollView.current.scrollTo({\n                            y: (cellHeight * scrollOffsetMinutes) / 60,\n                            animated: false,\n                        });\n                    }\n                },\n                Platform.OS === \"web\" ? 0 : 10,\n            );\n        }\n    }, [scrollView, scrollOffsetMinutes, cellHeight]);\n\n    const panResponder = usePanResponder({\n        onSwipeHorizontal,\n    });\n\n    const _onPressCell = React.useCallback(\n        (date: dayjs.Dayjs) => {\n            onPressCell && onPressCell(date.toDate());\n        },\n        [onPressCell],\n    );\n\n    const _renderMappedEvent = (event: ICalendarEvent<T>) => (\n        <CalendarEvent\n            key={`${event.start}${event.title}${event.end}`}\n            event={event}\n            onPressEvent={onPressEvent}\n            eventCellStyle={eventCellStyle}\n            showTime={showTime}\n            eventCount={getCountOfEventsAtEvent(event, events)}\n            eventOrder={getOrderOfEvent(event, events)}\n            overlapOffset={overlapOffset}\n            renderEvent={renderEvent}\n            ampm={ampm}\n        />\n    );\n\n    const theme = useTheme();\n\n    return (\n        <ScrollView\n            style={[\n                {\n                    height: containerHeight - cellHeight * 3,\n                },\n                style,\n            ]}\n            ref={scrollView}\n            scrollEventThrottle={32}\n            {...(Platform.OS !== \"web\" ? panResponder.panHandlers : {})}\n            showsVerticalScrollIndicator={false}\n            nestedScrollEnabled\n            contentOffset={Platform.OS === \"ios\" ? { x: 0, y: scrollOffsetMinutes } : { x: 0, y: 0 }}\n        >\n            <View\n                style={[u[\"flex-1\"], theme.isRTL ? u[\"flex-row-reverse\"] : u[\"flex-row\"]]}\n                {...(Platform.OS === \"web\" ? panResponder.panHandlers : {})}\n            >\n                <View style={[u[\"z-20\"], u[\"w-50\"]]}>\n                    {hours.map((hour) => (\n                        <HourGuideColumn key={hour} cellHeight={cellHeight} hour={hour} ampm={ampm} />\n                    ))}\n                </View>\n                {dateRange.map((date) => (\n                    <View style={[u[\"flex-1\"], u[\"overflow-hidden\"]]} key={date.toString()}>\n                        {hours.map((hour) => (\n                            <HourGuideCell\n                                key={hour}\n                                cellHeight={cellHeight}\n                                date={date}\n                                hour={hour}\n                                onPress={_onPressCell}\n                            />\n                        ))}\n\n                        {/* Render events of this date */}\n                        {/* M  T  (W)  T  F  S  S */}\n                        {/*       S-E             */}\n                        {events\n                            .filter(({ start }) =>\n                                dayjs(start).isBetween(date.startOf(\"day\"), date.endOf(\"day\"), null, \"[)\"),\n                            )\n                            .map(_renderMappedEvent)}\n\n                        {/* Render events which starts before this date and ends on this date */}\n                        {/* M  T  (W)  T  F  S  S */}\n                        {/* S------E              */}\n                        {events\n                            .filter(\n                                ({ start, end }) =>\n                                    dayjs(start).isBefore(date.startOf(\"day\")) &&\n                                    dayjs(end).isBetween(date.startOf(\"day\"), date.endOf(\"day\"), null, \"[)\"),\n                            )\n                            .map((event) => ({\n                                ...event,\n                                start: dayjs(event.end).startOf(\"day\"),\n                            }))\n                            .map(_renderMappedEvent)}\n\n                        {/* Render events which starts before this date and ends after this date */}\n                        {/* M  T  (W)  T  F  S  S */}\n                        {/*    S-------E          */}\n                        {events\n                            .filter(\n                                ({ start, end }) =>\n                                    dayjs(start).isBefore(date.startOf(\"day\")) &&\n                                    dayjs(end).isAfter(date.endOf(\"day\")),\n                            )\n                            .map((event) => ({\n                                ...event,\n                                start: dayjs(event.end).startOf(\"day\"),\n                                end: dayjs(event.end).endOf(\"day\"),\n                            }))\n                            .map(_renderMappedEvent)}\n\n                        {isToday(date) && !hideNowIndicator && (\n                            <View\n                                style={[\n                                    styles.nowIndicator,\n                                    { backgroundColor: theme.palette.nowIndicator },\n                                    { top: `${getRelativeTopInDay(now)}%` },\n                                ]}\n                            />\n                        )}\n                    </View>\n                ))}\n            </View>\n        </ScrollView>\n    );\n}\n\nexport const CalendarBody = typedMemo(_CalendarBody);\n"]}