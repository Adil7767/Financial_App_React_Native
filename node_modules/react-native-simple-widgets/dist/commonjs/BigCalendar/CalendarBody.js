"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarBody = void 0;

var _dayjs = _interopRequireDefault(require("dayjs"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _commonStyles = require("./styles/commonStyles");

var _useNow = require("./hooks/useNow");

var _usePanResponder = require("./hooks/usePanResponder");

var _ThemeContext = require("./theme/ThemeContext");

var _utils = require("./utils");

var _CalendarEvent = require("./CalendarEvent");

var _HourGuideCell = require("./HourGuideCell");

var _HourGuideColumn = require("./HourGuideColumn");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const styles = _reactNative.StyleSheet.create({
  nowIndicator: {
    position: "absolute",
    zIndex: 10000,
    height: 2,
    width: "100%"
  }
});

function _CalendarBody({
  containerHeight,
  cellHeight,
  dateRange,
  style,
  onPressCell,
  events,
  onPressEvent,
  eventCellStyle,
  ampm,
  showTime,
  scrollOffsetMinutes,
  onSwipeHorizontal,
  hideNowIndicator,
  overlapOffset,
  renderEvent
}) {
  const scrollView = React.useRef(null);
  const {
    now
  } = (0, _useNow.useNow)(!hideNowIndicator);
  React.useEffect(() => {
    if (scrollView.current && scrollOffsetMinutes && _reactNative.Platform.OS !== "ios") {
      // We add delay here to work correct on React Native
      // see: https://stackoverflow.com/questions/33208477/react-native-android-scrollview-scrollto-not-working
      setTimeout(() => {
        if (scrollView && scrollView.current) {
          scrollView.current.scrollTo({
            y: cellHeight * scrollOffsetMinutes / 60,
            animated: false
          });
        }
      }, _reactNative.Platform.OS === "web" ? 0 : 10);
    }
  }, [scrollView, scrollOffsetMinutes, cellHeight]);
  const panResponder = (0, _usePanResponder.usePanResponder)({
    onSwipeHorizontal
  });

  const _onPressCell = React.useCallback(date => {
    onPressCell && onPressCell(date.toDate());
  }, [onPressCell]);

  const _renderMappedEvent = event => /*#__PURE__*/React.createElement(_CalendarEvent.CalendarEvent, {
    key: "".concat(event.start).concat(event.title).concat(event.end),
    event: event,
    onPressEvent: onPressEvent,
    eventCellStyle: eventCellStyle,
    showTime: showTime,
    eventCount: (0, _utils.getCountOfEventsAtEvent)(event, events),
    eventOrder: (0, _utils.getOrderOfEvent)(event, events),
    overlapOffset: overlapOffset,
    renderEvent: renderEvent,
    ampm: ampm
  });

  const theme = (0, _ThemeContext.useTheme)();
  return /*#__PURE__*/React.createElement(_reactNative.ScrollView, _extends({
    style: [{
      height: containerHeight - cellHeight * 3
    }, style],
    ref: scrollView,
    scrollEventThrottle: 32
  }, _reactNative.Platform.OS !== "web" ? panResponder.panHandlers : {}, {
    showsVerticalScrollIndicator: false,
    nestedScrollEnabled: true,
    contentOffset: _reactNative.Platform.OS === "ios" ? {
      x: 0,
      y: scrollOffsetMinutes
    } : {
      x: 0,
      y: 0
    }
  }), /*#__PURE__*/React.createElement(_reactNative.View, _extends({
    style: [_commonStyles.u["flex-1"], theme.isRTL ? _commonStyles.u["flex-row-reverse"] : _commonStyles.u["flex-row"]]
  }, _reactNative.Platform.OS === "web" ? panResponder.panHandlers : {}), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [_commonStyles.u["z-20"], _commonStyles.u["w-50"]]
  }, _utils.hours.map(hour => /*#__PURE__*/React.createElement(_HourGuideColumn.HourGuideColumn, {
    key: hour,
    cellHeight: cellHeight,
    hour: hour,
    ampm: ampm
  }))), dateRange.map(date => /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [_commonStyles.u["flex-1"], _commonStyles.u["overflow-hidden"]],
    key: date.toString()
  }, _utils.hours.map(hour => /*#__PURE__*/React.createElement(_HourGuideCell.HourGuideCell, {
    key: hour,
    cellHeight: cellHeight,
    date: date,
    hour: hour,
    onPress: _onPressCell
  })), events.filter(({
    start
  }) => (0, _dayjs.default)(start).isBetween(date.startOf("day"), date.endOf("day"), null, "[)")).map(_renderMappedEvent), events.filter(({
    start,
    end
  }) => (0, _dayjs.default)(start).isBefore(date.startOf("day")) && (0, _dayjs.default)(end).isBetween(date.startOf("day"), date.endOf("day"), null, "[)")).map(event => ({ ...event,
    start: (0, _dayjs.default)(event.end).startOf("day")
  })).map(_renderMappedEvent), events.filter(({
    start,
    end
  }) => (0, _dayjs.default)(start).isBefore(date.startOf("day")) && (0, _dayjs.default)(end).isAfter(date.endOf("day"))).map(event => ({ ...event,
    start: (0, _dayjs.default)(event.end).startOf("day"),
    end: (0, _dayjs.default)(event.end).endOf("day")
  })).map(_renderMappedEvent), (0, _utils.isToday)(date) && !hideNowIndicator && /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [styles.nowIndicator, {
      backgroundColor: theme.palette.nowIndicator
    }, {
      top: "".concat((0, _utils.getRelativeTopInDay)(now), "%")
    }]
  })))));
}

const CalendarBody = (0, _utils.typedMemo)(_CalendarBody);
exports.CalendarBody = CalendarBody;
//# sourceMappingURL=CalendarBody.js.map