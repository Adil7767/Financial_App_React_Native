"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarBodyForMonthView = void 0;

var _calendarize = _interopRequireDefault(require("calendarize"));

var _dayjs = _interopRequireDefault(require("dayjs"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _commonStyles = require("./styles/commonStyles");

var _useNow = require("./hooks/useNow");

var _usePanResponder = require("./hooks/usePanResponder");

var _ThemeContext = require("./theme/ThemeContext");

var _utils = require("./utils");

var _CalendarEventForMonthView = require("./CalendarEventForMonthView");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _CalendarBodyForMonthView({
  containerHeight,
  targetDate,
  style,
  onPressCell,
  events,
  onPressEvent,
  eventCellStyle,
  onSwipeHorizontal,
  hideNowIndicator,
  renderEvent,
  maxVisibleEventCount,
  weekStartsOn
}) {
  const {
    now
  } = (0, _useNow.useNow)(!hideNowIndicator);
  const [calendarWidth, setCalendarWidth] = React.useState(0);
  const panResponder = (0, _usePanResponder.usePanResponder)({
    onSwipeHorizontal
  });
  const weeks = (0, _calendarize.default)(targetDate.toDate(), weekStartsOn);
  const minCellHeight = containerHeight / 5 - 30;
  const theme = (0, _ThemeContext.useTheme)();
  return /*#__PURE__*/React.createElement(_reactNative.View, _extends({
    style: [{
      height: containerHeight
    }, _commonStyles.u["flex-column"], _commonStyles.u["flex-1"], _commonStyles.u["border-b"], _commonStyles.u["border-l"], _commonStyles.u["border-r"], _commonStyles.u["rounded"], {
      borderColor: theme.palette.gray["200"]
    }, style],
    onLayout: ({
      nativeEvent: {
        layout
      }
    }) => setCalendarWidth(layout.width)
  }, panResponder.panHandlers), weeks.map((week, i) => /*#__PURE__*/React.createElement(_reactNative.View, {
    key: i,
    style: [_commonStyles.u["flex-1"], theme.isRTL ? _commonStyles.u["flex-row-reverse"] : _commonStyles.u["flex-row"], _reactNative.Platform.OS === "android" && style, // TODO: in Android, backgroundColor is not applied to child components
    {
      minHeight: minCellHeight
    }]
  }, week.map(d => d > 0 ? targetDate.date(d) : null).map((date, ii) => /*#__PURE__*/React.createElement(_reactNative.TouchableOpacity, {
    onPress: () => date && onPressCell && onPressCell(date.toDate()),
    style: [i > 0 && _commonStyles.u["border-t"], theme.isRTL && ii > 0 && _commonStyles.u["border-r"], !theme.isRTL && ii > 0 && _commonStyles.u["border-l"], {
      borderColor: theme.palette.gray["200"]
    }, _commonStyles.u["p-2"], _commonStyles.u["flex-1"], _commonStyles.u["flex-column"], {
      minHeight: minCellHeight
    }],
    key: ii
  }, /*#__PURE__*/React.createElement(_reactNative.Text, {
    style: [{
      textAlign: "center"
    }, theme.typography.sm, {
      color: (date === null || date === void 0 ? void 0 : date.format("YYYY-MM-DD")) === now.format("YYYY-MM-DD") ? theme.palette.primary.main : theme.palette.gray["800"]
    }]
  }, date && date.format("D")), date && events.sort((a, b) => {
    if ((0, _dayjs.default)(a.start).isSame(b.start, "day")) {
      const aDuration = _dayjs.default.duration((0, _dayjs.default)(a.end).diff((0, _dayjs.default)(a.start))).days();

      const bDuration = _dayjs.default.duration((0, _dayjs.default)(b.end).diff((0, _dayjs.default)(b.start))).days();

      return bDuration - aDuration;
    }

    return a.start.getTime() - b.start.getTime();
  }).filter(({
    start,
    end
  }) => date.isBetween((0, _dayjs.default)(start).startOf("day"), (0, _dayjs.default)(end).endOf("day"), null, "[)")).reduce((elements, event, index, events) => [...elements, index > maxVisibleEventCount ? null : index === maxVisibleEventCount ? /*#__PURE__*/React.createElement(_reactNative.Text, {
    key: index,
    style: {
      fontSize: 11,
      marginTop: 2,
      fontWeight: "bold"
    }
  }, events.length - maxVisibleEventCount, " More") : /*#__PURE__*/React.createElement(_CalendarEventForMonthView.CalendarEventForMonthView, {
    key: index,
    event: event,
    eventCellStyle: eventCellStyle,
    onPressEvent: onPressEvent,
    renderEvent: renderEvent,
    date: date,
    dayOfTheWeek: ii,
    calendarWidth: calendarWidth,
    isRTL: theme.isRTL
  })], []))))));
}

const CalendarBodyForMonthView = (0, _utils.typedMemo)(_CalendarBodyForMonthView);
exports.CalendarBodyForMonthView = CalendarBodyForMonthView;
//# sourceMappingURL=CalendarBodyForMonthView.js.map