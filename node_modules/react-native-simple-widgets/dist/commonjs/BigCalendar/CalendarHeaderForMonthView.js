"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarHeaderForMonthView = void 0;

var _dayjs = _interopRequireDefault(require("dayjs"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _commonStyles = require("./styles/commonStyles");

var _ThemeContext = require("./theme/ThemeContext");

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _CalendarHeaderForMonthView({
  locale,
  weekStartsOn,
  style
}) {
  const dates = (0, _utils.getDatesInWeek)(new Date(), weekStartsOn, locale);
  const todayWeekNum = (0, _dayjs.default)().day();
  const theme = (0, _ThemeContext.useTheme)();
  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [_commonStyles.u["border-b"], {
      borderColor: theme.palette.gray["100"]
    }, theme.isRTL ? _commonStyles.u["flex-row-reverse"] : _commonStyles.u["flex-row"], style]
  }, dates.map(date => /*#__PURE__*/React.createElement(_reactNative.View, {
    style: {
      flex: 1,
      paddingTop: 2
    },
    key: date.toISOString()
  }, /*#__PURE__*/React.createElement(_reactNative.View, {
    style: {
      height: 30
    }
  }, /*#__PURE__*/React.createElement(_reactNative.Text, {
    style: [_commonStyles.u["text-center"], {
      color: todayWeekNum === date.day() ? theme.palette.primary.main : theme.palette.gray["800"]
    }]
  }, date.format("ddd"))))));
}

const CalendarHeaderForMonthView = (0, _utils.typedMemo)(_CalendarHeaderForMonthView);
exports.CalendarHeaderForMonthView = CalendarHeaderForMonthView;
//# sourceMappingURL=CalendarHeaderForMonthView.js.map