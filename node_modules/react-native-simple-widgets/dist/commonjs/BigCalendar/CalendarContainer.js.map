{"version":3,"sources":["CalendarContainer.tsx"],"names":["_CalendarContainer","events","height","ampm","date","eventCellStyle","locale","hideNowIndicator","mode","overlapOffset","scrollOffsetMinutes","showTime","headerContainerStyle","bodyContainerStyle","swipeEnabled","weekStartsOn","onChangeDate","onPressCell","onPressDateHeader","onPressEvent","renderEvent","renderHeader","HeaderComponent","CalendarHeader","renderHeaderForMonthView","HeaderComponentForMonthView","CalendarHeaderForMonthView","weekEndsOn","maxVisibleEventCount","targetDate","setTargetDate","React","useState","useEffect","allDayEvents","useMemo","filter","event","start","end","daytimeEvents","dateRange","Error","toDate","slice","cellHeight","Math","max","MIN_HEIGHT","theme","onSwipeHorizontal","useCallback","direction","isRTL","add","commonProps","headerProps","style","CalendarContainer"],"mappings":"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","sourcesContent":["import dayjs from \"dayjs\";\nimport * as React from \"react\";\nimport { ViewStyle } from \"react-native\";\n\nimport { MIN_HEIGHT } from \"./styles/commonStyles\";\nimport {\n    DateRangeHandler,\n    EventCellStyle,\n    EventRenderer,\n    HeaderRenderer,\n    HorizontalDirection,\n    ICalendarEvent,\n    Mode,\n    MonthHeaderRenderer,\n    WeekNum,\n} from \"./interfaces\";\nimport { useTheme } from \"./theme/ThemeContext\";\nimport {\n    getDatesInMonth,\n    getDatesInNextCustomDays,\n    getDatesInNextOneDay,\n    getDatesInNextThreeDays,\n    getDatesInWeek,\n    isAllDayEvent,\n    modeToNum,\n    typedMemo,\n} from \"./utils\";\nimport { CalendarBody } from \"./CalendarBody\";\nimport { CalendarBodyForMonthView } from \"./CalendarBodyForMonthView\";\nimport { CalendarHeader } from \"./CalendarHeader\";\nimport { CalendarHeaderForMonthView } from \"./CalendarHeaderForMonthView\";\n\nexport interface CalendarContainerProps<T> {\n    /**\n     * Events to be rendered. This is a required prop.\n     */\n    events: ICalendarEvent<T>[]\n\n    /**\n     * The height of calendar component. This is a required prop.\n     */\n    height: number\n\n    /**\n     * Adjusts the indentation of events that occur during the same time period. Defaults to 20 on web and 8 on mobile.\n     */\n    overlapOffset?: number\n\n    // Custom style\n    eventCellStyle?: EventCellStyle<T>\n    calendarContainerStyle?: ViewStyle\n    headerContainerStyle?: ViewStyle\n    bodyContainerStyle?: ViewStyle\n\n    // Custom renderer\n    renderEvent?: EventRenderer<T>\n    renderHeader?: HeaderRenderer<T>\n    renderHeaderForMonthView?: MonthHeaderRenderer\n\n    ampm?: boolean\n    date?: Date\n    locale?: string\n    hideNowIndicator?: boolean\n    mode?: Mode\n    scrollOffsetMinutes?: number\n    showTime?: boolean\n\n    swipeEnabled?: boolean\n    weekStartsOn?: WeekNum\n    onChangeDate?: DateRangeHandler\n    onPressCell?: (date: Date) => void\n    onPressDateHeader?: (date: Date) => void\n    onPressEvent?: (event: ICalendarEvent<T>) => void\n    weekEndsOn?: WeekNum\n    maxVisibleEventCount?: number\n}\n\nfunction _CalendarContainer<T>({\n    events,\n    height,\n    ampm = false,\n    date,\n    eventCellStyle,\n    locale = \"en\",\n    hideNowIndicator = false,\n    mode = \"week\",\n    overlapOffset,\n    scrollOffsetMinutes = 0,\n    showTime = true,\n    headerContainerStyle = {},\n    bodyContainerStyle = {},\n    swipeEnabled = true,\n    weekStartsOn = 0,\n    onChangeDate,\n    onPressCell,\n    onPressDateHeader,\n    onPressEvent,\n    renderEvent,\n    renderHeader: HeaderComponent = CalendarHeader,\n    renderHeaderForMonthView: HeaderComponentForMonthView = CalendarHeaderForMonthView,\n    weekEndsOn = 6,\n    maxVisibleEventCount = 3,\n}: CalendarContainerProps<T>) {\n    const [targetDate, setTargetDate] = React.useState(dayjs(date));\n\n    React.useEffect(() => {\n        if (date) {\n            setTargetDate(dayjs(date));\n        }\n    }, [date]);\n\n    const allDayEvents = React.useMemo(\n        () => events.filter((event) => isAllDayEvent(event.start, event.end)),\n        [events],\n    );\n\n    const daytimeEvents = React.useMemo(\n        () => events.filter((event) => !isAllDayEvent(event.start, event.end)),\n        [events],\n    );\n\n    const dateRange = React.useMemo(() => {\n        switch (mode) {\n        case \"month\":\n            return getDatesInMonth(targetDate, locale);\n        case \"week\":\n            return getDatesInWeek(targetDate, weekStartsOn, locale);\n        case \"3days\":\n            return getDatesInNextThreeDays(targetDate, locale);\n        case \"day\":\n            return getDatesInNextOneDay(targetDate, locale);\n        case \"custom\":\n            return getDatesInNextCustomDays(targetDate, weekStartsOn, weekEndsOn, locale);\n        default:\n            throw new Error(\n                `[react-native-big-calendar] The mode which you specified \"${mode}\" is not supported.`,\n            );\n        }\n    }, [mode, targetDate, locale, weekEndsOn, weekStartsOn]);\n\n    React.useEffect(() => {\n        if (onChangeDate) {\n            onChangeDate([dateRange[0].toDate(), dateRange.slice(-1)[0].toDate()]);\n        }\n    }, [dateRange, onChangeDate]);\n\n    const cellHeight = React.useMemo(() => Math.max(height - 30, MIN_HEIGHT) / 24, [height]);\n\n    const theme = useTheme();\n\n    const onSwipeHorizontal = React.useCallback(\n        (direction: HorizontalDirection) => {\n            if (!swipeEnabled) {\n                return;\n            }\n            if ((direction === \"LEFT\" && !theme.isRTL) || (direction === \"RIGHT\" && theme.isRTL)) {\n                setTargetDate(targetDate.add(modeToNum(mode, targetDate), \"day\"));\n            } else {\n                setTargetDate(targetDate.add(modeToNum(mode, targetDate) * -1, \"day\"));\n            }\n        },\n        [swipeEnabled, targetDate, mode, theme.isRTL],\n    );\n\n    const commonProps = {\n        cellHeight,\n        dateRange,\n        mode,\n    };\n\n    if (mode === \"month\") {\n        const headerProps = {\n            style: headerContainerStyle,\n            locale: locale,\n            weekStartsOn: weekStartsOn,\n        };\n        return (\n            <React.Fragment>\n                <HeaderComponentForMonthView {...headerProps} />\n                <CalendarBodyForMonthView<T>\n                    {...commonProps}\n                    style={bodyContainerStyle}\n                    containerHeight={height}\n                    events={daytimeEvents}\n                    eventCellStyle={eventCellStyle}\n                    weekStartsOn={weekStartsOn}\n                    hideNowIndicator={hideNowIndicator}\n                    onPressCell={onPressCell}\n                    onPressEvent={onPressEvent}\n                    onSwipeHorizontal={onSwipeHorizontal}\n                    renderEvent={renderEvent}\n                    targetDate={targetDate}\n                    maxVisibleEventCount={maxVisibleEventCount}\n                />\n            </React.Fragment>\n        );\n    }\n\n    const headerProps = {\n        ...commonProps,\n        style: headerContainerStyle,\n        allDayEvents: allDayEvents,\n        onPressDateHeader: onPressDateHeader,\n    };\n\n    return (\n        <React.Fragment>\n            <HeaderComponent {...headerProps} />\n            <CalendarBody\n                {...commonProps}\n                style={bodyContainerStyle}\n                containerHeight={height}\n                events={daytimeEvents}\n                eventCellStyle={eventCellStyle}\n                hideNowIndicator={hideNowIndicator}\n                overlapOffset={overlapOffset}\n                scrollOffsetMinutes={scrollOffsetMinutes}\n                ampm={ampm}\n                showTime={showTime}\n                onPressCell={onPressCell}\n                onPressEvent={onPressEvent}\n                onSwipeHorizontal={onSwipeHorizontal}\n                renderEvent={renderEvent}\n            />\n        </React.Fragment>\n    );\n}\n\nexport const CalendarContainer = typedMemo(_CalendarContainer);\n"]}