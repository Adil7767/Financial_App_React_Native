{"version":3,"sources":["CalendarEventForMonthView.tsx"],"names":["_CalendarEventForMonthView","event","onPressEvent","eventCellStyle","renderEvent","date","dayOfTheWeek","calendarWidth","isRTL","theme","eventWidth","isMultipleDays","isMultipleDaysStart","eventWeekDuration","React","useMemo","touchableOpacityProps","injectedStyles","backgroundColor","palette","primary","main","position","width","zIndex","right","left","u","minHeight","isSame","start","color","contrastText","typography","xs","textAlign","title","CalendarEventForMonthView"],"mappings":";;;;;;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;;;;;AAaA,SAASA,0BAAT,CAAuC;AACnCC,EAAAA,KADmC;AAEnCC,EAAAA,YAFmC;AAGnCC,EAAAA,cAHmC;AAInCC,EAAAA,WAJmC;AAKnCC,EAAAA,IALmC;AAMnCC,EAAAA,YANmC;AAOnCC,EAAAA,aAPmC;AAQnCC,EAAAA;AARmC,CAAvC,EAS0B;AACtB,QAAMC,KAAK,GAAG,6BAAd;AAEA,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,cAAd;AAA8BC,IAAAA,mBAA9B;AAAmDC,IAAAA;AAAnD,MAAyEC,KAAK,CAACC,OAAN,CAC3E,MAAM,iCAAqBd,KAArB,EAA4BI,IAA5B,EAAkCC,YAAlC,EAAgDC,aAAhD,CADqE,EAE3E,CAACF,IAAD,EAAOC,YAAP,EAAqBL,KAArB,EAA4BM,aAA5B,CAF2E,CAA/E;AAKA,QAAMS,qBAAqB,GAAG,wEAAiC;AAC3Df,IAAAA,KAD2D;AAE3DE,IAAAA,cAF2D;AAG3DD,IAAAA,YAH2D;AAI3De,IAAAA,cAAc,EAAE,CACZ;AAAEC,MAAAA,eAAe,EAAET,KAAK,CAACU,OAAN,CAAcC,OAAd,CAAsBC;AAAzC,KADY,EAEZT,mBAAmB,IAAIC,iBAAiB,GAAG,CAA3C,GACM;AACES,MAAAA,QAAQ,EAAE,UADZ;AAEEC,MAAAA,KAAK,EAAEb,UAFT;AAGEc,MAAAA,MAAM,EAAE;AAHV,KADN,GAMM,EARM,EASZhB,KAAK,GAAG;AAAEiB,MAAAA,KAAK,EAAE;AAAT,KAAH,GAAkB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KATX,EAUZC,gBAAE,MAAF,CAVY;AAJ2C,GAAjC,CAA9B;;AAkBA,MAAIvB,WAAJ,EAAiB;AACb,WAAOA,WAAW,CAACH,KAAD,EAAQe,qBAAR,CAAlB;AACH;;AAED,sBACI,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAE;AAAEY,MAAAA,SAAS,EAAE;AAAb;AAAb,KACK,CAAE,CAACjB,cAAD,IAAmBN,IAAI,CAACwB,MAAL,CAAY5B,KAAK,CAAC6B,KAAlB,EAAyB,KAAzB,CAApB,IACGnB,cAAc,IAAIC,mBADtB,kBAEG,oBAAC,6BAAD,EAAsBI,qBAAtB,eACI,oBAAC,iBAAD;AACI,IAAA,KAAK,EAAE,CACH;AAAEe,MAAAA,KAAK,EAAEtB,KAAK,CAACU,OAAN,CAAcC,OAAd,CAAsBY;AAA/B,KADG,EAEHvB,KAAK,CAACwB,UAAN,CAAiBC,EAFd,EAGHP,gBAAE,UAAF,CAHG,EAIHnB,KAAK,IAAI;AAAE2B,MAAAA,SAAS,EAAE;AAAb,KAJN,CADX;AAOI,IAAA,aAAa,EAAE;AAPnB,KASKlC,KAAK,CAACmC,KATX,CADJ,CAHR,CADJ;AAoBH;;AAEM,MAAMC,yBAAyB,GAAG,sBAAUrC,0BAAV,CAAlC","sourcesContent":["import dayjs from \"dayjs\";\nimport * as React from \"react\";\nimport { Text, TouchableOpacity, View } from \"react-native\";\n\nimport { u } from \"./styles/commonStyles\";\nimport { useCalendarTouchableOpacityProps } from \"./hooks/useCalendarTouchableOpacityProps\";\nimport { EventCellStyle, EventRenderer, ICalendarEvent } from \"./interfaces\";\nimport { useTheme } from \"./theme/ThemeContext\";\nimport { getEventSpanningInfo, typedMemo } from \"./utils\";\n\ninterface CalendarEventProps<T> {\n    event: ICalendarEvent<T>\n    onPressEvent?: (event: ICalendarEvent<T>) => void\n    eventCellStyle?: EventCellStyle<T>\n    renderEvent?: EventRenderer<T>\n    date: dayjs.Dayjs\n    dayOfTheWeek: number\n    calendarWidth: number\n    isRTL: boolean\n}\n\nfunction _CalendarEventForMonthView<T>({\n    event,\n    onPressEvent,\n    eventCellStyle,\n    renderEvent,\n    date,\n    dayOfTheWeek,\n    calendarWidth,\n    isRTL,\n}: CalendarEventProps<T>) {\n    const theme = useTheme();\n\n    const { eventWidth, isMultipleDays, isMultipleDaysStart, eventWeekDuration } = React.useMemo(\n        () => getEventSpanningInfo(event, date, dayOfTheWeek, calendarWidth),\n        [date, dayOfTheWeek, event, calendarWidth],\n    );\n\n    const touchableOpacityProps = useCalendarTouchableOpacityProps({\n        event,\n        eventCellStyle,\n        onPressEvent,\n        injectedStyles: [\n            { backgroundColor: theme.palette.primary.main },\n            isMultipleDaysStart && eventWeekDuration > 1\n                ? {\n                    position: \"absolute\",\n                    width: eventWidth,\n                    zIndex: 10000,\n                }\n                : {},\n            isRTL ? { right: 0 } : { left: 0 },\n            u[\"mt-2\"],\n        ],\n    });\n\n    if (renderEvent) {\n        return renderEvent(event, touchableOpacityProps);\n    }\n\n    return (\n        <View style={{ minHeight: 22 }}>\n            {((!isMultipleDays && date.isSame(event.start, \"day\")) ||\n                (isMultipleDays && isMultipleDaysStart)) && (\n                <TouchableOpacity {...touchableOpacityProps}>\n                    <Text\n                        style={[\n                            { color: theme.palette.primary.contrastText },\n                            theme.typography.xs,\n                            u[\"truncate\"],\n                            isRTL && { textAlign: \"right\" },\n                        ]}\n                        numberOfLines={1}\n                    >\n                        {event.title}\n                    </Text>\n                </TouchableOpacity>\n            )}\n        </View>\n    );\n}\n\nexport const CalendarEventForMonthView = typedMemo(_CalendarEventForMonthView);\n"]}