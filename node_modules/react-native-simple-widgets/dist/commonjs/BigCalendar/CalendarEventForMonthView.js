"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarEventForMonthView = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _commonStyles = require("./styles/commonStyles");

var _useCalendarTouchableOpacityProps = require("./hooks/useCalendarTouchableOpacityProps");

var _ThemeContext = require("./theme/ThemeContext");

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _CalendarEventForMonthView({
  event,
  onPressEvent,
  eventCellStyle,
  renderEvent,
  date,
  dayOfTheWeek,
  calendarWidth,
  isRTL
}) {
  const theme = (0, _ThemeContext.useTheme)();
  const {
    eventWidth,
    isMultipleDays,
    isMultipleDaysStart,
    eventWeekDuration
  } = React.useMemo(() => (0, _utils.getEventSpanningInfo)(event, date, dayOfTheWeek, calendarWidth), [date, dayOfTheWeek, event, calendarWidth]);
  const touchableOpacityProps = (0, _useCalendarTouchableOpacityProps.useCalendarTouchableOpacityProps)({
    event,
    eventCellStyle,
    onPressEvent,
    injectedStyles: [{
      backgroundColor: theme.palette.primary.main
    }, isMultipleDaysStart && eventWeekDuration > 1 ? {
      position: "absolute",
      width: eventWidth,
      zIndex: 10000
    } : {}, isRTL ? {
      right: 0
    } : {
      left: 0
    }, _commonStyles.u["mt-2"]]
  });

  if (renderEvent) {
    return renderEvent(event, touchableOpacityProps);
  }

  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: {
      minHeight: 22
    }
  }, (!isMultipleDays && date.isSame(event.start, "day") || isMultipleDays && isMultipleDaysStart) && /*#__PURE__*/React.createElement(_reactNative.TouchableOpacity, touchableOpacityProps, /*#__PURE__*/React.createElement(_reactNative.Text, {
    style: [{
      color: theme.palette.primary.contrastText
    }, theme.typography.xs, _commonStyles.u["truncate"], isRTL && {
      textAlign: "right"
    }],
    numberOfLines: 1
  }, event.title)));
}

const CalendarEventForMonthView = (0, _utils.typedMemo)(_CalendarEventForMonthView);
exports.CalendarEventForMonthView = CalendarEventForMonthView;
//# sourceMappingURL=CalendarEventForMonthView.js.map