{"version":3,"sources":["useCalendarTouchableOpacityProps.tsx"],"names":["useCalendarTouchableOpacityProps","event","eventCellStyle","injectedStyles","onPressEvent","getEventStyle","React","useMemo","plainJsEvent","start","toDate","end","_onPress","useCallback","touchableOpacityProps","delayPressIn","key","toString","style","eventCellCss","onPress","disabled"],"mappings":";;;;;;;AAAA;;AACA;;AAGA;;;;AAUO,SAASA,gCAAT,CAA6C;AAChDC,EAAAA,KADgD;AAEhDC,EAAAA,cAFgD;AAGhDC,EAAAA,cAAc,GAAG,EAH+B;AAIhDC,EAAAA;AAJgD,CAA7C,EAKsC;AACzC,QAAMC,aAAa,GAAGC,eAAMC,OAAN,CAClB,MAAO,OAAOL,cAAP,KAA0B,UAA1B,GAAuCA,cAAvC,GAAwD,MAAMA,cADnD,EAElB,CAACA,cAAD,CAFkB,CAAtB;;AAKA,QAAMM,YAAY,GAAGF,eAAMC,OAAN,CACjB,OAAO,EACH,GAAGN,KADA;AAEHQ,IAAAA,KAAK,EAAE,oBAAMR,KAAK,CAACQ,KAAZ,EAAmBC,MAAnB,EAFJ;AAGHC,IAAAA,GAAG,EAAE,oBAAMV,KAAK,CAACU,GAAZ,EAAiBD,MAAjB;AAHF,GAAP,CADiB,EAMjB,CAACT,KAAD,CANiB,CAArB;;AASA,QAAMW,QAAQ,GAAGN,eAAMO,WAAN,CAAkB,MAAM;AACrCT,IAAAA,YAAY,IAAIA,YAAY,CAACI,YAAD,CAA5B;AACH,GAFgB,EAEd,CAACJ,YAAD,EAAeI,YAAf,CAFc,CAAjB;;AAIA,QAAMM,qBAAoD,GAAG;AACzDC,IAAAA,YAAY,EAAE,EAD2C;AAEzDC,IAAAA,GAAG,EAAEf,KAAK,CAACQ,KAAN,CAAYQ,QAAZ,EAFoD;AAGzDC,IAAAA,KAAK,EAAE,CAACC,2BAAaD,KAAd,EAAqB,GAAGf,cAAxB,EAAwCE,aAAa,CAACG,YAAD,CAArD,CAHkD;AAIzDY,IAAAA,OAAO,EAAER,QAJgD;AAKzDS,IAAAA,QAAQ,EAAE,CAACjB;AAL8C,GAA7D;AAQA,SAAOU,qBAAP;AACH","sourcesContent":["import dayjs from \"dayjs\";\nimport React from \"react\";\nimport { ViewStyle } from \"react-native\";\n\nimport { eventCellCss } from \"../styles/commonStyles\";\nimport { CalendarTouchableOpacityProps, EventCellStyle, ICalendarEvent } from \"../interfaces\";\n\ninterface UseCalendarTouchableOpacityPropsProps<T> {\n    event: ICalendarEvent<T>\n    eventCellStyle?: EventCellStyle<T>\n    onPressEvent?: (e: ICalendarEvent<T>) => void\n    injectedStyles?: ViewStyle[]\n}\n\nexport function useCalendarTouchableOpacityProps<T>({\n    event,\n    eventCellStyle,\n    injectedStyles = [],\n    onPressEvent,\n}: UseCalendarTouchableOpacityPropsProps<T>) {\n    const getEventStyle = React.useMemo(\n        () => (typeof eventCellStyle === \"function\" ? eventCellStyle : () => eventCellStyle),\n        [eventCellStyle],\n    );\n\n    const plainJsEvent = React.useMemo(\n        () => ({\n            ...event,\n            start: dayjs(event.start).toDate(),\n            end: dayjs(event.end).toDate(),\n        }),\n        [event],\n    );\n\n    const _onPress = React.useCallback(() => {\n        onPressEvent && onPressEvent(plainJsEvent);\n    }, [onPressEvent, plainJsEvent]);\n\n    const touchableOpacityProps: CalendarTouchableOpacityProps = {\n        delayPressIn: 20,\n        key: event.start.toString(),\n        style: [eventCellCss.style, ...injectedStyles, getEventStyle(plainJsEvent)],\n        onPress: _onPress,\n        disabled: !onPressEvent,\n    };\n\n    return touchableOpacityProps;\n}\n"]}