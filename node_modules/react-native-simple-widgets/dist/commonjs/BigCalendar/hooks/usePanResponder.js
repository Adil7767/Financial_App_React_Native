"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePanResponder = usePanResponder;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const SWIPE_THRESHOLD = 50;

function usePanResponder({
  onSwipeHorizontal
}) {
  const [panHandled, setPanHandled] = React.useState(false);
  const panResponder = React.useMemo(() => _reactNative.PanResponder.create({
    // see https://stackoverflow.com/questions/47568850/touchableopacity-with-parent-panresponder
    onMoveShouldSetPanResponder: (_, {
      dx,
      dy
    }) => {
      return dx > 2 || dx < -2 || dy > 2 || dy < -2;
    },
    onPanResponderMove: (_, {
      dy,
      dx
    }) => {
      if (dy < -1 * SWIPE_THRESHOLD || SWIPE_THRESHOLD < dy || panHandled) {
        return;
      }

      if (dx < -1 * SWIPE_THRESHOLD) {
        onSwipeHorizontal && onSwipeHorizontal("LEFT");
        setPanHandled(true);
        return;
      }

      if (dx > SWIPE_THRESHOLD) {
        onSwipeHorizontal && onSwipeHorizontal("RIGHT");
        setPanHandled(true);
        return;
      }
    },
    onPanResponderEnd: () => {
      setPanHandled(false);
    }
  }), [panHandled, onSwipeHorizontal]);
  return panResponder;
}
//# sourceMappingURL=usePanResponder.js.map