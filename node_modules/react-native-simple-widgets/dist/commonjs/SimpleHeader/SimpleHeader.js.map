{"version":3,"sources":["SimpleHeader.tsx"],"names":["HeaderContainer","styled","View","zIndex","DesktopLeftContentWrapper","width","flexDirection","alignItems","defaultProps","isUserIconCircle","shouldCheckScrollbarSize","fluid","SimpleHeader","title","subtitle","mobileLeft","mobileContent","mobileRight","desktopLeft","desktopContent","desktopRight","showBackIcon","backButtonIcon","onHomeActionPress","onBackActionPress","ContainerComponent","ContainerFluid","Container","isMobileView","scrollbarSize","_handleBackActionPress","marginRight","justifyContent","HomeIcon","flex"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport styled from \"styled-components/native\";\nimport useScrollbarSize from \"react-scrollbar-size\";\nimport {\n    AppbarBackAction,\n    AppbarContent,\n    AppbarHeader,\n} from \"react-native-simple-elements/components/Appbar\";\nimport useScreenSize from \"react-native-simple-elements/components/Container/utils/useScreenSize\";\nimport HomeIcon from \"@mdi/svg/svg/home.svg\";\nimport { View } from \"react-native\";\nimport Container, { ContainerFluid, FlexItem } from \"react-native-simple-elements/components/Container\";\n\nconst HeaderContainer = styled.View({\n    zIndex: 3,\n});\n\nconst DesktopLeftContentWrapper = styled.View({\n    width: 240,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n});\n\ntype Props = {\n    title?: string,\n    subtitle?: string,\n    showBackIcon?: boolean,\n    backButtonIcon?: React.ReactElement,\n    mobileLeft?: (props?) => React.ReactNode,\n    mobileContent?: (props?) => React.ReactNode,\n    mobileRight?: (props?) => React.ReactNode,\n    desktopLeft?: (props?) => React.ReactNode;\n    desktopContent?: (props?) => React.ReactNode;\n    desktopRight?: (props?) => React.ReactNode,\n    onHomeActionPress?: () => void,\n    onBackActionPress?: () => void,\n    shouldCheckScrollbarSize?: boolean,\n    fluid?: boolean,\n};\n\nconst defaultProps = {\n    isUserIconCircle: true,\n    shouldCheckScrollbarSize: false,\n    fluid: false,\n};\n\nconst SimpleHeader = ({\n    title,\n    subtitle,\n    mobileLeft,\n    mobileContent,\n    mobileRight,\n    desktopLeft,\n    desktopContent,\n    desktopRight,\n    showBackIcon,\n    backButtonIcon,\n    onHomeActionPress,\n    onBackActionPress,\n    shouldCheckScrollbarSize,\n    fluid,\n}: Props) => {\n\n    const ContainerComponent = fluid ? ContainerFluid : Container;\n\n    const { isMobileView } = useScreenSize();\n    const { width: scrollbarSize } = useScrollbarSize();\n\n    const _handleBackActionPress = () => {\n        if (showBackIcon) {\n            if (typeof onBackActionPress === \"function\") {\n                onBackActionPress();\n            }\n        } else {\n            if (typeof onHomeActionPress === \"function\") {\n                onHomeActionPress();\n            }\n        }\n    };\n\n    return (\n        <HeaderContainer\n            style={{\n                marginRight: shouldCheckScrollbarSize ? scrollbarSize || 0 : 0,\n            }}\n        >\n            <AppbarHeader\n                style={{\n                    justifyContent: \"center\",\n                }}\n            >\n                <ContainerComponent>\n                    {isMobileView ?\n                        <FlexItem\n                            left={() => mobileLeft ? mobileLeft() :\n                                <AppbarBackAction\n                                    icon={showBackIcon ? backButtonIcon : HomeIcon}\n                                    onPress={_handleBackActionPress}\n                                />\n                            }\n                            content={() => mobileContent ? mobileContent() :\n                                <AppbarContent\n                                    title={title}\n                                    subtitle={subtitle}\n                                    style={{\n                                        justifyContent: \"center\",\n                                    }}\n                                />\n                            }\n                            right={() => mobileRight ? mobileRight() : null}\n                        />\n                        : null\n                    }\n                    {!isMobileView ?\n                        <FlexItem\n                            left={() => desktopLeft ?\n                                <>\n                                    <DesktopLeftContentWrapper>\n                                        {desktopLeft ? desktopLeft() : null}\n                                    </DesktopLeftContentWrapper>\n                                </>\n                                :\n                                null\n                            }\n                            content={() =>\n                                <View\n                                    style={{\n                                        flex: 1,\n                                        flexDirection: \"row\",\n                                        alignItems: \"center\",\n                                    }}\n                                >\n                                    {desktopContent ? desktopContent() : null}\n                                </View>\n                            }\n                            right={() => desktopRight ? desktopRight() : null}\n                        />\n                        : null\n                    }\n                </ContainerComponent>\n            </AppbarHeader>\n        </HeaderContainer>\n    );\n};\n\nSimpleHeader.defaultProps = defaultProps;\n\nexport default SimpleHeader;\n"]}