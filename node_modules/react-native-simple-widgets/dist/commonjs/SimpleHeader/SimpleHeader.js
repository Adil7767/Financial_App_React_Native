"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _native = _interopRequireDefault(require("styled-components/native"));

var _reactScrollbarSize = _interopRequireDefault(require("react-scrollbar-size"));

var _Appbar = require("react-native-simple-elements/components/Appbar");

var _useScreenSize = _interopRequireDefault(require("react-native-simple-elements/components/Container/utils/useScreenSize"));

var _home = _interopRequireDefault(require("@mdi/svg/svg/home.svg"));

var _reactNative = require("react-native");

var _Container = _interopRequireWildcard(require("react-native-simple-elements/components/Container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const HeaderContainer = _native.default.View({
  zIndex: 3
});

const DesktopLeftContentWrapper = _native.default.View({
  width: 240,
  flexDirection: "row",
  alignItems: "center"
});

const defaultProps = {
  isUserIconCircle: true,
  shouldCheckScrollbarSize: false,
  fluid: false
};

const SimpleHeader = ({
  title,
  subtitle,
  mobileLeft,
  mobileContent,
  mobileRight,
  desktopLeft,
  desktopContent,
  desktopRight,
  showBackIcon,
  backButtonIcon,
  onHomeActionPress,
  onBackActionPress,
  shouldCheckScrollbarSize,
  fluid
}) => {
  const ContainerComponent = fluid ? _Container.ContainerFluid : _Container.default;
  const {
    isMobileView
  } = (0, _useScreenSize.default)();
  const {
    width: scrollbarSize
  } = (0, _reactScrollbarSize.default)();

  const _handleBackActionPress = () => {
    if (showBackIcon) {
      if (typeof onBackActionPress === "function") {
        onBackActionPress();
      }
    } else {
      if (typeof onHomeActionPress === "function") {
        onHomeActionPress();
      }
    }
  };

  return /*#__PURE__*/React.createElement(HeaderContainer, {
    style: {
      marginRight: shouldCheckScrollbarSize ? scrollbarSize || 0 : 0
    }
  }, /*#__PURE__*/React.createElement(_Appbar.AppbarHeader, {
    style: {
      justifyContent: "center"
    }
  }, /*#__PURE__*/React.createElement(ContainerComponent, null, isMobileView ? /*#__PURE__*/React.createElement(_Container.FlexItem, {
    left: () => mobileLeft ? mobileLeft() : /*#__PURE__*/React.createElement(_Appbar.AppbarBackAction, {
      icon: showBackIcon ? backButtonIcon : _home.default,
      onPress: _handleBackActionPress
    }),
    content: () => mobileContent ? mobileContent() : /*#__PURE__*/React.createElement(_Appbar.AppbarContent, {
      title: title,
      subtitle: subtitle,
      style: {
        justifyContent: "center"
      }
    }),
    right: () => mobileRight ? mobileRight() : null
  }) : null, !isMobileView ? /*#__PURE__*/React.createElement(_Container.FlexItem, {
    left: () => desktopLeft ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DesktopLeftContentWrapper, null, desktopLeft ? desktopLeft() : null)) : null,
    content: () => /*#__PURE__*/React.createElement(_reactNative.View, {
      style: {
        flex: 1,
        flexDirection: "row",
        alignItems: "center"
      }
    }, desktopContent ? desktopContent() : null),
    right: () => desktopRight ? desktopRight() : null
  }) : null)));
};

SimpleHeader.defaultProps = defaultProps;
var _default = SimpleHeader;
exports.default = _default;
//# sourceMappingURL=SimpleHeader.js.map