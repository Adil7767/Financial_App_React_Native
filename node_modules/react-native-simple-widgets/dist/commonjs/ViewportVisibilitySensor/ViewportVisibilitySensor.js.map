{"version":3,"sources":["ViewportVisibilitySensor.tsx"],"names":["ViewportVisibilitySensor","React","Component","prevRectTop","rectTop","rectBottom","componentDidMount","props","disabled","startWatching","componentWillUnmount","stopWatching","interval","setInterval","myview","measure","x","y","width","height","pageX","pageY","setState","state","rectWidth","isInViewPort","delay","clearInterval","window","Dimensions","get","isVisible","lastValue","onChange","direction","render","component","children"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;AAgBA,MAAMA,wBAAN,SAAuCC,KAAK,CAACC,SAA7C,CAAqE;AAAA;AAAA;;AAAA,mCAClD;AACXC,MAAAA,WAAW,EAAE,CADF;AAEXC,MAAAA,OAAO,EAAE,CAFE;AAGXC,MAAAA,UAAU,EAAE;AAHD,KADkD;;AAAA;;AAAA;;AAAA;AAAA;;AAWjEC,EAAAA,iBAAiB,GAAG;AAChB,QAAI,CAAC,KAAKC,KAAL,CAAWC,QAAhB,EAA0B;AACtB,WAAKC,aAAL;AACH;AACJ;;AAEDC,EAAAA,oBAAoB,GAAG;AACnB,SAAKC,YAAL;AACH;;AAEDF,EAAAA,aAAa,GAAG;AACZ,QAAI,KAAKG,QAAT,EAAmB;AACf;AACH;;AACD,SAAKA,QAAL,GAAgBC,WAAW,CAAC,MAAM;AAC9B,UAAI,CAAC,KAAKC,MAAV,EAAkB;AACd;AACH;;AACD,WAAKA,MAAL,CAAYC,OAAZ,CAAoB,CAACC,CAAD,EAAIC,CAAJ,EAAOC,KAAP,EAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,KAA7B,KAAuC;AACvD,aAAKC,QAAL,CAAc;AACVnB,UAAAA,WAAW,EAAE,KAAKoB,KAAL,CAAWnB,OADd;AAEVA,UAAAA,OAAO,EAAEiB,KAFC;AAGVhB,UAAAA,UAAU,EAAEgB,KAAK,GAAGF,MAHV;AAIVK,UAAAA,SAAS,EAAEJ,KAAK,GAAGF;AAJT,SAAd;AAMA,aAAKO,YAAL;AACH,OARD;AASH,KAb0B,EAaxB,KAAKlB,KAAL,CAAWmB,KAAX,IAAoB,GAbI,CAA3B;AAcH;;AAEDf,EAAAA,YAAY,GAAG;AACX,SAAKC,QAAL,GAAgBe,aAAa,CAAC,KAAKf,QAAN,CAA7B;AACH;;AAEDa,EAAAA,YAAY,GAAG;AACX,UAAMG,MAAM,GAAGC,wBAAWC,GAAX,CAAe,QAAf,CAAf;;AACA,UAAMC,SAAS,GAAG,KAAKR,KAAL,CAAWlB,UAAX,KAA0B,CAA1B,IACd,KAAKkB,KAAL,CAAWnB,OAAX,IAAsB,CADR,IAEd,KAAKmB,KAAL,CAAWlB,UAAX,IAAyBuB,MAAM,CAACT,MAFlB,IAGd,KAAKI,KAAL,CAAWC,SAAX,GAAuB,CAHT,IAId,KAAKD,KAAL,CAAWC,SAAX,IAAwBI,MAAM,CAACV,KAJnC;;AAKA,QAAI,KAAKc,SAAL,KAAmBD,SAAvB,EAAkC;AAC9B,WAAKC,SAAL,GAAiBD,SAAjB,CAD8B,CAG9B;;AACA,WAAKxB,KAAL,CAAW0B,QAAX,CAAoBF,SAApB,EAA+B;AAC3BG,QAAAA,SAAS,EAAE,KAAKX,KAAL,CAAWnB,OAAX,GAAqB,KAAKmB,KAAL,CAAWpB,WAAhC,GAA8C,CAAC,CAA/C,GAAmD;AADnC,OAA/B;AAGH;AACJ;;AAEDgC,EAAAA,MAAM,GAAG;AACL,wBACI,oBAAC,iBAAD;AACI,MAAA,WAAW,EAAE,KADjB;AAEI,MAAA,GAAG,EAAEC,SAAS,IAAI;AACd,aAAKtB,MAAL,GAAcsB,SAAd;AACH;AAJL,OAKQ,KAAK7B,KALb,GAOK,KAAKA,KAAL,CAAW8B,QAPhB,CADJ;AAWH;;AA1EgE;;eA6EtDrC,wB","sourcesContent":["import * as React from \"react\";\nimport { View, Dimensions } from \"react-native\";\n\ntype Props = {\n    children?: React.ReactElement,\n    delay?: number,\n    disabled?: boolean,\n    onChange?: (visible, opts?) => void,\n}\n\ntype State  = {\n    prevRectTop?: number,\n    rectTop?: number,\n    rectBottom?: number,\n    rectWidth?: number,\n}\n\nclass ViewportVisibilitySensor extends React.Component<Props, State> {\n    state: State = {\n        prevRectTop: 0,\n        rectTop: 0,\n        rectBottom: 0,\n    };\n\n    interval;\n    myview;\n    lastValue;\n\n    componentDidMount() {\n        if (!this.props.disabled) {\n            this.startWatching();\n        }\n    }\n\n    componentWillUnmount() {\n        this.stopWatching();\n    }\n\n    startWatching() {\n        if (this.interval) {\n            return;\n        }\n        this.interval = setInterval(() => {\n            if (!this.myview) {\n                return;\n            }\n            this.myview.measure((x, y, width, height, pageX, pageY) => {\n                this.setState({\n                    prevRectTop: this.state.rectTop,\n                    rectTop: pageY,\n                    rectBottom: pageY + height,\n                    rectWidth: pageX + width,\n                });\n                this.isInViewPort();\n            });\n        }, this.props.delay || 100);\n    }\n\n    stopWatching() {\n        this.interval = clearInterval(this.interval);\n    }\n\n    isInViewPort() {\n        const window = Dimensions.get(\"window\");\n        const isVisible = this.state.rectBottom !== 0 &&\n            this.state.rectTop >= 0 &&\n            this.state.rectBottom <= window.height &&\n            this.state.rectWidth > 0 &&\n            this.state.rectWidth <= window.width;\n        if (this.lastValue !== isVisible) {\n            this.lastValue = isVisible;\n\n            // console.log(\"Top \", this.state.rectTop, \" Prev top \", this.state.prevRectTop);\n            this.props.onChange(isVisible, {\n                direction: this.state.rectTop > this.state.prevRectTop ? -1 : 1,\n            });\n        }\n    }\n\n    render() {\n        return (\n            <View\n                collapsable={false}\n                ref={component => {\n                    this.myview = component;\n                }}\n                {...this.props}\n            >\n                {this.props.children}\n            </View>\n        );\n    }\n}\n\nexport default ViewportVisibilitySensor;\n"]}