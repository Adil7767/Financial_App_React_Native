{"version":3,"sources":["index.tsx"],"names":["TransformableImage","React","PureComponent","constructor","props","onLayout","bind","onLoad","onLoadStart","getViewTransformerInstance","renderError","state","viewWidth","viewHeight","imageLoaded","imageDimensions","image","dimensions","keyAcumulator","UNSAFE_componentWillMount","getImageSize","componentDidMount","_mounted","UNSAFE_componentWillReceiveProps","nextProps","sameImage","setState","componentWillUnmount","e","width","height","nativeEvent","layout","source","uri","Image","getSize","error","viewTransformer","errorComponent","flex","backgroundColor","alignItems","justifyContent","color","fontSize","fontStyle","render","keyAccumulator","style","imageComponent","resizeMode","enableTransform","enableScale","enableTranslate","onTransformGestureReleased","onViewTransformed","maxScale","contentAspectRatio","Math","max","imageProps","capInsets","left","top","right","bottom","content","el","undefined","nextSource"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { View, Text, Image, StyleProp, ViewStyle } from \"react-native\";\nimport ViewTransformer from \"../ViewTransformer\";\n\ntype DimensionProps = {\n    width: number,\n    height: number,\n}\n\ntype ImageSourceProps = {\n    source: any,\n}\n\ntype Props = {\n    image: ImageSourceProps | number,\n    // image: PropTypes.shape({\n    //     source: PropTypes.oneOfType([\n    //         PropTypes.object,\n    //         PropTypes.number\n    //     ]).isRequired,\n    //     dimensions: PropTypes.shape({ width: PropTypes.number, height: PropTypes.number })\n    // }).isRequired,\n    style?: StyleProp<ViewStyle>,\n    onLoad?: (evt?) => void,\n    onLoadStart?: (evt?) => void,\n    enableTransform?: boolean,\n    enableScale?: boolean,\n    enableTranslate?: boolean,\n    onTransformGestureReleased?: (evt?) => void,\n    onViewTransformed?: (evt?) => void,\n    imageComponent?: (props?) => React.ReactNode,\n    resizeMode?: string,\n    errorComponent?: (props?) => React.ReactNode,\n};\n\ntype State = {\n    viewWidth?: number,\n    viewHeight?: number,\n    imageLoaded?: boolean,\n    imageDimensions?: DimensionProps,\n    keyAcumulator: number,\n    error?: boolean,\n    keyAccumulator?: any,\n}\n\nexport default class TransformableImage extends React.PureComponent<Props, State> {\n\n    static defaultProps = {\n        enableTransform: true,\n        enableScale: true,\n        enableTranslate: true,\n        imageComponent: undefined,\n        resizeMode: \"contain\"\n    };\n\n    _mounted;\n\n    viewTransformer;\n\n    constructor(props) {\n        super(props);\n\n        this.onLayout = this.onLayout.bind(this);\n        this.onLoad = this.onLoad.bind(this);\n        this.onLoadStart = this.onLoadStart.bind(this);\n        this.getViewTransformerInstance = this.getViewTransformerInstance.bind(this);\n        this.renderError = this.renderError.bind(this);\n\n        this.state = {\n            viewWidth: 0,\n            viewHeight: 0,\n            imageLoaded: false,\n            imageDimensions: props.image.dimensions,\n            keyAcumulator: 1\n        };\n    }\n\n    UNSAFE_componentWillMount() {\n        if (!this.state.imageDimensions) {\n            this.getImageSize(this.props.image);\n        }\n    }\n\n    componentDidMount() {\n        this._mounted = true;\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        if (!sameImage(this.props.image, nextProps.image)) {\n            // image source changed, clear last image's imageDimensions info if any\n            this.setState({ imageDimensions: nextProps.image.dimensions, keyAcumulator: this.state.keyAcumulator + 1 });\n            if (!nextProps.image.dimensions) { // if we don't have image dimensions provided in source\n                this.getImageSize(nextProps.image);\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        this._mounted = false;\n    }\n\n    onLoadStart(e) {\n        this.props.onLoadStart && this.props.onLoadStart(e);\n        if (this.state.imageLoaded) {\n            this.setState({ imageLoaded: false });\n        }\n    }\n\n    onLoad(e) {\n        this.props.onLoad && this.props.onLoad(e);\n        if (!this.state.imageLoaded) {\n            this.setState({ imageLoaded: true });\n        }\n    }\n\n    onLayout(e) {\n        const { width, height } = e.nativeEvent.layout;\n        if (this.state.viewWidth !== width || this.state.viewHeight !== height) {\n            this.setState({ viewWidth: width, viewHeight: height });\n        }\n    }\n\n    getImageSize(image) {\n        if (!image) {\n            return;\n        }\n        const { source, dimensions } = image;\n\n        if (dimensions) {\n            this.setState({ imageDimensions: dimensions });\n            return;\n        }\n\n        if (source && source.uri) {\n            Image.getSize(\n                source.uri,\n                (width, height) => {\n                    if (width && height) {\n                        if (this.state.imageDimensions && this.state.imageDimensions.width === width && this.state.imageDimensions.height === height) {\n                            // no need to update state\n                        } else {\n                            this._mounted && this.setState({ imageDimensions: { width, height } });\n                        }\n                    }\n                },\n                () => {\n                    this._mounted && this.setState({ error: true });\n                }\n            );\n        } else {\n            // console.warn(\"react-native-image-gallery\", \"Please provide dimensions of your local images\");\n        }\n    }\n\n    getViewTransformerInstance() {\n        // return this.refs[\"viewTransformer\"];\n        return this.viewTransformer;\n    }\n\n    renderError() {\n        return (this.props.errorComponent && this.props.errorComponent()) || (\n            <View style={{ flex: 1, backgroundColor: \"black\", alignItems: \"center\", justifyContent: \"center\" }}>\n                <Text style={{ color: \"white\", fontSize: 15, fontStyle: \"italic\" }}>This image cannot be displayed...</Text>\n            </View>\n        );\n    }\n\n    render() {\n        const { imageDimensions, viewWidth, viewHeight, error, keyAccumulator, imageLoaded } = this.state;\n        const { style, image, imageComponent, resizeMode, enableTransform, enableScale, enableTranslate, onTransformGestureReleased, onViewTransformed } = this.props;\n\n        let maxScale = 1;\n        let contentAspectRatio;\n        let width, height; // imageDimensions\n\n        if (imageDimensions) {\n            width = imageDimensions.width;\n            height = imageDimensions.height;\n        }\n\n        if (width && height) {\n            contentAspectRatio = width / height;\n            if (viewWidth && viewHeight) {\n                maxScale = Math.max(width / viewWidth, height / viewHeight);\n                maxScale = Math.max(1, maxScale);\n            }\n        }\n\n        const imageProps = {\n            ...this.props,\n            imageLoaded,\n            // @ts-ignore\n            source: image.source,\n            style: [style, { backgroundColor: \"transparent\" }],\n            resizeMode: resizeMode,\n            onLoadStart: this.onLoadStart,\n            onLoad: this.onLoad,\n            capInsets: { left: 0.1, top: 0.1, right: 0.1, bottom: 0.1 }\n        };\n\n        // @ts-ignore\n        const content = imageComponent ? imageComponent(imageProps, imageDimensions) : <Image {...imageProps} />;\n\n        return (\n            <ViewTransformer\n                // ref={\"viewTransformer\"}\n                ref={(el) => {\n                    this.viewTransformer = el;\n                }}\n                key={\"viewTransformer#\" + keyAccumulator} // when image source changes, we should use a different node to avoid reusing previous transform state\n                enableTransform={enableTransform && imageLoaded} // disable transform until image is loaded\n                enableScale={enableScale}\n                enableTranslate={enableTranslate}\n                enableResistance={true}\n                onTransformGestureReleased={onTransformGestureReleased}\n                onViewTransformed={onViewTransformed}\n                maxScale={maxScale}\n                contentAspectRatio={contentAspectRatio}\n                onLayout={this.onLayout}\n                // @ts-ignore\n                style={style}>\n                {error ? this.renderError() : content}\n            </ViewTransformer>\n        );\n    }\n}\n\nfunction sameImage(source, nextSource) {\n    if (source === nextSource) {\n        return true;\n    }\n    if (source && nextSource) {\n        if (source.uri && nextSource.uri) {\n            return source.uri === nextSource.uri;\n        }\n    }\n    return false;\n}\n"]}