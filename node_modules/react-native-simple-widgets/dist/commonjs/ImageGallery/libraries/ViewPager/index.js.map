{"version":3,"sources":["index.tsx"],"names":["MIN_FLING_VELOCITY","width","height","Dimensions","get","ViewPager","React","PureComponent","constructor","props","undefined","onLayout","bind","renderRow","onResponderGrant","onResponderMove","onResponderRelease","getItemLayout","scroller","createScroller","Scroller","dx","dy","isFinished","activeGesture","onPageScrollStateChanged","curX","getCurrX","flatlistRef","scrollToOffset","offset","animated","position","Math","floor","state","pageMargin","validPage","getScrollOffsetOfPage","fraction","onPageScroll","UNSAFE_componentWillMount","gestureResponder","onStartShouldSetResponder","evt","gestureState","onResponderTerminate","componentDidMount","page","initialPage","onPageChanged","finalX","startScroll","requestAnimationFrame","scrollByOffset","componentDidUpdate","prevProps","layoutChanged","currentPage","scrollToPage","pageDataArray","length","e","nativeEvent","layout","sizeChanged","setState","moveX","previousMoveX","disableSettle","settlePage","vx","onPageSelected","flingToPage","progress","min","max","velocityX","fling","immediate","InteractionManager","runAfterInteractions","recordInteraction","getScrollOffsetFromCurrentPage","data","index","keyExtractor","item","renderPage","style","newProps","ref","element","createElement","type","alignItems","render","scrollEnabled","scrollViewStyle","list","flex","flatListProps","el","x","parseInt","y","initialListSize","removeClippedSubviews"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n    View,\n    FlatList,\n    InteractionManager,\n    Dimensions,\n    StyleProp,\n    ViewStyle\n} from \"react-native\";\nimport Scroller from \"../Scroller\";\nimport { createResponder } from \"../GestureResponder\";\n\nconst MIN_FLING_VELOCITY = 0.5;\n\n// Dimensions are only used initially.\n// onLayout should handle orientation swap.\nconst { width, height } = Dimensions.get(\"window\");\n\ntype PageDataProps = {\n\n};\n\ntype Props = React.ComponentProps<typeof View> & {\n    initialPage?: number,\n    pageMargin?: number,\n    scrollViewStyle?: StyleProp<ViewStyle>,\n    scrollEnabled?: boolean,\n    renderPage?: (props?, index?) => React.ReactNode,\n    pageDataArray?: PageDataProps[],\n    initialListSize?: number,\n    removeClippedSubviews?: boolean,\n    onPageSelected?: (evt?) => void,\n    onPageScrollStateChanged?: (evt?) => void,\n    onPageScroll?: (evt?) => void,\n    flatListProps?: React.ComponentProps<typeof FlatList>,\n};\n\nexport default class ViewPager extends React.PureComponent<Props> {\n\n    static defaultProps = {\n        initialPage: 0,\n        pageMargin: 0,\n        scrollEnabled: true,\n        pageDataArray: [],\n        initialListSize: 10,\n        removeClippedSubviews: true,\n        flatListProps: {}\n    };\n\n    currentPage = undefined; // Do not initialize to make onPageSelected(0) be dispatched\n    layoutChanged = false;\n    activeGesture = false;\n    gestureResponder = undefined;\n\n    state = { width, height };\n\n    scroller;\n\n    flatlistRef;\n\n    constructor(props) {\n        super(props);\n\n        this.onLayout = this.onLayout.bind(this);\n        this.renderRow = this.renderRow.bind(this);\n        this.onResponderGrant = this.onResponderGrant.bind(this);\n        this.onResponderMove = this.onResponderMove.bind(this);\n        this.onResponderRelease = this.onResponderRelease.bind(this);\n        this.getItemLayout = this.getItemLayout.bind(this);\n\n        this.scroller = this.createScroller();\n    }\n\n    createScroller() {\n        return new Scroller(true, (dx, dy, scroller) => {\n            if (dx === 0 && dy === 0 && scroller.isFinished()) {\n                if (!this.activeGesture) {\n                    this.onPageScrollStateChanged(\"idle\");\n                }\n            } else {\n                const curX = this.scroller.getCurrX();\n                // this.refs['innerFlatList'] && this.refs['innerFlatList'].scrollToOffset({ offset: curX, animated: false });\n                this.flatlistRef && this.flatlistRef.scrollToOffset({ offset: curX, animated: false });\n\n                let position = Math.floor(curX / (this.state.width + this.props.pageMargin));\n                position = this.validPage(position);\n                const offset = (curX - this.getScrollOffsetOfPage(position)) / (this.state.width + this.props.pageMargin);\n                let fraction = (curX - this.getScrollOffsetOfPage(position) - this.props.pageMargin) / this.state.width;\n                if (fraction < 0) {\n                    fraction = 0;\n                }\n                this.props.onPageScroll && this.props.onPageScroll({\n                    position, offset, fraction\n                });\n            }\n        });\n    }\n\n    UNSAFE_componentWillMount() {\n        this.gestureResponder = createResponder({\n            onStartShouldSetResponder: (evt, gestureState) => true,\n            onResponderGrant: this.onResponderGrant,\n            onResponderMove: this.onResponderMove,\n            onResponderRelease: this.onResponderRelease,\n            onResponderTerminate: this.onResponderRelease\n        });\n    }\n\n    componentDidMount() {\n        // FlatList is set to render at initialPage.\n        // The scroller we use is not aware of this.\n        // Let it know by simulating most of what happens in scrollToPage()\n        this.onPageScrollStateChanged(\"settling\");\n\n        const page = this.validPage(this.props.initialPage);\n        this.onPageChanged(page);\n\n        const finalX = this.getScrollOffsetOfPage(page);\n        this.scroller.startScroll(this.scroller.getCurrX(), 0, finalX - this.scroller.getCurrX(), 0, 0);\n\n        requestAnimationFrame(() => {\n            // this is here to work around a bug in FlatList, as discussed here\n            // https://github.com/facebook/react-native/issues/1831\n            // (and solved here https://github.com/facebook/react-native/commit/03ae65bc ?)\n            this.scrollByOffset(1);\n            this.scrollByOffset(-1);\n        });\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.layoutChanged) {\n            this.layoutChanged = false;\n            if (typeof this.currentPage === \"number\") {\n                this.scrollToPage(this.currentPage, true);\n            }\n        } else if (this.currentPage + 1 >= this.props.pageDataArray.length &&\n            this.props.pageDataArray.length !== prevProps.pageDataArray.length) {\n            this.scrollToPage(this.props.pageDataArray.length, true);\n        }\n    }\n\n    onLayout(e) {\n        const { width, height } = e.nativeEvent.layout;\n        const sizeChanged = this.state.width !== width || this.state.height !== height;\n        if (width && height && sizeChanged) {\n            this.layoutChanged = true;\n            this.setState({ width, height });\n        }\n    }\n\n    onResponderGrant(evt, gestureState) {\n        // this.scroller.forceFinished(true);\n        this.activeGesture = true;\n        this.onPageScrollStateChanged(\"dragging\");\n    }\n\n    onResponderMove(evt, gestureState) {\n        const dx = gestureState.moveX - gestureState.previousMoveX;\n        this.scrollByOffset(dx);\n    }\n\n    onResponderRelease(evt, gestureState, disableSettle) {\n        this.activeGesture = false;\n        if (!disableSettle) {\n            this.settlePage(gestureState.vx);\n        }\n    }\n\n    onPageChanged(page) {\n        if (this.currentPage !== page) {\n            this.currentPage = page;\n            this.props.onPageSelected && this.props.onPageSelected(page);\n        }\n    }\n\n    onPageScrollStateChanged(state) {\n        this.props.onPageScrollStateChanged && this.props.onPageScrollStateChanged(state);\n    }\n\n    settlePage(vx) {\n        const { pageDataArray } = this.props;\n\n        if (vx < -MIN_FLING_VELOCITY) {\n            if (this.currentPage < pageDataArray.length - 1) {\n                this.flingToPage(this.currentPage + 1, vx);\n            } else {\n                this.flingToPage(pageDataArray.length - 1, vx);\n            }\n        } else if (vx > MIN_FLING_VELOCITY) {\n            if (this.currentPage > 0) {\n                this.flingToPage(this.currentPage - 1, vx);\n            } else {\n                this.flingToPage(0, vx);\n            }\n        } else {\n            let page = this.currentPage;\n            const progress = (this.scroller.getCurrX() - this.getScrollOffsetOfPage(this.currentPage)) / this.state.width;\n            if (progress > 1 / 3) {\n                page += 1;\n            } else if (progress < -1 / 3) {\n                page -= 1;\n            }\n            page = Math.min(pageDataArray.length - 1, page);\n            page = Math.max(0, page);\n            this.scrollToPage(page);\n        }\n    }\n\n    getScrollOffsetOfPage(page) {\n        return this.getItemLayout(this.props.pageDataArray, page).offset;\n    }\n\n    flingToPage(page, velocityX) {\n        this.onPageScrollStateChanged(\"settling\");\n\n        page = this.validPage(page);\n        this.onPageChanged(page);\n\n        velocityX *= -1000; // per sec\n        const finalX = this.getScrollOffsetOfPage(page);\n        this.scroller.fling(this.scroller.getCurrX(), 0, velocityX, 0, finalX, finalX, 0, 0);\n    }\n\n    scrollToPage(page, immediate?) {\n        this.onPageScrollStateChanged(\"settling\");\n\n        page = this.validPage(page);\n        this.onPageChanged(page);\n\n        const finalX = this.getScrollOffsetOfPage(page);\n        if (immediate) {\n            InteractionManager.runAfterInteractions(() => {\n                this.scroller.startScroll(this.scroller.getCurrX(), 0, finalX - this.scroller.getCurrX(), 0, 0);\n                // this.refs['innerFlatList'] && this.refs['innerFlatList'].scrollToOffset({ offset: finalX, animated: false });\n                this.flatlistRef && this.flatlistRef.scrollToOffset({ offset: finalX, animated: false });\n                // this.refs['innerFlatList'] && this.refs['innerFlatList'].recordInteraction();\n                this.flatlistRef && this.flatlistRef.recordInteraction();\n            });\n        } else {\n            this.scroller.startScroll(this.scroller.getCurrX(), 0, finalX - this.scroller.getCurrX(), 0, 400);\n        }\n    }\n\n    scrollByOffset(dx) {\n        this.scroller.startScroll(this.scroller.getCurrX(), 0, -dx, 0, 0);\n    }\n\n    validPage(page) {\n        page = Math.min(this.props.pageDataArray.length - 1, page);\n        page = Math.max(0, page);\n        return page;\n    }\n\n    getScrollOffsetFromCurrentPage() {\n        return this.scroller.getCurrX() - this.getScrollOffsetOfPage(this.currentPage);\n    }\n\n    getItemLayout(data, index) {\n        // this method is called 'getItemLayout', but it is not actually used\n        // as the 'getItemLayout' function for the FlatList. We use it within\n        // the code on this page though. The reason for this is that working\n        // with 'getItemLayout' for FlatList is buggy. You might end up with\n        // unrendered / missing content. Therefore we work around it, as\n        // described here\n        // https://github.com/facebook/react-native/issues/15734#issuecomment-330616697\n        return {\n            length: this.state.width + this.props.pageMargin,\n            offset: (this.state.width + this.props.pageMargin) * index,\n            index\n        };\n    }\n\n    keyExtractor(item, index) {\n        return index;\n    }\n\n    renderRow({ item, index }) {\n        const { width, height } = this.state;\n        const page: any = this.props.renderPage(item, index);\n\n        const layout = {\n            width,\n            height,\n            position: \"relative\"\n        };\n        const style = page.props.style ? [page.props.style, layout] : layout;\n\n        const newProps = { ...page.props, ref: page.ref, style };\n        const element = React.createElement(page.type, newProps);\n\n        if (this.props.pageMargin > 0 && index > 0) {\n            // Do not using margin style to implement pageMargin.\n            // The ListView seems to calculate a wrong width for children views with margin.\n            return (\n                <View style={{\n                    width: width + this.props.pageMargin,\n                    height: height,\n                    alignItems: \"flex-end\"\n                }}>\n                    {element}\n                </View>\n            );\n        } else {\n            return element;\n        }\n    }\n\n    render() {\n        const { width, height } = this.state;\n        const { pageDataArray, scrollEnabled, style, scrollViewStyle } = this.props;\n\n        if (width && height) {\n            let list = pageDataArray;\n            if (!list) {\n                list = [];\n            }\n        }\n\n        let gestureResponder = this.gestureResponder;\n        if (!scrollEnabled || pageDataArray.length <= 0) {\n            gestureResponder = {};\n        }\n\n        return (\n            <View\n                {...this.props}\n                style={[style, { flex: 1 }]}\n                {...gestureResponder}>\n                <FlatList\n                    {...this.props.flatListProps}\n                    style={[{ flex: 1 }, scrollViewStyle]}\n                    ref={(el) => {\n                        this.flatlistRef = el;\n                    }}\n                    keyExtractor={this.keyExtractor}\n                    scrollEnabled={false}\n                    horizontal={true}\n                    data={pageDataArray}\n                    renderItem={this.renderRow}\n                    onLayout={this.onLayout}\n\n                    // use contentOffset instead of initialScrollIndex so that we don't have\n                    // to use the buggy 'getItemLayout' prop. See\n                    // https://github.com/facebook/react-native/issues/15734#issuecomment-330616697 and\n                    // https://github.com/facebook/react-native/issues/14945#issuecomment-354651271\n                    contentOffset={{ x: this.getScrollOffsetOfPage(parseInt(`${this.props.initialPage}`)), y: 0 }}\n                />\n            </View>\n        );\n    }\n}\n"]}