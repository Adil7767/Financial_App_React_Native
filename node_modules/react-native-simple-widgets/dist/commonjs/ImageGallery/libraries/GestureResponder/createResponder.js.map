{"version":3,"sources":["createResponder.tsx"],"names":["currentCentroidXOfTouchesChangedAfter","TouchHistoryMath","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","TAP_UP_TIME_THRESHOLD","TAP_MOVE_THRESHOLD","MOVE_THRESHOLD","initializeGestureState","gestureState","moveX","moveY","x0","y0","dx","dy","vx","vy","numberActiveTouches","_accountsForMovesUpTo","previousMoveX","previousMoveY","pinch","undefined","previousPinch","singleTapUp","doubleTapUp","_singleTabFailed","updateGestureStateOnMove","touchHistory","e","movedAfter","prevX","x","prevY","y","dt","convertToMillisecIfNeeded","mostRecentTimeStamp","clearInteractionHandle","interactionState","handle","InteractionManager","interval","cancelSingleTapConfirm","_singleTapConfirmId","TimerMixin","clearTimeout","create","config","debug","stateID","Math","random","handlers","onStartShouldSetResponder","onMoveShouldSetResponder","effectiveMove","onStartShouldSetResponderCapture","nativeEvent","touches","length","onMoveShouldSetResponderCapture","onResponderGrant","createInteractionHandle","_grantTimestamp","onShouldBlockNativeResponder","onResponderReject","onResponderRelease","_lastSingleTapUp","_lastReleaseTimestamp","snapshot","Object","assign","timeoutId","setTimeout","onResponderSingleTapConfirmed","onResponderStart","onResponderMove","onResponderEnd","abs","onResponderTerminate","onResponderTerminationRequest","moveThreshold","minMoveDistance"],"mappings":"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","sourcesContent":["/**\n * Inspired by 'PanResponder' from Facebook.\n */\n\nimport { InteractionManager } from \"react-native\";\nimport TouchHistoryMath from \"./TouchHistoryMath\"; // copied from react/lib/TouchHistoryMath.js\nimport { pinchDistance } from \"./TouchDistanceMath\";\nimport TimerMixin from \"react-timer-mixin\";\n\nconst currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nconst currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nconst previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nconst previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nconst currentCentroidX = TouchHistoryMath.currentCentroidX;\nconst currentCentroidY = TouchHistoryMath.currentCentroidY;\n\nconst TAP_UP_TIME_THRESHOLD = 400;\nconst TAP_MOVE_THRESHOLD = 10;\nconst MOVE_THRESHOLD = 2;\n\n// let DEV = false;\n\nfunction initializeGestureState(gestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0;\n    // All `gestureState` accounts for timeStamps up until:\n    gestureState._accountsForMovesUpTo = 0;\n\n    gestureState.previousMoveX = 0;\n    gestureState.previousMoveY = 0;\n    gestureState.pinch = undefined;\n    gestureState.previousPinch = undefined;\n    gestureState.singleTapUp = false;\n    gestureState.doubleTapUp = false;\n    gestureState._singleTabFailed = false;\n}\n\nfunction updateGestureStateOnMove(gestureState, touchHistory, e) {\n    const movedAfter = gestureState._accountsForMovesUpTo;\n    const prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    const x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    const prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    const y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    const dx = x - prevX;\n    const dy = y - prevY;\n\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = x;\n    gestureState.moveY = y;\n\n    // TODO: This must be filtered intelligently.\n    // const dt = touchHistory.mostRecentTimeStamp - movedAfter;\n    const dt = convertToMillisecIfNeeded(touchHistory.mostRecentTimeStamp - movedAfter);\n    gestureState.vx = dx / dt;\n    gestureState.vy = dy / dt;\n    gestureState.dx += dx;\n    gestureState.dy += dy;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n\n    gestureState.previousMoveX = prevX;\n    gestureState.previousMoveY = prevY;\n    gestureState.pinch = pinchDistance(touchHistory, movedAfter, true);\n    gestureState.previousPinch = pinchDistance(touchHistory, movedAfter, false);\n}\n\nfunction clearInteractionHandle(interactionState) {\n    if (interactionState.handle) {\n        InteractionManager.clearInteractionHandle(interactionState.handle);\n        interactionState.handle = null;\n    }\n}\n\n/**\n * Due to commit https://github.com/facebook/react-native/commit/f2c1868b56bdfc8b0d6f448733848eafed2cd440,\n * Android is using nanoseconds while iOS is using milliseconds.\n * @param interval\n * @returns {*}\n */\nfunction convertToMillisecIfNeeded(interval) {\n    if (interval > 1000000) {\n        return interval / 1000000;\n    }\n    return interval;\n}\n\nfunction cancelSingleTapConfirm(gestureState) {\n    if (typeof gestureState._singleTapConfirmId !== \"undefined\") {\n        TimerMixin.clearTimeout(gestureState._singleTapConfirmId);\n        gestureState._singleTapConfirmId = undefined;\n    }\n}\n\n/**\n * The config object contains same callbacks as the default gesture responder(https://facebook.github.io/react-native/docs/gesture-responder-system.html).\n * And every callback are called with an additional argument 'gestureState', like PanResponder.\n * @param config\n * @returns {{}}\n */\n\n/**\n * The config object contains same callbacks as the default gesture responder(https://facebook.github.io/react-native/docs/gesture-responder-system.html).\n * And every callback are called with an additional argument 'gestureState', like PanResponder.\n * @param config\n * @param debug true to enable debug logs\n * @returns {{}}\n */\nexport default function create(config) {\n    if (config.debug) {\n        // DEV = true;\n    }\n\n    const interactionState = {\n        handle: null\n    };\n    const gestureState: any = {\n        // Useful for debugging\n        stateID: Math.random()\n    };\n    initializeGestureState(gestureState);\n\n    const handlers = {\n        onStartShouldSetResponder: function (e) {\n            // DEV && console.log(\"onStartShouldSetResponder...\");\n            cancelSingleTapConfirm(gestureState);\n            return config.onStartShouldSetResponder ?\n                config.onStartShouldSetResponder(e, gestureState) :\n                false;\n        },\n        onMoveShouldSetResponder: function (e) {\n            // DEV && console.log(\"onMoveShouldSetResponder...\");\n\n            return config.onMoveShouldSetResponder && effectiveMove(config, gestureState) ?\n                config.onMoveShouldSetResponder(e, gestureState) :\n                false;\n        },\n        onStartShouldSetResponderCapture: function (e) {\n            // DEV && console.log(\"onStartShouldSetResponderCapture...\");\n            cancelSingleTapConfirm(gestureState);\n            // TODO: Actually, we should reinitialize the state any time\n            // touches.length increases from 0 active to > 0 active.\n            if (e.nativeEvent.touches.length === 1) {\n                initializeGestureState(gestureState);\n            }\n            gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;\n            return config.onStartShouldSetResponderCapture ?\n                config.onStartShouldSetResponderCapture(e, gestureState) :\n                false;\n        },\n\n        onMoveShouldSetResponderCapture: function (e) {\n            // DEV && console.log(\"onMoveShouldSetResponderCapture...\");\n            const touchHistory = e.touchHistory;\n            // Responder system incorrectly dispatches should* to current responder\n            // Filter out any touch moves past the first one - we would have\n            // already processed multi-touch geometry during the first event.\n            if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n                return false;\n            }\n            updateGestureStateOnMove(gestureState, touchHistory, e);\n            return config.onMoveShouldSetResponderCapture && effectiveMove(config, gestureState) ?\n                config.onMoveShouldSetResponderCapture(e, gestureState) :\n                false;\n        },\n\n        onResponderGrant: function (e) {\n            // DEV && console.log(\"onResponderGrant...\");\n            cancelSingleTapConfirm(gestureState);\n            if (!interactionState.handle) {\n                interactionState.handle = InteractionManager.createInteractionHandle();\n            }\n            gestureState._grantTimestamp = e.touchHistory.mostRecentTimeStamp;\n            gestureState.x0 = currentCentroidX(e.touchHistory);\n            gestureState.y0 = currentCentroidY(e.touchHistory);\n            gestureState.dx = 0;\n            gestureState.dy = 0;\n            if (config.onResponderGrant) {\n                config.onResponderGrant(e, gestureState);\n            }\n            // TODO: t7467124 investigate if this can be removed\n            return config.onShouldBlockNativeResponder === undefined ?\n                true :\n                config.onShouldBlockNativeResponder();\n        },\n\n        onResponderReject: function (e) {\n            // DEV && console.log(\"onResponderReject...\");\n            clearInteractionHandle(interactionState);\n            config.onResponderReject && config.onResponderReject(e, gestureState);\n        },\n\n        onResponderRelease: function (e) {\n            if (gestureState.singleTapUp) {\n                if (gestureState._lastSingleTapUp) {\n                    if (convertToMillisecIfNeeded(e.touchHistory.mostRecentTimeStamp - gestureState._lastReleaseTimestamp) < TAP_UP_TIME_THRESHOLD) {\n                        gestureState.doubleTapUp = true;\n                    }\n                }\n                gestureState._lastSingleTapUp = true;\n\n                // schedule to confirm single tap\n                if (!gestureState.doubleTapUp) {\n                    const snapshot = Object.assign({}, gestureState);\n                    const timeoutId = TimerMixin.setTimeout(() => {\n                        if (gestureState._singleTapConfirmId === timeoutId) {\n                            // DEV && console.log(\"onResponderSingleTapConfirmed...\");\n                            config.onResponderSingleTapConfirmed && config.onResponderSingleTapConfirmed(e, snapshot);\n                        }\n                    }, TAP_UP_TIME_THRESHOLD);\n                    gestureState._singleTapConfirmId = timeoutId;\n                }\n            }\n            gestureState._lastReleaseTimestamp = e.touchHistory.mostRecentTimeStamp;\n\n            // DEV && console.log(\"onResponderRelease...\" + JSON.stringify(gestureState));\n            clearInteractionHandle(interactionState);\n            config.onResponderRelease && config.onResponderRelease(e, gestureState);\n            initializeGestureState(gestureState);\n        },\n\n        onResponderStart: function (e) {\n            // DEV && console.log(\"onResponderStart...\");\n            const touchHistory = e.touchHistory;\n            gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n            if (config.onResponderStart) {\n                config.onResponderStart(e, gestureState);\n            }\n        },\n\n        onResponderMove: function (e) {\n            const touchHistory = e.touchHistory;\n            // Guard against the dispatch of two touch moves when there are two\n            // simultaneously changed touches.\n            if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n                return;\n            }\n            // Filter out any touch moves past the first one - we would have\n            // already processed multi-touch geometry during the first event.\n            updateGestureStateOnMove(gestureState, touchHistory, e);\n\n            // DEV && console.log(\"onResponderMove...\" + JSON.stringify(gestureState));\n            if (config.onResponderMove && effectiveMove(config, gestureState)) {\n                config.onResponderMove(e, gestureState);\n            }\n        },\n\n        onResponderEnd: function (e) {\n            const touchHistory = e.touchHistory;\n            gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n\n            if (touchHistory.numberActiveTouches > 0 ||\n                convertToMillisecIfNeeded(touchHistory.mostRecentTimeStamp - gestureState._grantTimestamp) > TAP_UP_TIME_THRESHOLD ||\n                Math.abs(gestureState.dx) >= TAP_MOVE_THRESHOLD ||\n                Math.abs(gestureState.dy) >= TAP_MOVE_THRESHOLD\n            ) {\n                gestureState._singleTabFailed = true;\n            }\n            if (!gestureState._singleTabFailed) {\n                gestureState.singleTapUp = true;\n            }\n\n            // DEV && console.log(\"onResponderEnd...\" + JSON.stringify(gestureState));\n            clearInteractionHandle(interactionState);\n            config.onResponderEnd && config.onResponderEnd(e, gestureState);\n        },\n\n        onResponderTerminate: function (e) {\n            // DEV && console.log(\"onResponderTerminate...\");\n            clearInteractionHandle(interactionState);\n            config.onResponderTerminate && config.onResponderTerminate(e, gestureState);\n            initializeGestureState(gestureState);\n        },\n\n        onResponderTerminationRequest: function (e) {\n            // DEV && console.log(\"onResponderTerminationRequest...\");\n            return config.onResponderTerminationRequest ?\n                config.onResponderTerminationRequest(e.gestureState) :\n                true;\n        }\n    };\n    return { ...handlers };\n}\n\n/**\n * On Android devices, the default gesture responder is too sensitive that a single tap(no move intended) may trigger a move event.\n * We can use a moveThreshold config to avoid those unwanted move events.\n * @param config\n * @param gestureState\n * @returns {boolean}\n */\nfunction effectiveMove(config, gestureState) {\n    if (gestureState.numberActiveTouches > 1) {\n        // on iOS simulator, a pinch gesture(move with alt pressed) will not change gestureState.dx(always 0)\n        return true;\n    }\n\n    let moveThreshold = MOVE_THRESHOLD;\n    if (typeof config.moveThreshold === \"number\") {\n        moveThreshold = config.minMoveDistance;\n    }\n    if (Math.abs(gestureState.dx) >= moveThreshold || Math.abs(gestureState.dy) >= moveThreshold) {\n        return true;\n    }\n    return false;\n}\n"]}