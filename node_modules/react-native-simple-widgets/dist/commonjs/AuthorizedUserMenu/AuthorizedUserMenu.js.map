{"version":3,"sources":["AuthorizedUserMenu.tsx"],"names":["parseAvatarText","fullName","parts","split","text","length","charAt","toUpperCase","defaultProps","circle","AuthorizedUserMenu","loggedInUser","avatarSize","avatarStyle","avatarLabelStyle","onViewProfileClick","onLogoutClick","userMenuItems","onUserMenuItemPress","firstName","avatarUrl","isOpen","setIsOpen","React","useState","openMenu","closeMenu","_handleMenuItemPress","item","userId","uri","textAlign","Array","isArray","map","index","label","icon"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;AAEA,MAAMA,eAAe,GAAIC,QAAD,IAAc;AAClC,QAAMC,KAAK,GAAG,CAACD,QAAQ,IAAI,EAAb,EAAiBE,KAAjB,CAAuB,GAAvB,CAAd;AACA,MAAIC,IAAI,GAAG,EAAX;;AACA,MAAIF,KAAK,CAACG,MAAN,IAAgB,CAApB,EAAuB;AACnBD,IAAAA,IAAI,GAAGA,IAAI,GAAGF,KAAK,CAAC,CAAD,CAAL,CAASI,MAAT,CAAgB,CAAhB,EAAmBC,WAAnB,EAAd;AACH;;AACD,MAAIL,KAAK,CAACG,MAAN,IAAgB,CAApB,EAAuB;AACnBD,IAAAA,IAAI,GAAGA,IAAI,GAAGF,KAAK,CAAC,CAAD,CAAL,CAASI,MAAT,CAAgB,CAAhB,EAAmBC,WAAnB,EAAd;AACH;;AACD,SAAOH,IAAP;AACH,CAVD;;AA8BA,MAAMI,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE;AADS,CAArB;;AAIA,MAAMC,kBAAkB,GAAG,CAAC;AACxBC,EAAAA,YADwB;AAExBF,EAAAA,MAFwB;AAGxBG,EAAAA,UAHwB;AAIxBC,EAAAA,WAJwB;AAKxBC,EAAAA,gBALwB;AAMxBC,EAAAA,kBANwB;AAOxBC,EAAAA,aAPwB;AAQxBC,EAAAA,aARwB;AASxBC,EAAAA;AATwB,CAAD,KAUd;AAET,QAAM;AACFC,IAAAA,SADE;AAEFC,IAAAA;AAFE,MAGFT,YAAY,IAAI,EAHpB;AAKA,QAAM,CAAEU,MAAF,EAAUC,SAAV,IAAwBC,KAAK,CAACC,QAAN,CAAe,KAAf,CAA9B;;AAEA,QAAMC,QAAQ,GAAG,MAAM;AACnBH,IAAAA,SAAS,CAAC,IAAD,CAAT;AACH,GAFD;;AAIA,QAAMI,SAAS,GAAG,MAAM;AACpBJ,IAAAA,SAAS,CAAC,KAAD,CAAT;AACH,GAFD;;AAIA,QAAMK,oBAAoB,GAAIC,IAAD,IAAU;AACnC,QAAIV,mBAAJ,EAAyB;AACrBA,MAAAA,mBAAmB,CAACU,IAAD,CAAnB;AACH;AACJ,GAJD;;AAMA,sBACI,oBAAC,aAAD;AACI,IAAA,OAAO,EAAEP,MADb;AAEI,IAAA,SAAS,EAAEK,SAFf;AAGI,IAAA,MAAM,EAAEf,YAAY,SAAZ,IAAAA,YAAY,WAAZ,IAAAA,YAAY,CAAEkB,MAAd,IAAwBT,SAAxB,gBACJ,oBAAC,oBAAD;AACI,MAAA,MAAM,EAAE;AAAEU,QAAAA,GAAG,EAAEV;AAAP,OADZ;AAEI,MAAA,MAAM,EAAEX,MAFZ;AAGI,MAAA,OAAO,EAAEgB;AAHb,MADI,gBAOJ,oBAAC,wBAAD;AACI,MAAA,OAAO,EAAEA;AADb,oBAGI,oBAAC,kBAAD;AACI,MAAA,KAAK,EAAEzB,eAAe,CAACW,YAAD,aAACA,YAAD,uBAACA,YAAY,CAAEV,QAAf,CAD1B;AAEI,MAAA,IAAI,EAAEW,UAFV;AAGI,MAAA,KAAK,EAAEC,WAHX;AAII,MAAA,UAAU,EAAEC;AAJhB,MAHJ,CAVR;AAqBI,IAAA,UAAU,EAAE;AArBhB,KAuBK,CAAAH,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEkB,MAAd,kBACG,oBAAC,aAAD,CAAM,IAAN;AACI,IAAA,KAAK,EAAEV,SAAS,IAAI,EADxB;AAEI,IAAA,UAAU,EAAE;AACRY,MAAAA,SAAS,EAAE;AADH,KAFhB;AAKI,IAAA,OAAO,EAAE,MAAM;AACX,UAAI,OAAOhB,kBAAP,KAA8B,UAAlC,EAA8C;AAC1CA,QAAAA,kBAAkB;AACrB;AACJ;AATL,IAxBR,eAoCI,oBAAC,gBAAD,OApCJ,EAqCKiB,KAAK,CAACC,OAAN,CAAchB,aAAd,KAAgCA,aAAa,CAACZ,MAAd,GAAuB,CAAvD,GACGY,aAAa,CAACiB,GAAd,CAAkB,CAACN,IAAD,EAAOO,KAAP,KAAiB;AAC/B,wBACI,oBAAC,aAAD,CAAM,IAAN;AACI,MAAA,GAAG,EAAEA,KADT;AAEI,MAAA,KAAK,EAAEP,IAAI,CAACQ,KAFhB;AAGI,MAAA,IAAI,EAAER,IAAI,CAACS,IAHf;AAII,MAAA,OAAO,EAAE,MAAMV,oBAAoB,CAACC,IAAD;AAJvC,MADJ;AAQH,GATD,CADH,GAWK,IAhDV,eAkDI,oBAAC,gBAAD,OAlDJ,EAmDK,CAAAjB,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEkB,MAAd,kBACG,oBAAC,aAAD,CAAM,IAAN;AACI,IAAA,KAAK,EAAC,QADV;AAEI,IAAA,OAAO,EAAE,MAAM;AACX,UAAI,OAAOb,aAAP,KAAyB,UAA7B,EAAyC;AACrCA,QAAAA,aAAa;AAChB;AACJ;AANL,IApDR,CADJ;AAgEH,CAjGD;;AAmGAN,kBAAkB,CAACF,YAAnB,GAAkCA,YAAlC;eAEeE,kB","sourcesContent":["import * as React from \"react\";\nimport { AvatarText } from \"react-native-simple-elements/components/Avatar\";\nimport Menu from \"react-native-simple-elements/components/Menu\";\nimport ImageButton from \"react-native-simple-elements/components/ImageButton\";\nimport Divider from \"react-native-simple-elements/components/Divider\";\nimport { StyleProp, TextStyle, ViewStyle } from \"react-native\";\nimport TouchableRipple from \"react-native-simple-elements/components/TouchableRipple\";\n\nconst parseAvatarText = (fullName) => {\n    const parts = (fullName || \"\").split(\" \");\n    let text = \"\";\n    if (parts.length >= 1) {\n        text = text + parts[0].charAt(0).toUpperCase();\n    }\n    if (parts.length >= 2) {\n        text = text + parts[1].charAt(0).toUpperCase();\n    }\n    return text;\n}\n\nexport type MenuItemProps = {\n    label: string,\n    icon?: React.ReactElement,\n    url?: string,\n};\n\ntype Props = {\n    circle?: boolean,\n    avatarSize?: number,\n    avatarStyle?: StyleProp<ViewStyle>,\n    avatarLabelStyle?: StyleProp<TextStyle>,\n    loggedInUser?: Record<string, any>,\n    onViewProfileClick?: () => void,\n    onLogoutClick?: () => void,\n    userMenuItems?: MenuItemProps[],\n    onUserMenuItemPress?: (item?) => void,\n}\n\nconst defaultProps = {\n    circle: false,\n};\n\nconst AuthorizedUserMenu = ({\n    loggedInUser,\n    circle,\n    avatarSize,\n    avatarStyle,\n    avatarLabelStyle,\n    onViewProfileClick,\n    onLogoutClick,\n    userMenuItems,\n    onUserMenuItemPress,\n}: Props) => {\n\n    const {\n        firstName,\n        avatarUrl,\n    } = loggedInUser || {} as any;\n\n    const [ isOpen, setIsOpen ] = React.useState(false);\n\n    const openMenu = () => {\n        setIsOpen(true);\n    };\n\n    const closeMenu = () => {\n        setIsOpen(false);\n    };\n\n    const _handleMenuItemPress = (item) => {\n        if (onUserMenuItemPress) {\n            onUserMenuItemPress(item);\n        }\n    };\n\n    return (\n        <Menu\n            visible={isOpen}\n            onDismiss={closeMenu}\n            anchor={loggedInUser?.userId && avatarUrl?\n                <ImageButton\n                    source={{ uri: avatarUrl }}\n                    circle={circle}\n                    onPress={openMenu}\n                />\n                :\n                <TouchableRipple\n                    onPress={openMenu}\n                >\n                    <AvatarText\n                        label={parseAvatarText(loggedInUser?.fullName)}\n                        size={avatarSize}\n                        style={avatarStyle}\n                        labelStyle={avatarLabelStyle}\n                    />\n                </TouchableRipple>\n            }\n            alignRight={true}\n        >\n            {loggedInUser?.userId &&\n                <Menu.Item\n                    title={firstName || \"\"}\n                    titleStyle={{\n                        textAlign: \"center\",\n                    }}\n                    onPress={() => {\n                        if (typeof onViewProfileClick === \"function\") {\n                            onViewProfileClick();\n                        }\n                    }}\n                />\n            }\n            <Divider />\n            {Array.isArray(userMenuItems) && userMenuItems.length > 0 ?\n                userMenuItems.map((item, index) => {\n                    return (\n                        <Menu.Item\n                            key={index}\n                            title={item.label}\n                            icon={item.icon}\n                            onPress={() => _handleMenuItemPress(item)}\n                        />\n                    );\n                })\n                : null\n            }\n            <Divider />\n            {loggedInUser?.userId &&\n                <Menu.Item\n                    title=\"Logout\"\n                    onPress={() => {\n                        if (typeof onLogoutClick === \"function\") {\n                            onLogoutClick();\n                        }\n                    }}\n                />\n            }\n        </Menu>\n    );\n};\n\nAuthorizedUserMenu.defaultProps = defaultProps;\n\nexport default AuthorizedUserMenu;\n"]}