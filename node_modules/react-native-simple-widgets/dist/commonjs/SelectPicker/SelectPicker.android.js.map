{"version":3,"sources":["SelectPicker.android.tsx"],"names":["areEqual","prevProps","nextProps","isVisible","selectedValue","SelectPicker","React","memo","props","mode","onCancel","onConfirm","onHide","options","otherProps","currentDateRef","useRef","currentMode","setCurrentMode","useState","useEffect","handleChange","event","date","type","nextDate","current","Date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","map","item","index","label","value"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Picker } from \"@react-native-picker/picker\";\n\n// Memo workaround for https://github.com/react-native-community/datetimepicker/issues/54\nconst areEqual = (prevProps, nextProps) => {\n    return (\n        prevProps.isVisible === nextProps.isVisible &&\n        prevProps.selectedValue === nextProps.selectedValue\n    );\n};\n\ntype Props = {\n    selectedValue?: Date,\n    mode?: string,\n    isVisible?: boolean,\n    onCancel: () => void,\n    onConfirm: (date) => void,\n    onHide?: (flag, date?) => void,\n    maximumDate?: Date,\n    minimumDate?: Date,\n    options: any[],\n};\n\nconst SelectPicker = React.memo((props: Props) => {\n    const { selectedValue, mode, isVisible, onCancel, onConfirm, onHide, options, ...otherProps } = props;\n    const currentDateRef = React.useRef(selectedValue);\n    const [currentMode, setCurrentMode] = React.useState(null);\n\n    React.useEffect(() => {\n        if (isVisible && currentMode === null) {\n            setCurrentMode(mode === \"dropdown\" ? \"dropdown\" : \"dialog\");\n        } else if (!isVisible) {\n            setCurrentMode(null);\n        }\n    }, [isVisible, currentMode, mode]);\n\n    if (!isVisible || !currentMode) return null;\n\n    const handleChange = (event, date) => {\n        if (event.type === \"dismissed\") {\n            onCancel();\n            onHide(false);\n            return;\n        }\n        let nextDate = date;\n        if (mode === \"datetime\") {\n            if (currentMode === \"date\") {\n                setCurrentMode(\"time\");\n                currentDateRef.current = new Date(date);\n                return;\n            } else if (currentMode === \"time\") {\n                const year = currentDateRef.current.getFullYear();\n                const month = currentDateRef.current.getMonth();\n                const day = currentDateRef.current.getDate();\n                const hours = date.getHours();\n                const minutes = date.getMinutes();\n                nextDate = new Date(year, month, day, hours, minutes);\n            }\n        }\n        onConfirm(nextDate);\n        onHide(true, nextDate);\n    };\n\n    return (\n        <Picker\n            {...otherProps}\n            mode={currentMode}\n            selectedValue={selectedValue}\n            onValueChange={handleChange}\n        >\n            {options.map((item, index) => (\n                <Picker.Item label={item.label} value={item.value} key={index} />\n            ))}\n        </Picker>\n    );\n},\nareEqual\n);\n\n// DateTimePickerModal.defaultProps = {\n//     date: new Date(),\n//     isVisible: false,\n// };\n\nexport default SelectPicker;\n"]}