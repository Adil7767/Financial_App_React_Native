"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const Item = _props => null;

function _default(ComposedComponent) {
  var _class, _temp;

  return _temp = _class = class extends React.Component {
    constructor(...args) {
      super(...args);

      _defineProperty(this, "select", (value, itemHeight, scrollTo) => {
        const children = React.Children.toArray(this.props.children);

        for (let i = 0, len = children.length; i < len; i++) {
          if (children[i].props.value === value) {
            this.selectByIndex(i, itemHeight, scrollTo);
            return;
          }
        }

        this.selectByIndex(0, itemHeight, scrollTo);
      });

      _defineProperty(this, "doScrollingComplete", (top, itemHeight, fireValueChange) => {
        const children = React.Children.toArray(this.props.children);
        const index = this.computeChildIndex(top, itemHeight, children.length);
        const child = children[index];

        if (child) {
          fireValueChange(child.props.value);
        } else if (console.warn) {
          console.warn("child not found", children, index);
        }
      });
    }

    selectByIndex(index, itemHeight, zscrollTo) {
      if (index < 0 || index >= React.Children.count(this.props.children) || !itemHeight) {
        return;
      }

      zscrollTo(index * itemHeight);
    }

    computeChildIndex(top, itemHeight, childrenLength) {
      const index = Math.round(top / itemHeight);
      return Math.min(index, childrenLength - 1);
    }

    render() {
      return /*#__PURE__*/React.createElement(ComposedComponent, _extends({}, this.props, {
        doScrollingComplete: this.doScrollingComplete,
        computeChildIndex: this.computeChildIndex,
        select: this.select
      }));
    }

  }, _defineProperty(_class, "Item", Item), _temp;
}
//# sourceMappingURL=PickerMixin.js.map