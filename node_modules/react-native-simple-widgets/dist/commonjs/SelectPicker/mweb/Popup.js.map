{"version":3,"sources":["Popup.tsx"],"names":["SelectPickerPopupHeader","styled","div","getModal","props","visible","getContent","hide","onDismiss","onOk","prefixCls","style","dismissText","title","okText","WrapComponent","triggerType","pickerValueProp","pickerValueChangeProp"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;AAEA,MAAMA,uBAAuB,GAAGC,0BAAOC,GAAV,mBAA7B;;AAeA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,IAAd;AAAoBC,EAAAA,SAApB;AAA+BC,EAAAA;AAA/B,CAAjB,KAA2D;AACxE,MAAI,CAACJ,OAAL,EAAc;AACV,WAAO,IAAP;AACH;;AACD,QAAM;AAAEK,IAAAA;AAAF,MAAgBN,KAAtB;AAEA,sBACI,oBAAC,kBAAD,CACI;AACA;AAFJ;AAGI,IAAA,OAAO,EAAE,IAHb,CAII;AACA;AACA;AACA;AAPJ;AAQI,IAAA,KAAK,EAAEA,KAAK,CAACO;AARjB,kBAUI,8CACI,oBAAC,uBAAD;AAAyB,IAAA,SAAS,YAAKD,SAAL;AAAlC,kBAEI;AAAK,IAAA,SAAS,YAAKA,SAAL,mBAAuBA,SAAvB,iBAAd;AAA8D,IAAA,OAAO,EAAEF;AAAvE,KACKJ,KAAK,CAACQ,WADX,CAFJ,eAMI;AAAK,IAAA,SAAS,YAAKF,SAAL,mBAAuBA,SAAvB;AAAd,KAAyDN,KAAK,CAACS,KAA/D,CANJ,eAQI;AAAK,IAAA,SAAS,YAAKH,SAAL,mBAAuBA,SAAvB,kBAAd;AAA+D,IAAA,OAAO,EAAED;AAAxE,KACKL,KAAK,CAACU,MADX,CARJ,CADJ,EAcKR,UAAU,EAdf,CAVJ,CADJ;AA6BH,CAnCD;;eAqCe,yBAAWH,QAAX,EAAqB;AAChCO,EAAAA,SAAS,EAAE,kBADqB;AAEhCK,EAAAA,aAAa,EAAE,MAFiB;AAGhCC,EAAAA,WAAW,EAAE,SAHmB;AAIhCC,EAAAA,eAAe,EAAE,eAJe;AAKhCC,EAAAA,qBAAqB,EAAE;AALS,CAArB,C","sourcesContent":["import * as React from \"react\";\nimport { Modal } from \"react-native\";\nimport PopupMixin from \"./PopupMixin\";\n// import Touchable from 'rmc-feedback';\nimport styled from \"styled-components\";\n\nconst SelectPickerPopupHeader = styled.div`\n    background-image: -webkit-linear-gradient(top, #e7e7e7, #e7e7e7, transparent, transparent);\n    background-image: linear-gradient(to bottom, #e7e7e7, #e7e7e7, transparent, transparent);\n    background-position: bottom;\n    background-size: 100% 1px;\n    background-repeat: no-repeat;\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    &-left, &-right {\n        padding-left: 15px;\n        padding-right: 15px;\n    }\n`;\n\nconst getModal = (props, visible, { getContent, hide, onDismiss, onOk }) => {\n    if (!visible) {\n        return null;\n    }\n    const { prefixCls } = props;\n\n    return (\n        <Modal\n            // prefixCls={`${prefixCls}`}\n            // className={props.className || ''}\n            visible={true}\n            // closable={false}\n            // transitionName={props.transitionName || props.popupTransitionName}\n            // maskTransitionName={props.maskTransitionName}\n            // onClose={hide}\n            style={props.style}\n        >\n            <div>\n                <SelectPickerPopupHeader className={`${prefixCls}-header`}>\n                    {/* <Touchable activeClassName={`${prefixCls}-item-active`}> */}\n                    <div className={`${prefixCls}-item ${prefixCls}-header-left`} onClick={onDismiss}>\n                        {props.dismissText}\n                    </div>\n                    {/* </Touchable> */}\n                    <div className={`${prefixCls}-item ${prefixCls}-title`}>{props.title}</div>\n                    {/* <Touchable activeClassName={`${prefixCls}-item-active`}> */}\n                    <div className={`${prefixCls}-item ${prefixCls}-header-right`} onClick={onOk}>\n                        {props.okText}\n                    </div>\n                    {/* </Touchable> */}\n                </SelectPickerPopupHeader>\n                {getContent()}\n            </div>\n        </Modal>\n    );\n};\n\nexport default PopupMixin(getModal, {\n    prefixCls: \"rmc-picker-popup\",\n    WrapComponent: \"span\",\n    triggerType: \"onClick\",\n    pickerValueProp: \"selectedValue\",\n    pickerValueChangeProp: \"onValueChange\",\n});\n"]}