"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _PickerMixin = _interopRequireDefault(require("./PickerMixin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const ratio = _reactNative.PixelRatio.get();

const styles = _reactNative.StyleSheet.create({
  indicator: {
    position: "absolute",
    left: 0,
    top: -99,
    borderColor: "#aaa",
    borderTopWidth: 1 / ratio,
    borderBottomWidth: 1 / ratio
  },
  scrollView: {
    height: 0
  },
  selectedItemText: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#000"
  },
  itemText: {
    fontSize: 20,
    color: "#aaa",
    textAlign: "center"
  }
});

class Picker extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "itemHeight", void 0);

    _defineProperty(this, "itemWidth", void 0);

    _defineProperty(this, "scrollBuffer", void 0);

    _defineProperty(this, "scrollerRef", void 0);

    _defineProperty(this, "contentRef", void 0);

    _defineProperty(this, "indicatorRef", void 0);

    _defineProperty(this, "onItemLayout", e => {
      const {
        height,
        width
      } = e.nativeEvent.layout; // console.log('onItemLayout', height);

      if (this.itemHeight !== height || this.itemWidth !== width) {
        this.itemWidth = width;

        if (this.indicatorRef) {
          this.indicatorRef.setNativeProps({
            style: [styles.indicator, {
              top: height * 3,
              height,
              width
            }]
          });
        }
      }

      if (this.itemHeight !== height) {
        this.itemHeight = height;

        if (this.scrollerRef) {
          this.scrollerRef.setNativeProps({
            style: {
              height: height * 7
            }
          });
        }

        if (this.contentRef) {
          this.contentRef.setNativeProps({
            style: {
              paddingTop: height * 3,
              paddingBottom: height * 3
            }
          });
        } // i do no know why!...


        setTimeout(() => {
          this.props.select(this.props.selectedValue, this.itemHeight, this.scrollTo);
        }, 0);
      }
    });

    _defineProperty(this, "scrollTo", y => {
      if (this.scrollerRef) {
        this.scrollerRef.scrollTo({
          y,
          animated: false
        });
      }
    });

    _defineProperty(this, "fireValueChange", selectedValue => {
      if (this.props.selectedValue !== selectedValue && this.props.onValueChange) {
        this.props.onValueChange(selectedValue);
      }
    });

    _defineProperty(this, "onScroll", e => {
      const {
        y
      } = e.nativeEvent.contentOffset;
      this.clearScrollBuffer();
      this.scrollBuffer = setTimeout(() => {
        this.clearScrollBuffer();
        this.props.doScrollingComplete(y, this.itemHeight, this.fireValueChange);
      }, 100);
    });
  }

  componentDidUpdate() {
    this.props.select(this.props.selectedValue, this.itemHeight, this.scrollTo);
  }

  componentWillUnmount() {
    this.clearScrollBuffer();
  }

  clearScrollBuffer() {
    if (this.scrollBuffer) {
      clearTimeout(this.scrollBuffer);
    }
  }

  render() {
    const {
      children,
      itemStyle,
      selectedValue,
      style
    } = this.props;
    const items = React.Children.map(children, (item, index) => {
      const totalStyle = [styles.itemText];

      if (selectedValue === item.props.value) {
        totalStyle.push(styles.selectedItemText);
      }

      totalStyle.push(itemStyle);
      return /*#__PURE__*/React.createElement(_reactNative.View, {
        ref: el => this["item".concat(index)] = el,
        onLayout: index === 0 ? this.onItemLayout : undefined,
        key: item.key
      }, /*#__PURE__*/React.createElement(_reactNative.Text, {
        style: totalStyle,
        numberOfLines: 1
      }, item.props.label));
    });
    return /*#__PURE__*/React.createElement(_reactNative.View, {
      style: style
    }, /*#__PURE__*/React.createElement(_reactNative.View, {
      ref: el => this.indicatorRef = el,
      style: styles.indicator
    }), /*#__PURE__*/React.createElement(_reactNative.ScrollView, {
      style: styles.scrollView,
      ref: el => this.scrollerRef = el,
      onScroll: this.onScroll,
      showsVerticalScrollIndicator: false,
      overScrollMode: "never"
    }, /*#__PURE__*/React.createElement(_reactNative.View, {
      ref: el => this.contentRef = el
    }, items)));
  }

}

var _default = (0, _PickerMixin.default)(Picker);

exports.default = _default;
//# sourceMappingURL=NativePicker.android.js.map