"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SelectPickerContentItem = void 0;

var React = _interopRequireWildcard(require("react"));

var _PickerMixin = _interopRequireDefault(require("./PickerMixin"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _templateObject5() {
  const data = _taggedTemplateLiteral(["\n    font-size: 16px;\n    height: 34px;\n    line-height: 34px;\n    padding: 0 10px;\n    white-space: nowrap;\n    position: relative;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    color: #9b9b9b;\n    width: 100%;\n    box-sizing: border-box;\n"]);

  _templateObject5 = function () {
    return data;
  };

  return data;
}

function _templateObject4() {
  const data = _taggedTemplateLiteral(["\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    z-index: 1;\n"]);

  _templateObject4 = function () {
    return data;
  };

  return data;
}

function _templateObject3() {
  const data = _taggedTemplateLiteral(["\n    box-sizing: border-box;\n    width: 100%;\n    height: 34px;\n    position: absolute;\n    left: 0;\n    top: 102px;\n    z-index: 3;\n    border-top: 1PX solid #ddd;\n    border-bottom: 1PX solid #ddd;\n"]);

  _templateObject3 = function () {
    return data;
  };

  return data;
}

function _templateObject2() {
  const data = _taggedTemplateLiteral(["\n    position: absolute;\n    left: 0;\n    top: 0;\n    height: 100%;\n    margin: 0 auto;\n    width: 100%;\n    z-index: 3;\n    background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.95), rgba(255, 255, 255, 0.6)), linear-gradient(to top, rgba(255, 255, 255, 0.95), rgba(255, 255, 255, 0.6));\n    background-position: top, bottom;\n    background-size: 100% 204px;\n    background-repeat: no-repeat;\n"]);

  _templateObject2 = function () {
    return data;
  };

  return data;
}

function _templateObject() {
  const data = _taggedTemplateLiteral(["\n    height: 238px;\n\n    display: block;\n    position: relative;\n    overflow: hidden;\n    width: 100%;\n    flex: 1;\n    text-align: center;\n"]);

  _templateObject = function () {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const SelectPickerContainer = _styledComponents.default.div(_templateObject());

const SelectPickerMask = _styledComponents.default.div(_templateObject2());

const SelectPickerIndicator = _styledComponents.default.div(_templateObject3());

const SelectPickerContent = _styledComponents.default.div(_templateObject4());

const SelectPickerContentItem = _styledComponents.default.div(_templateObject5());

exports.SelectPickerContentItem = SelectPickerContentItem;

class Picker extends React.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "rootRef", void 0);

    _defineProperty(this, "maskRef", void 0);

    _defineProperty(this, "contentRef", void 0);

    _defineProperty(this, "indicatorRef", void 0);

    _defineProperty(this, "itemHeight", void 0);

    _defineProperty(this, "scrollValue", void 0);

    _defineProperty(this, "scrollHanders", (() => {
      let scrollY = -1;
      let lastY = 0;
      let startY = 0;
      let scrollDisabled = false;
      let isMoving = false;

      const setTransform = (nodeStyle, value) => {
        nodeStyle.transform = value;
        nodeStyle.webkitTransform = value;
      };

      const setTransition = (nodeStyle, value) => {
        nodeStyle.transition = value;
        nodeStyle.webkitTransition = value;
      };

      const scrollTo = (_x, y, time = .3) => {
        if (scrollY !== y) {
          scrollY = y;

          if (time && !this.props.noAnimate) {
            setTransition(this.contentRef.style, "cubic-bezier(0,0,0.2,1.15) ".concat(time, "s"));
          }

          setTransform(this.contentRef.style, "translate3d(0,".concat(-y, "px,0)"));
          setTimeout(() => {
            this.scrollingComplete();

            if (this.contentRef) {
              setTransition(this.contentRef.style, "");
            }
          }, +time * 1000);
        }
      };

      const Velocity = ((minInterval = 30, maxInterval = 100) => {
        let _time = 0;
        let _y = 0;
        let _velocity = 0;
        const recorder = {
          record: y => {
            const now = +new Date();
            _velocity = (y - _y) / (now - _time);

            if (now - _time >= minInterval) {
              _velocity = now - _time <= maxInterval ? _velocity : 0;
              _y = y;
              _time = now;
            }
          },
          getVelocity: y => {
            if (y !== _y) {
              recorder.record(y);
            }

            return _velocity;
          }
        };
        return recorder;
      })();

      const onFinish = () => {
        isMoving = false;
        let targetY = scrollY;
        const height = (this.props.children.length - 1) * this.itemHeight;
        let time = .3;
        const velocity = Velocity.getVelocity(targetY) * 4;

        if (velocity) {
          targetY = velocity * 40 + targetY;
          time = Math.abs(velocity) * .1;
        }

        if (targetY % this.itemHeight !== 0) {
          targetY = Math.round(targetY / this.itemHeight) * this.itemHeight;
        }

        if (targetY < 0) {
          targetY = 0;
        } else if (targetY > height) {
          targetY = height;
        }

        scrollTo(0, targetY, time < .3 ? .3 : time);
        this.onScrollChange();
      };

      const onStart = y => {
        if (scrollDisabled) {
          return;
        }

        isMoving = true;
        startY = y;
        lastY = scrollY;
      };

      const onMove = y => {
        if (scrollDisabled || !isMoving) {
          return;
        }

        scrollY = lastY - y + startY;
        Velocity.record(scrollY);
        this.onScrollChange();
        setTransform(this.contentRef.style, "translate3d(0,".concat(-scrollY, "px,0)"));
      };

      return {
        touchstart: evt => onStart(evt.touches[0].pageY),
        mousedown: evt => onStart(evt.pageY),
        touchmove: evt => {
          evt.preventDefault();
          onMove(evt.touches[0].pageY);
        },
        mousemove: evt => {
          evt.preventDefault();
          onMove(evt.pageY);
        },
        touchend: () => onFinish(),
        touchcancel: () => onFinish(),
        mouseup: () => onFinish(),
        getValue: () => {
          return scrollY;
        },
        scrollTo,
        setDisabled: (disabled = false) => {
          scrollDisabled = disabled;
        }
      };
    })());

    _defineProperty(this, "scrollTo", top => {
      this.scrollHanders.scrollTo(0, top);
    });

    _defineProperty(this, "scrollToWithoutAnimation", top => {
      this.scrollHanders.scrollTo(0, top, 0);
    });

    _defineProperty(this, "fireValueChange", selectedValue => {
      if (selectedValue !== this.state.selectedValue) {
        if (!("selectedValue" in this.props)) {
          this.setState({
            selectedValue
          });
        }

        if (this.props.onValueChange) {
          this.props.onValueChange(selectedValue);
        }
      }
    });

    _defineProperty(this, "onScrollChange", () => {
      const top = this.scrollHanders.getValue();

      if (top >= 0) {
        const children = React.Children.toArray(this.props.children);
        const index = this.props.computeChildIndex(top, this.itemHeight, children.length);

        if (this.scrollValue !== index) {
          this.scrollValue = index;
          const child = children[index];

          if (child && this.props.onScrollChange) {
            this.props.onScrollChange(child.props.value);
          } else if (!child && console.warn) {
            console.warn("child not found", children, index);
          }
        }
      }
    });

    _defineProperty(this, "scrollingComplete", () => {
      const top = this.scrollHanders.getValue();

      if (top >= 0) {
        this.props.doScrollingComplete(top, this.itemHeight, this.fireValueChange);
      }
    });

    let selectedValueState;
    const {
      selectedValue: _selectedValue,
      defaultSelectedValue
    } = this.props;

    if (_selectedValue !== undefined) {
      selectedValueState = _selectedValue;
    } else if (defaultSelectedValue !== undefined) {
      selectedValueState = defaultSelectedValue;
    } else {
      const children = React.Children.toArray(this.props.children);
      selectedValueState = children && children[0] && children[0].props.value;
    }

    this.state = {
      selectedValue: selectedValueState
    };
  }

  componentDidMount() {
    const {
      contentRef,
      indicatorRef,
      maskRef,
      rootRef
    } = this;
    const rootHeight = rootRef.getBoundingClientRect().height; // https://github.com/react-component/m-picker/issues/18

    const itemHeight = this.itemHeight = indicatorRef.getBoundingClientRect().height;
    let num = Math.floor(rootHeight / itemHeight);

    if (num % 2 === 0) {
      num--;
    }

    num--;
    num /= 2;
    contentRef.style.padding = "".concat(itemHeight * num, "px 0");
    indicatorRef.style.top = "".concat(itemHeight * num, "px");
    maskRef.style.backgroundSize = "100% ".concat(itemHeight * num, "px");
    this.scrollHanders.setDisabled(this.props.disabled);
    this.props.select(this.state.selectedValue, this.itemHeight, this.scrollTo);
    const passiveSupported = this.passiveSupported();
    const willPreventDefault = passiveSupported ? {
      passive: false
    } : false;
    const willNotPreventDefault = passiveSupported ? {
      passive: true
    } : false;
    Object.keys(this.scrollHanders).forEach(key => {
      if (key.indexOf("touch") === 0 || key.indexOf("mouse") === 0) {
        const pd = key.indexOf("move") >= 0 ? willPreventDefault : willNotPreventDefault;
        rootRef.addEventListener(key, this.scrollHanders[key], pd);
      }
    });
  }

  componentWillUnmount() {
    Object.keys(this.scrollHanders).forEach(key => {
      if (key.indexOf("touch") === 0 || key.indexOf("mouse") === 0) {
        this.rootRef.removeEventListener(key, this.scrollHanders[key]);
      }
    });
  }

  passiveSupported() {
    let passiveSupported = false;

    try {
      const options = Object.defineProperty({}, "passive", {
        get: () => {
          passiveSupported = true;
        }
      });
      window.addEventListener("test", null, options);
    } catch (err) {// do something
    }

    return passiveSupported;
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    if ("selectedValue" in nextProps) {
      if (this.state.selectedValue !== nextProps.selectedValue) {
        this.setState({
          selectedValue: nextProps.selectedValue
        }, () => {
          this.props.select(nextProps.selectedValue, this.itemHeight, nextProps.noAnimate ? this.scrollToWithoutAnimation : this.scrollTo);
        });
      }
    }

    this.scrollHanders.setDisabled(nextProps.disabled);
  }

  shouldComponentUpdate(nextProps, nextState) {
    return this.state.selectedValue !== nextState.selectedValue || this.props.children !== nextProps.children;
  }

  componentDidUpdate() {
    this.props.select(this.state.selectedValue, this.itemHeight, this.scrollToWithoutAnimation);
  }

  getValue() {
    if ("selectedValue" in this.props) {
      return this.props.selectedValue;
    }

    const children = React.Children.toArray(this.props.children);
    return children && children[0] && children[0].props.value;
  }

  render() {
    const {
      props
    } = this;
    const {
      prefixCls,
      itemStyle,
      indicatorStyle,
      // indicatorClassName = "",
      children
    } = props;
    const {
      selectedValue
    } = this.state;
    const itemClassName = "".concat(prefixCls, "-item");
    const selectedItemClassName = "".concat(itemClassName, " ").concat(prefixCls, "-item-selected");

    const map = item => {
      const {
        className = "",
        style,
        value
      } = item.props;
      return /*#__PURE__*/React.createElement(SelectPickerContentItem, {
        style: { ...itemStyle,
          ...style
        },
        className: "".concat(selectedValue === value ? selectedItemClassName : itemClassName, " ").concat(className),
        key: value
      }, item.children || item.props.children);
    }; // compatibility for preact


    const items = React.Children ? React.Children.map(children, map) : [].concat(children).map(map); // const pickerCls = {
    //     [props.className as string]: !!props.className,
    //     [prefixCls as string]: true,
    // };

    return /*#__PURE__*/React.createElement(SelectPickerContainer // className={classNames(pickerCls)}
    , {
      ref: el => this.rootRef = el,
      style: this.props.style,
      "data-testid": "selectpicker_container"
    }, /*#__PURE__*/React.createElement(SelectPickerMask, {
      className: "".concat(prefixCls, "-mask"),
      ref: el => this.maskRef = el
    }), /*#__PURE__*/React.createElement(SelectPickerIndicator // className={`${prefixCls}-indicator ${indicatorClassName}`}
    , {
      ref: el => this.indicatorRef = el,
      style: indicatorStyle
    }), /*#__PURE__*/React.createElement(SelectPickerContent // className={`${prefixCls}-content`}
    , {
      ref: el => this.contentRef = el
    }, items));
  }

}

_defineProperty(Picker, "defaultProps", {
  prefixCls: "rmc-picker"
});

var _default = (0, _PickerMixin.default)(Picker);

exports.default = _default;
//# sourceMappingURL=Picker.js.map