"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Modal = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const MODAL_ANIM_DURATION = 300;
const MODAL_BACKDROP_OPACITY = 0.4;

class Modal extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      isVisible: this.props.isVisible,
      deviceWidth: _reactNative.Dimensions.get("window").width,
      deviceHeight: _reactNative.Dimensions.get("window").height
    });

    _defineProperty(this, "animVal", new _reactNative.Animated.Value(0));

    _defineProperty(this, "_isMounted", false);

    _defineProperty(this, "handleDimensionsUpdate", dimensionsUpdate => {
      const deviceWidth = dimensionsUpdate.window.width;
      const deviceHeight = dimensionsUpdate.window.height;

      if (deviceWidth !== this.state.deviceWidth || deviceHeight !== this.state.deviceHeight) {
        this.setState({
          deviceWidth,
          deviceHeight
        });
      }
    });

    _defineProperty(this, "show", () => {
      this.setState({
        isVisible: true
      });

      _reactNative.Animated.timing(this.animVal, {
        easing: _reactNative.Easing.inOut(_reactNative.Easing.quad),
        // Using native driver in the modal makes the content flash
        useNativeDriver: false,
        duration: MODAL_ANIM_DURATION,
        toValue: 1
      }).start();
    });

    _defineProperty(this, "hide", () => {
      _reactNative.Animated.timing(this.animVal, {
        easing: _reactNative.Easing.inOut(_reactNative.Easing.quad),
        // Using native driver in the modal makes the content flash
        useNativeDriver: false,
        duration: MODAL_ANIM_DURATION,
        toValue: 0
      }).start(() => {
        if (this._isMounted) {
          this.setState({
            isVisible: false
          }, this.props.onHide);
        }
      });
    });
  }

  componentDidMount() {
    this._isMounted = true;

    if (this.state.isVisible) {
      this.show();
    }

    _reactNative.DeviceEventEmitter.addListener("didUpdateDimensions", this.handleDimensionsUpdate);
  }

  componentWillUnmount() {
    _reactNative.DeviceEventEmitter.removeListener("didUpdateDimensions", this.handleDimensionsUpdate);

    this._isMounted = false;
  }

  componentDidUpdate(prevProps) {
    if (this.props.isVisible && !prevProps.isVisible) {
      this.show();
    } else if (!this.props.isVisible && prevProps.isVisible) {
      this.hide();
    }
  }

  render() {
    const {
      children,
      onBackdropPress,
      contentStyle,
      ...otherProps
    } = this.props;
    const {
      deviceHeight,
      deviceWidth,
      isVisible
    } = this.state;
    const backdropAnimatedStyle = {
      opacity: this.animVal.interpolate({
        inputRange: [0, 1],
        outputRange: [0, MODAL_BACKDROP_OPACITY]
      })
    };
    const contentAnimatedStyle = {
      transform: [{
        translateY: this.animVal.interpolate({
          inputRange: [0, 1],
          outputRange: [deviceHeight, 0],
          extrapolate: "clamp"
        })
      }]
    };
    return /*#__PURE__*/React.createElement(_reactNative.Modal, _extends({
      transparent: true,
      animationType: "none",
      visible: isVisible
    }, otherProps), /*#__PURE__*/React.createElement(_reactNative.TouchableWithoutFeedback, {
      onPress: onBackdropPress
    }, /*#__PURE__*/React.createElement(_reactNative.Animated.View, {
      style: [styles.backdrop, backdropAnimatedStyle, {
        width: deviceWidth,
        height: deviceHeight
      }]
    })), isVisible && /*#__PURE__*/React.createElement(_reactNative.Animated.View, {
      style: [styles.content, contentAnimatedStyle, contentStyle],
      pointerEvents: "box-none"
    }, children));
  }

}

exports.Modal = Modal;

_defineProperty(Modal, "defaultProps", {
  onBackdropPress: () => null,
  onHide: () => null,
  isVisible: false
});

const styles = _reactNative.StyleSheet.create({
  container: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  backdrop: {
    position: "absolute",
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: "black",
    opacity: 0
  },
  content: {
    flex: 1,
    justifyContent: "flex-end"
  }
});

var _default = Modal;
exports.default = _default;
//# sourceMappingURL=Modal.js.map