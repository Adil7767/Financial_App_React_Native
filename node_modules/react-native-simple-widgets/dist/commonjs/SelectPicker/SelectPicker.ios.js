"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.cancelButtonStyles = exports.CancelButton = exports.confirmButtonStyles = exports.ConfirmButton = exports.headerStyles = exports.Header = exports.TITLE_COLOR = exports.TITLE_FONT_SIZE = exports.HIGHLIGHT_COLOR_LIGHT = exports.HIGHLIGHT_COLOR_DARK = exports.BUTTON_FONT_SIZE = exports.BUTTON_FONT_COLOR = exports.BUTTON_FONT_WEIGHT = exports.BORDER_RADIUS = exports.BORDER_COLOR_DARK = exports.BORDER_COLOR = exports.BACKGROUND_COLOR_DARK = exports.BACKGROUND_COLOR_LIGHT = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _picker = require("@react-native-picker/picker");

var _Modal = _interopRequireDefault(require("./Modal"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const BACKGROUND_COLOR_LIGHT = "white";
exports.BACKGROUND_COLOR_LIGHT = BACKGROUND_COLOR_LIGHT;
const BACKGROUND_COLOR_DARK = "#0E0E0E";
exports.BACKGROUND_COLOR_DARK = BACKGROUND_COLOR_DARK;
const BORDER_COLOR = "#d5d5d5";
exports.BORDER_COLOR = BORDER_COLOR;
const BORDER_COLOR_DARK = "#272729";
exports.BORDER_COLOR_DARK = BORDER_COLOR_DARK;
const BORDER_RADIUS = 13;
exports.BORDER_RADIUS = BORDER_RADIUS;
const BUTTON_FONT_WEIGHT = "normal";
exports.BUTTON_FONT_WEIGHT = BUTTON_FONT_WEIGHT;
const BUTTON_FONT_COLOR = "#007ff9";
exports.BUTTON_FONT_COLOR = BUTTON_FONT_COLOR;
const BUTTON_FONT_SIZE = 20;
exports.BUTTON_FONT_SIZE = BUTTON_FONT_SIZE;
const HIGHLIGHT_COLOR_DARK = "#444444";
exports.HIGHLIGHT_COLOR_DARK = HIGHLIGHT_COLOR_DARK;
const HIGHLIGHT_COLOR_LIGHT = "#ebebeb";
exports.HIGHLIGHT_COLOR_LIGHT = HIGHLIGHT_COLOR_LIGHT;
const TITLE_FONT_SIZE = 20;
exports.TITLE_FONT_SIZE = TITLE_FONT_SIZE;
const TITLE_COLOR = "#8f8f8f";
exports.TITLE_COLOR = TITLE_COLOR;

class SelectPicker extends React.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      currentDate: this.props.date,
      isPickerVisible: this.props.isVisible
    });

    _defineProperty(this, "didPressConfirm", false);

    _defineProperty(this, "handleCancel", () => {
      this.didPressConfirm = false;
      this.props.onCancel();
    });

    _defineProperty(this, "handleConfirm", () => {
      this.didPressConfirm = true;
      this.props.onConfirm(this.state.currentDate);
    });

    _defineProperty(this, "handleHide", () => {
      const {
        onHide
      } = this.props;

      if (onHide) {
        onHide(this.didPressConfirm, this.state.currentDate);
      }

      this.setState({
        isPickerVisible: false
      });
    });

    _defineProperty(this, "handleChange", (value, index) => {
      if (this.props.onChange) {
        this.props.onChange(value);
      }

      this.setState({
        currentDate: value
      });
    });
  }

  static getDerivedStateFromProps(props, state) {
    if (props.isVisible && !state.isPickerVisible) {
      return {
        currentDate: props.date,
        isPickerVisible: true
      };
    }

    return null;
  }

  render() {
    const {
      cancelTextIOS,
      confirmTextIOS,
      // customCancelButtonIOS,
      // customConfirmButtonIOS,
      // customHeaderIOS,
      // customPickerIOS,
      // date,
      headerTextIOS,
      isDarkModeEnabled,
      isVisible,
      modalStyleIOS,
      modalPropsIOS,
      pickerContainerStyleIOS,
      // onCancel,
      // onConfirm,
      // onChange,
      // onHide,
      options,
      ...otherProps
    } = this.props;
    const isAppearanceModuleAvailable = !!(_reactNative.Appearance && _reactNative.Appearance.getColorScheme);

    const _isDarkModeEnabled = isDarkModeEnabled === undefined && isAppearanceModuleAvailable ? _reactNative.Appearance.getColorScheme() === "dark" : isDarkModeEnabled || false; //   const ConfirmButtonComponent = customConfirmButtonIOS || ConfirmButton;


    const ConfirmButtonComponent = ConfirmButton; //   const CancelButtonComponent = customCancelButtonIOS || CancelButton;

    const CancelButtonComponent = CancelButton; //   const HeaderComponent = customHeaderIOS || Header;

    const HeaderComponent = Header; //   const PickerComponent = customPickerIOS || DateTimePicker;

    const PickerComponent = _picker.Picker;
    const themedContainerStyle = _isDarkModeEnabled ? pickerStyles.containerDark : pickerStyles.containerLight;
    const headerText = headerTextIOS || "Pick an options";
    return /*#__PURE__*/React.createElement(_Modal.default, _extends({
      isVisible: isVisible,
      contentStyle: [pickerStyles.modal, modalStyleIOS],
      onBackdropPress: this.handleCancel,
      onHide: this.handleHide
    }, modalPropsIOS), /*#__PURE__*/React.createElement(_reactNative.View, {
      style: [pickerStyles.container, themedContainerStyle, pickerContainerStyleIOS]
    }, /*#__PURE__*/React.createElement(HeaderComponent, {
      label: headerText
    }), /*#__PURE__*/React.createElement(PickerComponent // display="spinner"
    , _extends({}, otherProps, {
      selectedValue: this.state.currentDate,
      onValueChange: this.handleChange
    }), options.map((item, index) => /*#__PURE__*/React.createElement(PickerComponent.Item, {
      label: item.label,
      value: item.value,
      key: index
    }))), /*#__PURE__*/React.createElement(ConfirmButtonComponent, {
      isDarkModeEnabled: _isDarkModeEnabled,
      onPress: this.handleConfirm,
      label: confirmTextIOS
    })), /*#__PURE__*/React.createElement(CancelButtonComponent, {
      isDarkModeEnabled: _isDarkModeEnabled,
      onPress: this.handleCancel,
      label: cancelTextIOS
    }));
  }

}

_defineProperty(SelectPicker, "defaultProps", {
  cancelTextIOS: "Cancel",
  confirmTextIOS: "Confirm",
  modalPropsIOS: {},
  date: new Date(),
  isDarkModeEnabled: undefined,
  isVisible: false,
  pickerContainerStyleIOS: {},
  options: []
});

const pickerStyles = _reactNative.StyleSheet.create({
  modal: {
    justifyContent: "flex-end",
    margin: 10
  },
  container: {
    borderRadius: BORDER_RADIUS,
    marginBottom: 8,
    overflow: "hidden"
  },
  containerLight: {
    backgroundColor: BACKGROUND_COLOR_LIGHT
  },
  containerDark: {
    backgroundColor: BACKGROUND_COLOR_DARK
  }
});

const Header = ({
  label,
  style = headerStyles
}) => {
  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: style.root
  }, /*#__PURE__*/React.createElement(_reactNative.Text, {
    style: style.text
  }, label));
};

exports.Header = Header;

const headerStyles = _reactNative.StyleSheet.create({
  root: {
    borderBottomColor: BORDER_COLOR,
    borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
    padding: 14,
    backgroundColor: "transparent"
  },
  text: {
    textAlign: "center",
    color: TITLE_COLOR,
    fontSize: TITLE_FONT_SIZE
  }
});

exports.headerStyles = headerStyles;

const ConfirmButton = ({
  isDarkModeEnabled,
  onPress,
  label,
  style = confirmButtonStyles
}) => {
  const themedButtonStyle = isDarkModeEnabled ? confirmButtonStyles.buttonDark : confirmButtonStyles.buttonLight;
  const underlayColor = isDarkModeEnabled ? HIGHLIGHT_COLOR_DARK : HIGHLIGHT_COLOR_LIGHT;
  return /*#__PURE__*/React.createElement(_reactNative.TouchableHighlight, {
    style: [themedButtonStyle, style.button],
    underlayColor: underlayColor,
    onPress: onPress,
    accessible: true,
    accessibilityRole: "button",
    accessibilityLabel: label
  }, /*#__PURE__*/React.createElement(_reactNative.Text, {
    style: style.text
  }, label));
};

exports.ConfirmButton = ConfirmButton;

const confirmButtonStyles = _reactNative.StyleSheet.create({
  button: {
    borderTopWidth: _reactNative.StyleSheet.hairlineWidth,
    backgroundColor: "transparent",
    height: 57,
    justifyContent: "center"
  },
  buttonLight: {
    borderColor: BORDER_COLOR
  },
  buttonDark: {
    borderColor: BORDER_COLOR_DARK
  },
  text: {
    textAlign: "center",
    color: BUTTON_FONT_COLOR,
    fontSize: BUTTON_FONT_SIZE,
    fontWeight: BUTTON_FONT_WEIGHT,
    backgroundColor: "transparent"
  }
});

exports.confirmButtonStyles = confirmButtonStyles;

const CancelButton = ({
  isDarkModeEnabled,
  onPress,
  label,
  style = cancelButtonStyles
}) => {
  const themedButtonStyle = isDarkModeEnabled ? cancelButtonStyles.buttonDark : cancelButtonStyles.buttonLight;
  const underlayColor = isDarkModeEnabled ? HIGHLIGHT_COLOR_DARK : HIGHLIGHT_COLOR_LIGHT;
  return /*#__PURE__*/React.createElement(_reactNative.TouchableHighlight, {
    style: [style.button, themedButtonStyle],
    underlayColor: underlayColor,
    onPress: onPress,
    accessible: true,
    accessibilityRole: "button",
    accessibilityLabel: label
  }, /*#__PURE__*/React.createElement(_reactNative.Text, {
    style: style.text
  }, label));
};

exports.CancelButton = CancelButton;

const cancelButtonStyles = _reactNative.StyleSheet.create({
  button: {
    borderRadius: BORDER_RADIUS,
    height: 57,
    marginBottom: (0, _utils.isIphoneX)() ? 20 : 0,
    justifyContent: "center"
  },
  buttonLight: {
    backgroundColor: BACKGROUND_COLOR_LIGHT
  },
  buttonDark: {
    backgroundColor: BACKGROUND_COLOR_DARK
  },
  text: {
    padding: 10,
    textAlign: "center",
    color: BUTTON_FONT_COLOR,
    fontSize: BUTTON_FONT_SIZE,
    fontWeight: "600",
    backgroundColor: "transparent"
  }
});

exports.cancelButtonStyles = cancelButtonStyles;
var _default = SelectPicker;
exports.default = _default;
//# sourceMappingURL=SelectPicker.ios.js.map