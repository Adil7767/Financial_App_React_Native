"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _AlertDialog = _interopRequireDefault(require("react-native-simple-elements/components/AlertDialog"));

var _Button = _interopRequireDefault(require("react-native-simple-elements/components/Button"));

var _Dialog = require("react-native-simple-elements/components/Dialog");

var _Text = _interopRequireDefault(require("react-native-simple-elements/components/Text"));

var _styledComponents = require("styled-components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const defaultProps = {
  translations: {
    confirmText: "Ok"
  }
};

const ErrorDialog = ({
  innerRef,
  children,
  title,
  message,
  translations,
  dialogContentStyle,
  messageStyle,
  ...rest
}) => {
  const [visible, setVisible] = React.useState(false);
  const optionsRef = React.useRef({});
  const {
    colors
  } = React.useContext(_styledComponents.ThemeContext);
  React.useImperativeHandle(innerRef, () => ({
    open: opts => {
      optionsRef.current = {
        onConfirm: opts === null || opts === void 0 ? void 0 : opts.onConfirm
      };
      setVisible(true);
    },
    close: () => {
      setVisible(false);
    }
  }));

  const _handleConfirm = () => {
    if (optionsRef && optionsRef.current && optionsRef.current.onConfirm) {
      optionsRef.current.onConfirm();
    }

    innerRef.current.close();
  };

  const _handleDismiss = () => {
    innerRef.current.close();
  };

  return /*#__PURE__*/React.createElement(_AlertDialog.default, _extends({
    visible: visible,
    onDismiss: _handleDismiss,
    contentStyle: {}
  }, rest), title ? /*#__PURE__*/React.createElement(_Dialog.DialogTitle, null, title) : null, /*#__PURE__*/React.createElement(_Dialog.DialogContent, {
    style: [styles.dialogContentStyle, dialogContentStyle]
  }, message ? /*#__PURE__*/React.createElement(_Text.default, {
    style: [messageStyle, {
      color: colors.error
    }]
  }, message) : children), /*#__PURE__*/React.createElement(_Dialog.DialogActions, null, /*#__PURE__*/React.createElement(_Button.default, {
    mode: "contained",
    onPress: _handleConfirm
  }, translations === null || translations === void 0 ? void 0 : translations.confirmText)));
};

ErrorDialog.defaultProps = defaultProps;
var _default = ErrorDialog;
exports.default = _default;

const styles = _reactNative.StyleSheet.create({
  dialogContentStyle: {
    paddingHorizontal: 16
  }
});
//# sourceMappingURL=ErrorDialog.js.map