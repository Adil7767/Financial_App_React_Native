"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatRelativeToNow = exports.formatRelative = exports.formatDistanceToNow = exports.formatDistance = exports.format = exports.parseSavedTime = exports.parse = exports.newUTCDateTimeAndDurationString = exports.newUTCDateTimeString = exports.TIME_FORMAT_ISO_STRING = void 0;

var _add = _interopRequireDefault(require("date-fns/add"));

var _parseJSON = _interopRequireDefault(require("date-fns/parseJSON"));

var _parse = _interopRequireDefault(require("date-fns/parse"));

var _format = _interopRequireDefault(require("date-fns/format"));

var _formatDistance = _interopRequireDefault(require("date-fns/formatDistance"));

var _formatRelative = _interopRequireDefault(require("date-fns/formatRelative"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const TIME_FORMAT_ISO_STRING = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";
exports.TIME_FORMAT_ISO_STRING = TIME_FORMAT_ISO_STRING;

const newUTCDateTimeString = () => {
  return (0, _parseJSON.default)(new Date().toISOString());
};
/**
 * format UTC time with a duration
 * @param duration ex: { hours: 1 }
 * @returns string
 */


exports.newUTCDateTimeString = newUTCDateTimeString;

const newUTCDateTimeAndDurationString = duration => {
  return (0, _add.default)((0, _parseJSON.default)(new Date().toISOString()), duration);
};

exports.newUTCDateTimeAndDurationString = newUTCDateTimeAndDurationString;

const parse = (timeStr, format) => {
  return (0, _parse.default)(timeStr, format, new Date());
};

exports.parse = parse;

const parseSavedTime = timeStr => {
  return (0, _parseJSON.default)(timeStr);
};

exports.parseSavedTime = parseSavedTime;

const format = (time, format = TIME_FORMAT_ISO_STRING) => {
  return (0, _format.default)(time, format);
}; // How many


exports.format = format;

const formatDistance = (time1, time2) => {
  return (0, _formatDistance.default)(time1, time2);
};

exports.formatDistance = formatDistance;

const formatDistanceToNow = time => {
  return (0, _formatDistance.default)(time, new Date());
}; // When


exports.formatDistanceToNow = formatDistanceToNow;

const formatRelative = (time1, time2) => {
  return (0, _formatRelative.default)(time1, time2);
};

exports.formatRelative = formatRelative;

const formatRelativeToNow = time => {
  return (0, _formatRelative.default)(time, new Date());
};

exports.formatRelativeToNow = formatRelativeToNow;
//# sourceMappingURL=index.js.map