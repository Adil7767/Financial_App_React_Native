{"version":3,"sources":["index.ts"],"names":["TIME_FORMAT_ISO_STRING","newUTCDateTimeString","Date","toISOString","newUTCDateTimeAndDurationString","duration","parse","timeStr","format","parseSavedTime","time","formatDistance","time1","time2","formatDistanceToNow","formatRelative","formatRelativeToNow"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEO,MAAMA,sBAAsB,GAAG,8BAA/B;;;AAEA,MAAMC,oBAAoB,GAAG,MAAM;AACtC,SAAO,wBAAe,IAAIC,IAAJ,EAAD,CAAaC,WAAb,EAAd,CAAP;AACH,CAFM;AAIP;AACA;AACA;AACA;AACA;;;;;AACO,MAAMC,+BAA+B,GAAIC,QAAD,IAAc;AACzD,SAAO,kBAAQ,wBAAe,IAAIH,IAAJ,EAAD,CAAaC,WAAb,EAAd,CAAR,EAAmDE,QAAnD,CAAP;AACH,CAFM;;;;AAIA,MAAMC,KAAK,GAAG,CAACC,OAAD,EAAkBC,MAAlB,KAA6B;AAC9C,SAAO,oBAAUD,OAAV,EAAmBC,MAAnB,EAA2B,IAAIN,IAAJ,EAA3B,CAAP;AACH,CAFM;;;;AAIA,MAAMO,cAAc,GAAIF,OAAD,IAAqB;AAC/C,SAAO,wBAAcA,OAAd,CAAP;AACH,CAFM;;;;AAIA,MAAMC,MAAM,GAAG,CAACE,IAAD,EAAaF,MAAM,GAAGR,sBAAtB,KAAiD;AACnE,SAAO,qBAAWU,IAAX,EAAiBF,MAAjB,CAAP;AACH,CAFM,C,CAIP;;;;;AACO,MAAMG,cAAc,GAAG,CAACC,KAAD,EAAcC,KAAd,KAA8B;AACxD,SAAO,6BAAmBD,KAAnB,EAA0BC,KAA1B,CAAP;AACH,CAFM;;;;AAIA,MAAMC,mBAAmB,GAAIJ,IAAD,IAAgB;AAC/C,SAAO,6BAAmBA,IAAnB,EAAyB,IAAIR,IAAJ,EAAzB,CAAP;AACH,CAFM,C,CAIP;;;;;AACO,MAAMa,cAAc,GAAG,CAACH,KAAD,EAAcC,KAAd,KAA8B;AACxD,SAAO,6BAAmBD,KAAnB,EAA0BC,KAA1B,CAAP;AACH,CAFM;;;;AAIA,MAAMG,mBAAmB,GAAIN,IAAD,IAAgB;AAC/C,SAAO,6BAAmBA,IAAnB,EAAyB,IAAIR,IAAJ,EAAzB,CAAP;AACH,CAFM","sourcesContent":["import dateAdd from \"date-fns/add\";\nimport dateParseJSON from \"date-fns/parseJSON\";\nimport dateParse from \"date-fns/parse\";\nimport dateFormat from \"date-fns/format\";\nimport dateFormatDistance from \"date-fns/formatDistance\";\nimport dateFormatRelative from \"date-fns/formatRelative\";\n\nexport const TIME_FORMAT_ISO_STRING = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\n\nexport const newUTCDateTimeString = () => {\n    return dateParseJSON((new Date()).toISOString());\n};\n\n/**\n * format UTC time with a duration\n * @param duration ex: { hours: 1 }\n * @returns string\n */\nexport const newUTCDateTimeAndDurationString = (duration) => {\n    return dateAdd(dateParseJSON((new Date()).toISOString()), duration);\n};\n\nexport const parse = (timeStr: string, format) => {\n    return dateParse(timeStr, format, new Date());\n};\n\nexport const parseSavedTime = (timeStr: string) => {\n    return dateParseJSON(timeStr);\n};\n\nexport const format = (time: Date, format = TIME_FORMAT_ISO_STRING) => {\n    return dateFormat(time, format);\n};\n\n// How many\nexport const formatDistance = (time1: Date, time2: Date) => {\n    return dateFormatDistance(time1, time2);\n};\n\nexport const formatDistanceToNow = (time: Date) => {\n    return dateFormatDistance(time, new Date());\n};\n\n// When\nexport const formatRelative = (time1: Date, time2: Date) => {\n    return dateFormatRelative(time1, time2);\n};\n\nexport const formatRelativeToNow = (time: Date) => {\n    return dateFormatRelative(time, new Date());\n};\n"]}