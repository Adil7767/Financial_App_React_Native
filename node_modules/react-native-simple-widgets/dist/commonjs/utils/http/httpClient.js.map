{"version":3,"sources":["httpClient.ts"],"names":["parseResponse","response","bodyText","text","ok","status","statusText","serverTime","body","JSON","parse","url","error","removeURLTrailingSlash","length","endsWith","slice","get","requestConfig","baseUrl","params","headers","requireServerTime","urlWithParams","URL","Object","keys","filter","key","forEach","Array","isArray","value","searchParams","append","requestUrl","toString","fetch","method","then","extraData","Date","catch","createRequest","stringify","createPostUrlencodedRequest","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","createPostFileRequest","fd","FormData","file","put","remove","post","postUrlencoded","postFile","request"],"mappings":"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","sourcesContent":["async function parseResponse(response) {\r\n    const bodyText = await response.text();\r\n    const { ok, status, statusText, serverTime } = response;\r\n\r\n    try {\r\n        const body = JSON.parse(bodyText);\r\n        return { ok, status, statusText, body, url: response.url, serverTime };\r\n    } catch (error) {\r\n        return { ok, status, statusText, body: bodyText, url: response.url };\r\n    }\r\n}\r\n\r\nfunction removeURLTrailingSlash(url) {\r\n    return url.length > 0 && url.endsWith(\"/\") ? url.slice(0, -1) : url;\r\n}\r\n\r\nasync function get(url, requestConfig = {} as any) {\r\n    const { baseUrl, params, headers = {}, requireServerTime } = requestConfig;\r\n    const urlWithParams = new URL(url, baseUrl);\r\n    if (params) {\r\n        Object.keys(params)\r\n            .filter(key => params[key] && params[key] !== \"\")\r\n            .forEach(key => {\r\n                if (Array.isArray(params[key])) {\r\n                    params[key].forEach(value => {\r\n                        urlWithParams.searchParams.append(key, value);\r\n                    });\r\n                } else {\r\n                    urlWithParams.searchParams.append(key, params[key]);\r\n                }\r\n            });\r\n    }\r\n\r\n    // Fix React Native URL issue with trailing slash added automatically at the end. https://github.com/facebook/react-native/issues/24428\r\n    const requestUrl = removeURLTrailingSlash(urlWithParams.toString());\r\n\r\n    return fetch(requestUrl, {\r\n        method: \"GET\",\r\n        headers,\r\n    })\r\n        .then(async response => {\r\n            const { ok, status, statusText, body } = await parseResponse(response);\r\n            return {\r\n                ok,\r\n                status,\r\n                statusText,\r\n                extraData: {\r\n                    serverTime:\r\n                        requireServerTime && new Date(response.headers.get(\"Date\")),\r\n                },\r\n                body,\r\n            };\r\n        })\r\n        .catch(error => {\r\n            // console.log(`Error : ${requestUrl}`, error);\r\n            return {\r\n                ok: false,\r\n                status: 500,\r\n                body: error,\r\n            };\r\n        });\r\n}\r\n\r\nconst createRequest = method => async (url, requestConfig = {} as any) => {\r\n    const { baseUrl = \"\", params, headers = {} } = requestConfig;\r\n    const requestUrl = removeURLTrailingSlash(baseUrl.toString());\r\n\r\n    return fetch(`${requestUrl}${url}`, {\r\n        method,\r\n        headers,\r\n        body: JSON.stringify(params),\r\n    })\r\n        .then(parseResponse)\r\n        .catch(error => ({\r\n            ok: false,\r\n            status: 500,\r\n            body: error,\r\n        }));\r\n};\r\n\r\nconst createPostUrlencodedRequest = method => async (url, requestConfig = {} as any) => {\r\n    const { baseUrl = \"\", params, headers = {} } = requestConfig;\r\n    const requestUrl = removeURLTrailingSlash(baseUrl.toString());\r\n\r\n    const formBody = [];\r\n    for (const property in params) {\r\n        const encodedKey = encodeURIComponent(property);\r\n        const encodedValue = encodeURIComponent(params[property]);\r\n        formBody.push(encodedKey + \"=\" + encodedValue);\r\n    }\r\n\r\n    return fetch(`${requestUrl}${url}`, {\r\n        method,\r\n        headers,\r\n        body: formBody.join(\"&\"),\r\n    })\r\n        .then(parseResponse)\r\n        .catch(error => ({\r\n            ok: false,\r\n            status: 500,\r\n            body: error,\r\n        }));\r\n};\r\n\r\nconst createPostFileRequest = method => async (url, requestConfig = {} as any) => {\r\n    const { baseUrl = \"\", params, headers = {} } = requestConfig;\r\n    const requestUrl = removeURLTrailingSlash(baseUrl.toString());\r\n\r\n    const fd = new FormData();\r\n    fd.append(\"file\", params.file);\r\n\r\n    Object.keys(params)\r\n        .filter((key) => params[key] && params[key] !== \"\")\r\n        .forEach((key) => {\r\n            fd.append(key, params[key]);\r\n        });\r\n\r\n    return fetch(`${requestUrl}${url}`, {\r\n        method,\r\n        headers,\r\n        body: fd,\r\n    })\r\n        .then(parseResponse)\r\n        .catch(error => ({\r\n            ok: false,\r\n            status: 500,\r\n            body: error,\r\n        }));\r\n};\r\n\r\nconst put = createRequest(\"PUT\");\r\nconst remove = createRequest(\"DELETE\");\r\nconst post = createRequest(\"POST\");\r\nconst postUrlencoded = createPostUrlencodedRequest(\"POST\");\r\nconst postFile = createPostFileRequest(\"POST\");\r\n\r\nconst request = { get, put, remove, post, postUrlencoded, postFile  };\r\n\r\nexport { get, put, remove, post, postUrlencoded, postFile };\r\nexport default request;\r\n"]}