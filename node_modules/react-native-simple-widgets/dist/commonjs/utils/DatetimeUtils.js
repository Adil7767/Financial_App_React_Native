"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.differenceInDaysFromCurrentDate = exports.convertToDestinationTimezone = exports.convertTimeFormat = exports.countYears = exports.getDurationInDays = exports.isValidTime = exports.compareTime = exports.parseFormDay = exports.countNights = exports.parseAPIDay = exports.formatDestinationDate = exports.formatLongerLocalTime = exports.formatLongLocalTime = exports.formatShortLocalTime = exports.formatShortDate = exports.formatDisplayDuration = exports.formatRefundDate = exports.formatDisplayDay = exports.formatAPIDayParam = exports.formatZonedTime = exports.formatTime = exports.getDateFormat = exports.TIME_FORMAT = exports.TIMELINE_DESTINATION_TIME_FORMAT = exports.TIMELINE_LOCAL_TIME_SHORT_FORMAT = exports.TIMELINE_LOCAL_TIME_LONG_FORMAT = exports.ISO_DATE_FORMAT = exports.DATE_FORMAT_DEFAULT = exports.DURATION_FORMAT = exports.API_DATETIME_FORMAT = exports.API_DURATION_FORMAT = exports.REVERSE_SHORT_DATE_FORMAT = exports.SHORT_DATE_FORMAT = exports.API_DATE_FORMAT = exports.DAY_WITHOUT_YEAR_FORMAT = void 0;

var _dateFns = require("date-fns");

var _dateFnsTz = require("date-fns-tz");

const ISO_DATE_FORMAT = "yyyy-MM-dd";
exports.ISO_DATE_FORMAT = ISO_DATE_FORMAT;
const DAY_WITHOUT_YEAR_FORMAT = "dd MMM";
exports.DAY_WITHOUT_YEAR_FORMAT = DAY_WITHOUT_YEAR_FORMAT;
const API_DATE_FORMAT = "yyyy-MM-dd";
exports.API_DATE_FORMAT = API_DATE_FORMAT;
const API_DATETIME_FORMAT = "yyyy-MM-dd HH:mm";
exports.API_DATETIME_FORMAT = API_DATETIME_FORMAT;
const TIME_FORMAT = "HH:mm";
exports.TIME_FORMAT = TIME_FORMAT;
const REFUND_DATE_FORMAT = "ccc, dd LLLL";
const SHORT_DATE_FORMAT = "ccc, dd LLL"; // Eg. Thu, 22 Oct

exports.SHORT_DATE_FORMAT = SHORT_DATE_FORMAT;
const REVERSE_SHORT_DATE_FORMAT = "dd LLL, ccc";
exports.REVERSE_SHORT_DATE_FORMAT = REVERSE_SHORT_DATE_FORMAT;
const API_DURATION_FORMAT = "H:m'";
exports.API_DURATION_FORMAT = API_DURATION_FORMAT;
const DURATION_FORMAT = "H'h' m'm'"; // 1h 15m

exports.DURATION_FORMAT = DURATION_FORMAT;
const DATE_FORMAT_DEFAULT = "dd/MM/yyyy";
exports.DATE_FORMAT_DEFAULT = DATE_FORMAT_DEFAULT;
const TIMELINE_LOCAL_TIME_LONG_FORMAT = "d MMM, h:mmaaaaa'm'";
exports.TIMELINE_LOCAL_TIME_LONG_FORMAT = TIMELINE_LOCAL_TIME_LONG_FORMAT;
const TIMELINE_LOCAL_TIME_LONGER_FORMAT = "do MMMM yyyy, h:mmaaaaa'm'";
const TIMELINE_LOCAL_TIME_SHORT_FORMAT = "d MMM";
exports.TIMELINE_LOCAL_TIME_SHORT_FORMAT = TIMELINE_LOCAL_TIME_SHORT_FORMAT;
const TIMELINE_DESTINATION_TIME_FORMAT = "h:mma";
exports.TIMELINE_DESTINATION_TIME_FORMAT = TIMELINE_DESTINATION_TIME_FORMAT;

const formatTime = (day, timeFormat) => (0, _dateFns.format)(day, timeFormat);

exports.formatTime = formatTime;

const formatAPIDayParam = day => formatTime(day, API_DATE_FORMAT);

exports.formatAPIDayParam = formatAPIDayParam;

const formatDisplayDay = (day, dateFormat = DAY_WITHOUT_YEAR_FORMAT) => formatTime(day, dateFormat);

exports.formatDisplayDay = formatDisplayDay;

const formatRefundDate = day => formatTime(day, REFUND_DATE_FORMAT);

exports.formatRefundDate = formatRefundDate;

const formatShortDate = day => formatTime(parseAPIDay(day), SHORT_DATE_FORMAT);

exports.formatShortDate = formatShortDate;

const formatDisplayDuration = time => formatTime(time, DURATION_FORMAT);

exports.formatDisplayDuration = formatDisplayDuration;

const formatLongLocalTime = day => {
  return formatZonedTime((0, _dateFns.parseISO)(day));
};

exports.formatLongLocalTime = formatLongLocalTime;

const formatLongerLocalTime = day => {
  return formatZonedTime((0, _dateFns.parseISO)(day), TIMELINE_LOCAL_TIME_LONGER_FORMAT);
};

exports.formatLongerLocalTime = formatLongerLocalTime;

const formatShortLocalTime = day => formatTime(day, TIMELINE_LOCAL_TIME_SHORT_FORMAT);

exports.formatShortLocalTime = formatShortLocalTime;

const formatDestinationDate = day => formatTime(day, TIMELINE_DESTINATION_TIME_FORMAT);

exports.formatDestinationDate = formatDestinationDate;

const formatZonedTime = (day, pattern) => {
  return (0, _dateFns.format)(day, pattern || TIMELINE_LOCAL_TIME_LONG_FORMAT);
};

exports.formatZonedTime = formatZonedTime;

const compareTime = (time1, time2) => (0, _dateFns.compareAsc)(time1, time2);

exports.compareTime = compareTime;

const countNights = (checkIn, checkOut) => (0, _dateFns.differenceInCalendarDays)(new Date(checkOut), new Date(checkIn));

exports.countNights = countNights;

const parseAPIDay = (day, dateFormat = API_DATE_FORMAT) => (0, _dateFns.parse)(day, dateFormat, new Date());

exports.parseAPIDay = parseAPIDay;

const parseFormDay = (day, dateFormat = DATE_FORMAT_DEFAULT) => (0, _dateFns.parse)(day, dateFormat, new Date());

exports.parseFormDay = parseFormDay;

const isValidTime = (time, dateFormat = DATE_FORMAT_DEFAULT) => (0, _dateFns.isValid)(parseFormDay(time, dateFormat));

exports.isValidTime = isValidTime;

const getDateFormat = () => DATE_FORMAT_DEFAULT;

exports.getDateFormat = getDateFormat;

const getDurationInDays = (startTime, endTime) => (0, _dateFns.differenceInDays)(parseAPIDay(endTime), parseAPIDay(startTime));

exports.getDurationInDays = getDurationInDays;

const countYears = (startDate, endDate) => (0, _dateFns.differenceInYears)(new Date(endDate), new Date(startDate));

exports.countYears = countYears;

const convertTimeFormat = (time, fromFormat, toFormat) => {
  const parseTime = (0, _dateFns.parse)(time, fromFormat, new Date());
  return (0, _dateFns.format)(parseTime, toFormat);
};

exports.convertTimeFormat = convertTimeFormat;

const convertToDestinationTimezone = (date, destinationTimezone) => {
  return (0, _dateFnsTz.utcToZonedTime)((0, _dateFns.parseISO)(date), destinationTimezone);
};

exports.convertToDestinationTimezone = convertToDestinationTimezone;

const differenceInDaysFromCurrentDate = checkin => (0, _dateFns.differenceInDays)(parseAPIDay(checkin), (0, _dateFns.startOfDay)(new Date()));

exports.differenceInDaysFromCurrentDate = differenceInDaysFromCurrentDate;
//# sourceMappingURL=DatetimeUtils.js.map