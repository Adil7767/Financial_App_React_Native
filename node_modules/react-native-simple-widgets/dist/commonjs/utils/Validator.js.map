{"version":3,"sources":["Validator.ts"],"names":["EmailMaxLength","validators","required","value","maxLength","rule","length","minLength","pattern","test","patternOptional","maximumDate","format","minimumDate","dateValid","emailLength","values","split","maxNumberOfEmail","EmailRegex","MultipleEmailRegex","NumberRegex","EnglishAlphabetsAndWhiteSpace","Alphanumeric","AlphanumericExtended","ImageURLRegex"],"mappings":";;;;;;;AAAA;;AAEA,MAAMA,cAAc,GAAG,EAAvB;AAEA,MAAMC,UAAU,GAAG;AACfC,EAAAA,QAAQ,EAAEC,KAAK,IAAI,CAAC,CAACA,KADN;AAEfC,EAAAA,SAAS,EAAE,CAACD,KAAD,EAAQE,IAAR,KAAkBF,KAAK,GAAGA,KAAK,CAACG,MAAN,IAAgBD,IAAI,CAACF,KAAxB,GAAgC,IAFnD;AAGfI,EAAAA,SAAS,EAAE,CAACJ,KAAD,EAAQE,IAAR,KAAkBF,KAAK,GAAGA,KAAK,CAACG,MAAN,IAAgBD,IAAI,CAACF,KAAxB,GAAgC,KAHnD;AAIfK,EAAAA,OAAO,EAAE,CAACL,KAAD,EAAQE,IAAR,KAAiBA,IAAI,CAACF,KAAL,CAAWM,IAAX,CAAgBN,KAAhB,CAJX;AAKfO,EAAAA,eAAe,EAAE,CAACP,KAAD,EAAQE,IAAR,KACbF,KAAK,KAAK,EAAV,GAAe,IAAf,GAAsBE,IAAI,CAACF,KAAL,CAAWM,IAAX,CAAgBN,KAAhB,CANX;AAOfQ,EAAAA,WAAW,EAAE,CAACR,KAAD,EAAQE,IAAR,KACTF,KAAK,IAAIE,IAAI,CAACF,KAAd,GACM,gCAAYE,IAAI,CAACF,KAAjB,EAAwB,iCAAaA,KAAb,EAAoBE,IAAI,CAACO,MAAzB,CAAxB,IAA4D,CAAC,CADnE,GAEM,IAVK;AAWfC,EAAAA,WAAW,EAAE,CAACV,KAAD,EAAQE,IAAR,KACTF,KAAK,IAAIE,IAAI,CAACF,KAAd,GACM,gCAAYE,IAAI,CAACF,KAAjB,EAAwB,iCAAaA,KAAb,EAAoBE,IAAI,CAACO,MAAzB,CAAxB,IAA4D,CADlE,GAEM,IAdK;AAefE,EAAAA,SAAS,EAAE,CAACX,KAAD,EAAQE,IAAR,KAAkBF,KAAK,GAAG,gCAAYA,KAAZ,EAAmBE,IAAI,CAACO,MAAxB,CAAH,GAAqC,IAfxD;AAgBfG,EAAAA,WAAW,EAAEZ,KAAK,IAAI;AAClB,QAAI,CAACA,KAAL,EAAY,OAAO,IAAP;AACZ,UAAMa,MAAM,GAAGb,KAAK,CAACc,KAAN,CAAY,GAAZ,CAAf;AACA,WAAO,EACHD,MAAM,CAAC,CAAD,CAAN,CAAUV,MAAV,GAAmBN,cAAnB,IACCgB,MAAM,CAACV,MAAP,GAAgB,CAAhB,IAAqBU,MAAM,CAAC,CAAD,CAAN,CAAUV,MAAV,GAAmBN,cAFtC,CAAP;AAIH,GAvBc;AAwBfkB,EAAAA,gBAAgB,EAAE,CAACf,KAAD,EAAQE,IAAR,KAAiB;AAC/B,QAAI,CAACF,KAAL,EAAY,OAAO,IAAP;AACZ,UAAMa,MAAM,GAAGb,KAAK,CAACc,KAAN,CAAY,GAAZ,CAAf;AACA,WAAOD,MAAM,CAACV,MAAP,IAAiBD,IAAI,CAACF,KAA7B;AACH;AA5Bc,CAAnB;eA+BeF,U,EAEf;;;AACO,MAAMkB,UAAU,GAAG,6KAAnB,C,CACP;;;AACO,MAAMC,kBAAkB,GAAG,yIAA3B,C,CACP;;;AACO,MAAMC,WAAW,GAAG,UAApB,C,CACP;;;AACO,MAAMC,6BAA6B,GAAG,cAAtC,C,CACP;;;AACO,MAAMC,YAAY,GAAG,gBAArB,C,CACP;;;AACO,MAAMC,oBAAoB,GAAG,iBAA7B,C,CACP;;;AACO,MAAMC,aAAa,GAAG,2CAAtB","sourcesContent":["import { compareTime, parseFormDay, isValidTime } from \"./DatetimeUtils\";\n\nconst EmailMaxLength = 64;\n\nconst validators = {\n    required: value => !!value,\n    maxLength: (value, rule) => (value ? value.length <= rule.value : true),\n    minLength: (value, rule) => (value ? value.length >= rule.value : false),\n    pattern: (value, rule) => rule.value.test(value),\n    patternOptional: (value, rule) =>\n        value === \"\" ? true : rule.value.test(value),\n    maximumDate: (value, rule) =>\n        value && rule.value\n            ? compareTime(rule.value, parseFormDay(value, rule.format)) > -1\n            : true,\n    minimumDate: (value, rule) =>\n        value && rule.value\n            ? compareTime(rule.value, parseFormDay(value, rule.format)) < 1\n            : true,\n    dateValid: (value, rule) => (value ? isValidTime(value, rule.format) : true),\n    emailLength: value => {\n        if (!value) return true;\n        const values = value.split(\"@\");\n        return !(\n            values[0].length > EmailMaxLength ||\n            (values.length > 1 && values[1].length > EmailMaxLength)\n        );\n    },\n    maxNumberOfEmail: (value, rule) => {\n        if (!value) return true;\n        const values = value.split(\",\");\n        return values.length <= rule.value;\n    },\n};\n\nexport default validators;\n\n// @ts-ignore\nexport const EmailRegex = /^(?=.{1,64}@)(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(?!.{65})(((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,})))$/;\n// @ts-ignore\nexport const MultipleEmailRegex = /^(([a-zA-Z0-9_\\-.]+)@([a-zA-Z0-9_\\-.]+)\\.([a-zA-Z]{2,5}){1,25})+([,.](([a-zA-Z0-9_\\-.]+)@([a-zA-Z0-9_\\-.]+)\\.([a-zA-Z]{2,5}){1,25})+)*$/;\n// @ts-ignore\nexport const NumberRegex = /^[0-9]+$/;\n// @ts-ignore\nexport const EnglishAlphabetsAndWhiteSpace = /^[A-Za-z ]+$/;\n// @ts-ignore\nexport const Alphanumeric = /^[A-Za-z0-9]+$/;\n// @ts-ignore\nexport const AlphanumericExtended = /^[A-Za-z .,@]+$/;\n// @ts-ignore\nexport const ImageURLRegex = /^(http(s?):).*\\.(?:jp(e?)g|jpg|gif|png)/gi;\n"]}