"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDiscountPercentageLocale = exports.convertTagToTranslationID = exports.getDefaultNationality = exports.getCountryFromLocale = exports.createScopedTranslate = exports.getRoomBedTypeAndRoomSize = exports.getDisplayAddress = exports.listFormat = exports.numberFormat = void 0;

var _LocaleProvider = require("./LocaleProvider");

require("intl");

require("intl/locale-data/jsonp/en");

require("intl/locale-data/jsonp/vi");

require("intl-list-format");

require("intl-list-format/locale-data/en");

require("intl-list-format/locale-data/vi");

const defaultLocale = "en";

const numberFormat = (number = 0, formatOptions = {}, locale = (0, _LocaleProvider.getCurrentLocale)() || defaultLocale) => new Intl.NumberFormat(locale, {
  style: "decimal",
  ...formatOptions
}).format(number);

exports.numberFormat = numberFormat;

const listFormat = (list = [], formatOptions = {}, locale = (0, _LocaleProvider.getCurrentLocale)() || defaultLocale) => // @ts-ignore
new Intl.ListFormat(locale, {
  style: "long",
  type: "unit",
  ...formatOptions
}).format(list);

exports.listFormat = listFormat;

const getDisplayAddress = ({
  line_1 = "",
  line_2 = "",
  city = "",
  state_province_name = "",
  country = "",
  postal_code = ""
}) => {
  const addressArray = [line_1, line_2, city, state_province_name, country];
  return "".concat(addressArray.map(item => item.trim()).filter(Boolean).join(", "), " ").concat(postal_code);
};

exports.getDisplayAddress = getDisplayAddress;

const getRoomBedTypeAndRoomSize = ({
  bedSize,
  squareMeterArea
}) => "".concat(bedSize ? bedSize : "").concat(bedSize && squareMeterArea ? " | " : "").concat(squareMeterArea ? (0, _LocaleProvider.translate)("roomCard.squareMeter", {
  squareMeterArea
}) : "");

exports.getRoomBedTypeAndRoomSize = getRoomBedTypeAndRoomSize;

const createScopedTranslate = scopedKey => (key, ...restArgs) => (0, _LocaleProvider.translate)("".concat(scopedKey, ".").concat(key), ...restArgs);

exports.createScopedTranslate = createScopedTranslate;

const getCountryFromLocale = ({
  languageId,
  countries
}) => {
  const languageCountryCode = languageId.split("-")[1];
  const country = countries.find(({
    countryCode
  }) => countryCode === languageCountryCode.toUpperCase());
  return country;
};

exports.getCountryFromLocale = getCountryFromLocale;

const getDefaultNationality = ({
  countryCode,
  languageId,
  countries
}) => {
  let defaultNationality = countries.find(({
    countryCode: cc
  }) => cc === countryCode) || {
    countryCode: "VN"
  };

  if (languageId && languageId !== "en-gb") {
    defaultNationality = getCountryFromLocale({
      languageId,
      countries
    }) || defaultNationality;
  }

  return defaultNationality;
};

exports.getDefaultNationality = getDefaultNationality;

const convertTagToTranslationID = tag => {
  if (typeof tag === "string") {
    return tag;
  }

  const {
    translationId = "",
    numberOfRooms,
    value = ""
  } = tag;
  const translatedTag = (0, _LocaleProvider.translate)(translationId, {
    smart_count: numberOfRooms
  });

  if (translatedTag && translatedTag !== translationId) {
    return translatedTag;
  }

  return value;
};

exports.convertTagToTranslationID = convertTagToTranslationID;
const CHINA_LOCALES = ["zh-cn", "zh-tw", "zh-hk"];

const getDiscountPercentageLocale = (percent, locale) => {
  if (CHINA_LOCALES.includes(locale)) {
    return (100 - percent) / 10;
  }

  return percent;
};

exports.getDiscountPercentageLocale = getDiscountPercentageLocale;
//# sourceMappingURL=LocaleHelper.js.map