"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.getCurrentLocale = exports.translate = exports.setPolyglot = exports.setCurrentLocale = exports.LocaleProviderCtx = void 0;

var React = _interopRequireWildcard(require("react"));

var _nodePolyglot = _interopRequireDefault(require("node-polyglot"));

var _locales = _interopRequireDefault(require("./locales"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const LocaleProviderCtx = /*#__PURE__*/React.createContext({});
exports.LocaleProviderCtx = LocaleProviderCtx;
const defaultLocale = "en";
let currentLocale = defaultLocale;
let polyglot = new _nodePolyglot.default({
  locale: currentLocale,
  phrases: _locales.default.en
});

const setCurrentLocale = locale => {
  currentLocale = locale;
};

exports.setCurrentLocale = setCurrentLocale;

const setPolyglot = newPolyglot => {
  polyglot = newPolyglot;
};

exports.setPolyglot = setPolyglot;

const translate = (key, option = {}) => {
  return polyglot ? polyglot.t(key, option) : key;
};

exports.translate = translate;

const getCurrentLocale = () => currentLocale;

exports.getCurrentLocale = getCurrentLocale;

class LocaleProvider extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      polyglot
    });

    _defineProperty(this, "updatePolyglot", () => {
      const {
        locale = "en",
        isInit,
        fetchLocaleJson
      } = this.props;
      if (!isInit) return;

      if (typeof fetchLocaleJson === "function") {
        fetchLocaleJson().then(result => {
          if (result.ok) {
            setCurrentLocale(locale);
            polyglot = new _nodePolyglot.default({
              locale: locale,
              phrases: result.data
            });
            this.setState({
              polyglot
            });
          } else {
            this.setDefaultPolyglot();
          }
        }).catch(() => {
          this.setDefaultPolyglot();
        });
      }
    });

    _defineProperty(this, "setDefaultPolyglot", () => {
      setCurrentLocale(defaultLocale);
      polyglot = new _nodePolyglot.default({
        locale: defaultLocale,
        phrases: _locales.default.en
      });
      this.setState({
        polyglot
      });
    });
  }

  componentDidMount() {
    this.updatePolyglot();
  }

  componentDidUpdate(prevProps) {
    const isFilterInitChanged = prevProps.isInit !== this.props.isInit;
    const isLocaleChanged = prevProps.locale !== this.props.locale;

    if (this.props.isInit && (isFilterInitChanged || isLocaleChanged)) {
      this.updatePolyglot();
    }
  }

  render() {
    const {
      children
    } = this.props;
    return /*#__PURE__*/React.createElement(LocaleProviderCtx.Provider, {
      value: polyglot
    }, children);
  }

}

var _default = LocaleProvider;
exports.default = _default;
//# sourceMappingURL=LocaleProvider.js.map