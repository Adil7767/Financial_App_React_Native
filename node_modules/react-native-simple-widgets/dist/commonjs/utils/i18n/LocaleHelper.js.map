{"version":3,"sources":["LocaleHelper.tsx"],"names":["defaultLocale","numberFormat","number","formatOptions","locale","Intl","NumberFormat","style","format","listFormat","list","ListFormat","type","getDisplayAddress","line_1","line_2","city","state_province_name","country","postal_code","addressArray","map","item","trim","filter","Boolean","join","getRoomBedTypeAndRoomSize","bedSize","squareMeterArea","createScopedTranslate","scopedKey","key","restArgs","getCountryFromLocale","languageId","countries","languageCountryCode","split","find","countryCode","toUpperCase","getDefaultNationality","defaultNationality","cc","convertTagToTranslationID","tag","translationId","numberOfRooms","value","translatedTag","smart_count","CHINA_LOCALES","getDiscountPercentageLocale","percent","includes"],"mappings":"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","sourcesContent":["import { getCurrentLocale, translate } from \"./LocaleProvider\";\r\nimport \"intl\";\r\nimport \"intl/locale-data/jsonp/en\";\r\nimport \"intl/locale-data/jsonp/vi\";\r\nimport \"intl-list-format\";\r\nimport \"intl-list-format/locale-data/en\";\r\nimport \"intl-list-format/locale-data/vi\";\r\n\r\nconst defaultLocale = \"en\";\r\nexport const numberFormat = (\r\n    number = 0,\r\n    formatOptions = {},\r\n    locale = getCurrentLocale() || defaultLocale,\r\n) =>\r\n    new Intl.NumberFormat(locale, { style: \"decimal\", ...formatOptions }).format(\r\n        number\r\n    );\r\n\r\nexport const listFormat = (\r\n    list = [],\r\n    formatOptions = {},\r\n    locale = getCurrentLocale() || defaultLocale,\r\n) =>\r\n    // @ts-ignore\r\n    new Intl.ListFormat(locale, {\r\n        style: \"long\",\r\n        type: \"unit\",\r\n        ...formatOptions,\r\n    }).format(list);\r\n\r\nexport const getDisplayAddress = ({\r\n    line_1 = \"\",\r\n    line_2 = \"\",\r\n    city = \"\",\r\n    state_province_name = \"\",\r\n    country = \"\",\r\n    postal_code = \"\",\r\n}) => {\r\n    const addressArray = [line_1, line_2, city, state_province_name, country];\r\n    return `${addressArray\r\n        .map(item => item.trim())\r\n        .filter(Boolean)\r\n        .join(\", \")} ${postal_code}`;\r\n};\r\n\r\nexport const getRoomBedTypeAndRoomSize = ({ bedSize, squareMeterArea }) =>\r\n    `${bedSize ? bedSize : \"\"}${bedSize && squareMeterArea ? \" | \" : \"\"}${squareMeterArea\r\n        ? translate(\"roomCard.squareMeter\", { squareMeterArea })\r\n        : \"\"\r\n    }`;\r\n\r\nexport const createScopedTranslate = scopedKey => (key, ...restArgs) =>\r\n    translate(`${scopedKey}.${key}`, ...restArgs);\r\n\r\nexport const getCountryFromLocale = ({ languageId, countries }) => {\r\n    const languageCountryCode = languageId.split(\"-\")[1];\r\n    const country = countries.find(\r\n        ({ countryCode }) => countryCode === languageCountryCode.toUpperCase()\r\n    );\r\n    return country;\r\n};\r\n\r\nexport const getDefaultNationality = ({\r\n    countryCode,\r\n    languageId,\r\n    countries,\r\n}) => {\r\n    let defaultNationality = countries.find(\r\n        ({ countryCode: cc }) => cc === countryCode\r\n    ) || { countryCode: \"VN\" };\r\n\r\n    if (languageId && languageId !== \"en-gb\") {\r\n        defaultNationality =\r\n            getCountryFromLocale({ languageId, countries }) || defaultNationality;\r\n    }\r\n\r\n    return defaultNationality;\r\n};\r\n\r\nexport const convertTagToTranslationID = tag => {\r\n    if (typeof tag === \"string\") {\r\n        return tag;\r\n    }\r\n    const { translationId = \"\", numberOfRooms, value = \"\" } = tag;\r\n    const translatedTag = translate(translationId, {\r\n        smart_count: numberOfRooms,\r\n    });\r\n    if (translatedTag && translatedTag !== translationId) {\r\n        return translatedTag;\r\n    }\r\n    return value;\r\n};\r\n\r\nconst CHINA_LOCALES = [\"zh-cn\", \"zh-tw\", \"zh-hk\"];\r\nexport const getDiscountPercentageLocale = (percent, locale) => {\r\n    if (CHINA_LOCALES.includes(locale)) {\r\n        return (100 - percent) / 10;\r\n    }\r\n    return percent;\r\n};\r\n"]}