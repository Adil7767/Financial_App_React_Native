{"version":3,"sources":["DatetimeUtils.ts"],"names":["ISO_DATE_FORMAT","DAY_WITHOUT_YEAR_FORMAT","API_DATE_FORMAT","API_DATETIME_FORMAT","TIME_FORMAT","REFUND_DATE_FORMAT","SHORT_DATE_FORMAT","REVERSE_SHORT_DATE_FORMAT","API_DURATION_FORMAT","DURATION_FORMAT","DATE_FORMAT_DEFAULT","TIMELINE_LOCAL_TIME_LONG_FORMAT","TIMELINE_LOCAL_TIME_LONGER_FORMAT","TIMELINE_LOCAL_TIME_SHORT_FORMAT","TIMELINE_DESTINATION_TIME_FORMAT","formatTime","day","timeFormat","formatAPIDayParam","formatDisplayDay","dateFormat","formatRefundDate","formatShortDate","parseAPIDay","formatDisplayDuration","time","formatLongLocalTime","formatZonedTime","formatLongerLocalTime","formatShortLocalTime","formatDestinationDate","pattern","compareTime","time1","time2","countNights","checkIn","checkOut","Date","parseFormDay","isValidTime","getDateFormat","getDurationInDays","startTime","endTime","countYears","startDate","endDate","convertTimeFormat","fromFormat","toFormat","parseTime","convertToDestinationTimezone","date","destinationTimezone","differenceInDaysFromCurrentDate","checkin"],"mappings":"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","sourcesContent":["import {\n    format,\n    parse,\n    parseISO,\n    differenceInCalendarDays,\n    differenceInYears,\n    differenceInDays,\n    compareAsc,\n    isValid,\n    startOfDay,\n} from \"date-fns\";\nimport { utcToZonedTime } from \"date-fns-tz\";\n\nconst ISO_DATE_FORMAT = \"yyyy-MM-dd\";\nconst DAY_WITHOUT_YEAR_FORMAT = \"dd MMM\";\nconst API_DATE_FORMAT = \"yyyy-MM-dd\";\nconst API_DATETIME_FORMAT = \"yyyy-MM-dd HH:mm\";\nconst TIME_FORMAT = \"HH:mm\";\nconst REFUND_DATE_FORMAT = \"ccc, dd LLLL\";\nconst SHORT_DATE_FORMAT = \"ccc, dd LLL\"; // Eg. Thu, 22 Oct\nconst REVERSE_SHORT_DATE_FORMAT = \"dd LLL, ccc\";\nconst API_DURATION_FORMAT = \"H:m'\";\nconst DURATION_FORMAT = \"H'h' m'm'\"; // 1h 15m\nconst DATE_FORMAT_DEFAULT = \"dd/MM/yyyy\";\nconst TIMELINE_LOCAL_TIME_LONG_FORMAT = \"d MMM, h:mmaaaaa'm'\";\nconst TIMELINE_LOCAL_TIME_LONGER_FORMAT = \"do MMMM yyyy, h:mmaaaaa'm'\";\nconst TIMELINE_LOCAL_TIME_SHORT_FORMAT = \"d MMM\";\nconst TIMELINE_DESTINATION_TIME_FORMAT = \"h:mma\";\n\nconst formatTime = (day, timeFormat) => format(day, timeFormat);\nconst formatAPIDayParam = day => formatTime(day, API_DATE_FORMAT);\nconst formatDisplayDay = (day, dateFormat = DAY_WITHOUT_YEAR_FORMAT) =>\n    formatTime(day, dateFormat);\nconst formatRefundDate = day => formatTime(day, REFUND_DATE_FORMAT);\nconst formatShortDate = day => formatTime(parseAPIDay(day), SHORT_DATE_FORMAT);\nconst formatDisplayDuration = time => formatTime(time, DURATION_FORMAT);\n\nconst formatLongLocalTime = day => {\n    return formatZonedTime(parseISO(day));\n};\n\nconst formatLongerLocalTime = day => {\n    return formatZonedTime(parseISO(day), TIMELINE_LOCAL_TIME_LONGER_FORMAT);\n};\n\nconst formatShortLocalTime = day =>\n    formatTime(day, TIMELINE_LOCAL_TIME_SHORT_FORMAT);\nconst formatDestinationDate = day =>\n    formatTime(day, TIMELINE_DESTINATION_TIME_FORMAT);\n\nconst formatZonedTime = (day, pattern?) => {\n    return format(day, pattern || TIMELINE_LOCAL_TIME_LONG_FORMAT);\n};\n\nconst compareTime = (time1, time2) => compareAsc(time1, time2);\n\nconst countNights = (checkIn, checkOut) =>\n    differenceInCalendarDays(new Date(checkOut), new Date(checkIn));\n\nconst parseAPIDay = (day, dateFormat = API_DATE_FORMAT) =>\n    parse(day, dateFormat, new Date());\n\nconst parseFormDay = (day, dateFormat = DATE_FORMAT_DEFAULT) =>\n    parse(day, dateFormat, new Date());\n\nconst isValidTime = (time, dateFormat = DATE_FORMAT_DEFAULT) =>\n    isValid(parseFormDay(time, dateFormat));\n\nconst getDateFormat = () => DATE_FORMAT_DEFAULT;\n\nconst getDurationInDays = (startTime, endTime) =>\n    differenceInDays(parseAPIDay(endTime), parseAPIDay(startTime));\n\nconst countYears = (startDate, endDate) =>\n    differenceInYears(new Date(endDate), new Date(startDate));\n\nconst convertTimeFormat = (time, fromFormat, toFormat) => {\n    const parseTime = parse(time, fromFormat, new Date());\n    return format(parseTime, toFormat);\n};\n\nconst convertToDestinationTimezone = (date, destinationTimezone) => {\n    return utcToZonedTime(parseISO(date), destinationTimezone);\n};\n\nconst differenceInDaysFromCurrentDate = checkin =>\n    differenceInDays(parseAPIDay(checkin), startOfDay(new Date()));\n\nexport {\n    DAY_WITHOUT_YEAR_FORMAT,\n    API_DATE_FORMAT,\n    SHORT_DATE_FORMAT,\n    REVERSE_SHORT_DATE_FORMAT,\n    API_DURATION_FORMAT,\n    API_DATETIME_FORMAT,\n    DURATION_FORMAT,\n    DATE_FORMAT_DEFAULT,\n    ISO_DATE_FORMAT,\n    TIMELINE_LOCAL_TIME_LONG_FORMAT,\n    TIMELINE_LOCAL_TIME_SHORT_FORMAT,\n    TIMELINE_DESTINATION_TIME_FORMAT,\n    TIME_FORMAT,\n    getDateFormat,\n    formatTime,\n    formatZonedTime,\n    formatAPIDayParam,\n    formatDisplayDay,\n    formatRefundDate,\n    formatDisplayDuration,\n    formatShortDate,\n    formatShortLocalTime,\n    formatLongLocalTime,\n    formatLongerLocalTime,\n    formatDestinationDate,\n    parseAPIDay,\n    countNights,\n    parseFormDay,\n    compareTime,\n    isValidTime,\n    getDurationInDays,\n    countYears,\n    convertTimeFormat,\n    convertToDestinationTimezone,\n    differenceInDaysFromCurrentDate,\n};\n"]}