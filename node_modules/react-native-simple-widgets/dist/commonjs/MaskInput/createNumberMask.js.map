{"version":3,"sources":["createNumberMask.ts"],"names":["createNumberMask","props","delimiter","precision","prefix","separator","value","numericValue","replace","mask","split","map","length","splice","delimiters","Math","ceil","i","position","createNumberMaskByLocale","locale","decimalSeparator"],"mappings":";;;;;;;AAGA;;AAEA,SAASA,gBAAT,CAA0BC,KAA1B,EAA+D;AAC3D,QAAM;AAAEC,IAAAA,SAAS,GAAG,GAAd;AAAmBC,IAAAA,SAAS,GAAG,CAA/B;AAAkCC,IAAAA,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA3C;AAA4DC,IAAAA,SAAS,GAAG;AAAxE,MACFJ,KAAK,IAAI,EADb;AAGA,SAAQK,KAAD,IAAoB;AACvB,UAAMC,YAAY,GAAG,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEE,OAAP,CAAe,MAAf,EAAuB,EAAvB,MAA8B,EAAnD;AAEA,UAAMC,IAAe,GAAGF,YAAY,CAACG,KAAb,CAAmB,EAAnB,EAAuBC,GAAvB,CAA2B,MAAM,IAAjC,CAAxB;;AAEA,QAAIR,SAAS,GAAG,CAAZ,IAAiBM,IAAI,CAACG,MAAL,GAAcT,SAAnC,EAA8C;AAC1CM,MAAAA,IAAI,CAACI,MAAL,CAAY,CAACV,SAAb,EAAwB,CAAxB,EAA2BE,SAA3B;AACH;;AAED,UAAMS,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAU,CAACT,YAAY,CAACK,MAAb,GAAsBT,SAAvB,IAAoC,CAA9C,IAAmD,CAAtE;;AAEA,SAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIH,UAArB,EAAiCG,CAAC,EAAlC,EAAsC;AAClC,YAAMC,QAAQ,GAAG,CAACf,SAAD,GAAac,CAAC,GAAG,CAAjB,IAAsBd,SAAS,GAAG,CAAZ,GAAgBc,CAAhB,GAAoBA,CAAC,GAAG,CAA9C,CAAjB;AACAR,MAAAA,IAAI,CAACI,MAAL,CAAYK,QAAZ,EAAsB,CAAtB,EAAyBhB,SAAzB;AACH;;AAED,WAAO,CAAC,GAAGE,MAAJ,EAAY,GAAGK,IAAf,CAAP;AACH,GAjBD;AAkBH;;AAEM,MAAMU,wBAAwB,GAAIC,MAAD,IAAiB;AACrD,QAAMC,gBAAgB,GAAG,oDAA+BD,MAA/B,CAAzB;AAEA,SAAOpB,gBAAgB,CAAC;AACpBI,IAAAA,MAAM,EAAE,EADY;AAEpBC,IAAAA,SAAS,EAAEgB,gBAFS;AAGpBnB,IAAAA,SAAS,EAAEmB,gBAAgB,KAAK,GAArB,GAA2B,GAA3B,GAAiC,GAHxB;AAIpBlB,IAAAA,SAAS,EAAEkB,gBAAgB,KAAK,GAArB,GAA2B,CAA3B,GAA+B;AAJtB,GAAD,CAAvB;AAMH,CATM;;;eAWQrB,gB","sourcesContent":["import type { MaskArray } from \"./formatWithMask.types\";\nimport type { Mask } from \"./formatWithMask.types\";\nimport type { CreateNumberMaskProps } from \"./createNumberMask.types\";\nimport { localeCurrencyDecimalSeparator } from \"../utils/currencyformat\";\n\nfunction createNumberMask(props?: CreateNumberMaskProps): Mask {\n    const { delimiter = \".\", precision = 2, prefix = [\"R\", \"$\", \" \"], separator = \",\" } =\n        props || {};\n\n    return (value?: string) => {\n        const numericValue = value?.replace(/\\D+/g, \"\") || \"\";\n\n        const mask: MaskArray = numericValue.split(\"\").map(() => /\\d/);\n\n        if (precision > 0 && mask.length > precision) {\n            mask.splice(-precision, 0, separator);\n        }\n\n        const delimiters = Math.ceil((numericValue.length - precision) / 3) - 1;\n\n        for (let i = 1; i <= delimiters; i++) {\n            const position = -precision - i * 3 - (precision > 0 ? i : i - 1);\n            mask.splice(position, 0, delimiter);\n        }\n\n        return [...prefix, ...mask];\n    };\n}\n\nexport const createNumberMaskByLocale = (locale): any => {\n    const decimalSeparator = localeCurrencyDecimalSeparator(locale);\n\n    return createNumberMask({\n        prefix: [],\n        separator: decimalSeparator,\n        delimiter: decimalSeparator === \",\" ? \".\" : \",\",\n        precision: decimalSeparator === \",\" ? 0 : 2,\n    });\n};\n\nexport default createNumberMask;\n"]}