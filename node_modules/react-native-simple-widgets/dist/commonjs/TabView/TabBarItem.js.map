{"version":3,"sources":["TabBarItem.tsx"],"names":["DEFAULT_ACTIVE_COLOR","DEFAULT_INACTIVE_COLOR","TabBarItem","React","Component","position","routes","tabIndex","length","inputRange","map","_","i","interpolate","outputRange","render","route","navigationState","renderLabel","renderLabelPassed","renderIcon","renderBadge","getLabelText","getTestID","getAccessibilityLabel","getAccessible","activeColor","inactiveColor","pressColor","pressOpacity","labelStyle","style","onLayout","onPress","onLongPress","props","indexOf","isFocused","index","activeOpacity","getActiveOpacity","inactiveOpacity","getInactiveOpacity","icon","label","activeIcon","focused","color","inactiveIcon","styles","opacity","StyleSheet","absoluteFill","undefined","labelText","marginTop","activeLabel","inactiveLabel","tabStyle","flatten","isWidthSet","width","tabContainerStyle","flex","scene","accessibilityLabel","badge","borderless","selected","item","create","margin","backgroundColor","alignItems","justifyContent","padding","minHeight","top","right"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n    Animated,\n    StyleSheet,\n    View,\n    StyleProp,\n    LayoutChangeEvent,\n    TextStyle,\n    ViewStyle,\n} from \"react-native\";\nimport PlatformPressable from \"./PlatformPressable\";\nimport { Scene, Route, NavigationState } from \"./types\";\n\nexport type Props<T extends Route> = {\n  position: Animated.AnimatedInterpolation;\n  route: T;\n  navigationState: NavigationState<T>;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText: (scene: Scene<T>) => string | undefined;\n  getAccessible: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel: (scene: Scene<T>) => string | undefined;\n  getTestID: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderIcon?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  onPress: () => void;\n  onLongPress: () => void;\n  labelStyle?: StyleProp<TextStyle>;\n  style: StyleProp<ViewStyle>;\n};\n\nconst DEFAULT_ACTIVE_COLOR = \"rgba(255, 255, 255, 1)\";\nconst DEFAULT_INACTIVE_COLOR = \"rgba(255, 255, 255, 0.7)\";\n\nexport default class TabBarItem<T extends Route> extends React.Component<\n  Props<T>\n> {\n  private getActiveOpacity = (\n      position: Animated.AnimatedInterpolation,\n      routes: Route[],\n      tabIndex: number\n  ) => {\n      if (routes.length > 1) {\n          const inputRange = routes.map((_, i) => i);\n\n          return position.interpolate({\n              inputRange,\n              outputRange: inputRange.map((i) => (i === tabIndex ? 1 : 0)),\n          });\n      } else {\n          return 1;\n      }\n  };\n\n  private getInactiveOpacity = (\n      position: Animated.AnimatedInterpolation,\n      routes: Route[],\n      tabIndex: number\n  ) => {\n      if (routes.length > 1) {\n          const inputRange = routes.map((_: Route, i: number) => i);\n\n          return position.interpolate({\n              inputRange,\n              outputRange: inputRange.map((i: number) => (i === tabIndex ? 0 : 1)),\n          });\n      } else {\n          return 0;\n      }\n  };\n\n  render() {\n      const {\n          route,\n          position,\n          navigationState,\n          renderLabel: renderLabelPassed,\n          renderIcon,\n          renderBadge,\n          getLabelText,\n          getTestID,\n          getAccessibilityLabel,\n          getAccessible,\n          activeColor = DEFAULT_ACTIVE_COLOR,\n          inactiveColor = DEFAULT_INACTIVE_COLOR,\n          pressColor,\n          pressOpacity,\n          labelStyle,\n          style,\n          onLayout,\n          onPress,\n          onLongPress,\n      } = this.props;\n\n      const tabIndex = navigationState.routes.indexOf(route);\n      const isFocused = navigationState.index === tabIndex;\n\n      const activeOpacity = this.getActiveOpacity(\n          position,\n          navigationState.routes,\n          tabIndex\n      );\n      const inactiveOpacity = this.getInactiveOpacity(\n          position,\n          navigationState.routes,\n          tabIndex\n      );\n\n      let icon: React.ReactNode | null = null;\n      let label: React.ReactNode | null = null;\n\n      if (renderIcon) {\n          const activeIcon = renderIcon({\n              route,\n              focused: true,\n              color: activeColor,\n          });\n          const inactiveIcon = renderIcon({\n              route,\n              focused: false,\n              color: inactiveColor,\n          });\n\n          if (inactiveIcon != null && activeIcon != null) {\n              icon = (\n                  <View style={styles.icon}>\n                      <Animated.View style={{ opacity: inactiveOpacity }}>\n                          {inactiveIcon}\n                      </Animated.View>\n                      <Animated.View\n                          style={[StyleSheet.absoluteFill, { opacity: activeOpacity }]}\n                      >\n                          {activeIcon}\n                      </Animated.View>\n                  </View>\n              );\n          }\n      }\n\n      const renderLabel =\n      renderLabelPassed !== undefined\n          ? renderLabelPassed\n          : ({ route, color }: { route: T; color: string }) => {\n              const labelText = getLabelText({ route });\n\n              if (typeof labelText === \"string\") {\n                  return (\n                      <Animated.Text\n                          style={[\n                              styles.label,\n                              icon ? { marginTop: 0 } : null,\n                              labelStyle,\n                              { color },\n                          ]}\n                      >\n                          {labelText}\n                      </Animated.Text>\n                  );\n              }\n\n              return labelText;\n          };\n\n      if (renderLabel) {\n          const activeLabel = renderLabel({\n              route,\n              focused: true,\n              color: activeColor,\n          });\n          const inactiveLabel = renderLabel({\n              route,\n              focused: false,\n              color: inactiveColor,\n          });\n\n          label = (\n              <View>\n                  <Animated.View style={{ opacity: inactiveOpacity }}>\n                      {inactiveLabel}\n                  </Animated.View>\n                  <Animated.View\n                      style={[StyleSheet.absoluteFill, { opacity: activeOpacity }]}\n                  >\n                      {activeLabel}\n                  </Animated.View>\n              </View>\n          );\n      }\n\n      const tabStyle = StyleSheet.flatten(style);\n      const isWidthSet = tabStyle?.width !== undefined;\n      const tabContainerStyle: ViewStyle | null = isWidthSet ? null : { flex: 1 };\n\n      const scene = { route };\n\n      let accessibilityLabel = getAccessibilityLabel(scene);\n\n      accessibilityLabel =\n      typeof accessibilityLabel !== \"undefined\"\n          ? accessibilityLabel\n          : getLabelText(scene);\n\n      const badge = renderBadge ? renderBadge(scene) : null;\n\n      return (\n          <PlatformPressable\n              android_ripple={{ borderless: true }}\n              testID={getTestID(scene)}\n              accessible={getAccessible(scene)}\n              accessibilityLabel={accessibilityLabel}\n              accessibilityRole=\"tab\"\n              accessibilityState={{ selected: isFocused }}\n              // @ts-ignore: this is to support older React Native versions\n              accessibilityStates={isFocused ? [\"selected\"] : []}\n              pressColor={pressColor}\n              pressOpacity={pressOpacity}\n              delayPressIn={0}\n              onLayout={onLayout}\n              onPress={onPress}\n              onLongPress={onLongPress}\n              style={tabContainerStyle}\n          >\n              <View pointerEvents=\"none\" style={[styles.item, tabStyle]}>\n                  {icon}\n                  {label}\n                  {badge != null ? <View style={styles.badge}>{badge}</View> : null}\n              </View>\n          </PlatformPressable>\n      );\n  }\n}\n\nconst styles = StyleSheet.create({\n    label: {\n        margin: 4,\n        backgroundColor: \"transparent\",\n    },\n    icon: {\n        margin: 2,\n    },\n    item: {\n        flex: 1,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        padding: 10,\n        minHeight: 48,\n    },\n    badge: {\n        position: \"absolute\",\n        top: 0,\n        right: 0,\n    },\n});\n"]}