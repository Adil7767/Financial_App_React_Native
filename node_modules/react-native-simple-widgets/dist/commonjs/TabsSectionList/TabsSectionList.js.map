{"version":3,"sources":["TabsSectionList.tsx"],"names":["SectionList","React","PureComponent","currentIndex","createRef","render","sections","renderTab","tabBarStyle","scrollToLocationOffset","props","prepareSections","map","item","index","flex","state","setState","blockUpdateIndex","sectionList","current","scrollToLocation","animated","itemIndex","viewOffset","sectionIndex","viewableItems","section","minimumViewTime","itemVisiblePercentThreshold"],"mappings":";;;;;;;AAAA;;AACA;;AAQA;;;;;;;;;;;;AAYe,MAAMA,WAAN,SAA0BC,KAAK,CAACC,aAAhC,CAA8D;AAAA;AAAA;;AAAA,mCACzD;AACZC,MAAAA,YAAY,EAAE;AADF,KADyD;;AAAA,8CAK9C,KAL8C;;AAAA,sDAMdF,KAAK,CAACG,SAAN,EANc;AAAA;;AAQzEC,EAAAA,MAAM,GAAG;AACL,UAAM;AACFC,MAAAA,QADE;AAEFC,MAAAA,SAFE;AAGFC,MAAAA,WAHE;AAIFC,MAAAA;AAJE,QAKF,KAAKC,KALT;AAOA,UAAMC,eAAe,GAAGL,QAAQ,CAACM,GAAT,CAAa,CAACC,IAAD,EAAOC,KAAP,MAAkB,EAAE,GAAGD,IAAL;AAAWC,MAAAA;AAAX,KAAlB,CAAb,CAAxB;AAEA,wBACI,oBAAC,iBAAD;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR;AAAb,oBACI,oBAAC,eAAD;AACI,MAAA,QAAQ,EAAEJ,eADd;AAEI,MAAA,SAAS,EAAEJ,SAFf;AAGI,MAAA,WAAW,EAAEC,WAHjB;AAII,MAAA,YAAY,EAAE,KAAKQ,KAAL,CAAWb,YAJ7B;AAKI,MAAA,OAAO,EAAGW,KAAD,IAAmB;AACxB,aAAKG,QAAL,CAAc;AAAEd,UAAAA,YAAY,EAAEW;AAAhB,SAAd;AACA,aAAKI,gBAAL,GAAwB,IAAxB;AAEA,cAAMC,WAAW,GAAG,KAAKA,WAAL,CAAiBC,OAArC;;AACA,YAAID,WAAW,IAAIA,WAAW,CAACE,gBAA/B,EAAiD;AAC7CF,UAAAA,WAAW,CAACE,gBAAZ,CAA6B;AACzBC,YAAAA,QAAQ,EAAE,IADe;AAEzBC,YAAAA,SAAS,EAAE,CAFc;AAGzBC,YAAAA,UAAU,EAAEf,sBAAsB,IAAI,CAHb;AAIzBgB,YAAAA,YAAY,EAAEX;AAJW,WAA7B;AAMH;AACJ;AAlBL,MADJ,eAsBI,oBAAC,wBAAD,eACQ,KAAKJ,KADb;AAEI,MAAA,QAAQ,EAAEC,eAFd;AAGI,MAAA,sBAAsB,EAAE,CAAC;AAAEe,QAAAA;AAAF,OAAD,KAAuB;AAC3C,YAAI,CAAC,KAAKR,gBAAN,IAA0BQ,aAAa,CAAC,CAAD,CAA3C,EAAgD;AAC5C,gBAAMvB,YAAY,GAAGuB,aAAa,CAAC,CAAD,CAAb,CAAiBC,OAAjB,CAAyBb,KAA9C;;AACA,cAAI,KAAKE,KAAL,CAAWb,YAAX,KAA4BA,YAAhC,EAA8C;AAC1C,iBAAKc,QAAL,CAAc;AAAEd,cAAAA;AAAF,aAAd;AACH;AACJ;AACJ,OAVL;AAWI,MAAA,iBAAiB,EAAE;AACfyB,QAAAA,eAAe,EAAE,EADF;AAEfC,QAAAA,2BAA2B,EAAE;AAFd,OAXvB;AAeI,MAAA,GAAG,EAAE,KAAKV,WAfd;AAgBI,MAAA,mBAAmB,EAAE,MAAO,KAAKD,gBAAL,GAAwB;AAhBxD,OAtBJ,CADJ;AA2CH;;AA7DwE","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    View,\r\n    SectionList as RNSectionList,\r\n    SectionListProps,\r\n    ViewStyle,\r\n    RegisteredStyle,\r\n    SectionListData\r\n} from \"react-native\";\r\nimport TabBar from \"./TabBar\";\r\n\r\ninterface IProps extends SectionListProps<any> {\r\n    scrollToLocationOffset?: number;\r\n    tabBarStyle?: ViewStyle | RegisteredStyle<ViewStyle>;\r\n    renderTab: (section: SectionListData<any>) => React.ReactNode;\r\n}\r\n\r\ninterface IState {\r\n    currentIndex: number;\r\n}\r\n\r\nexport default class SectionList extends React.PureComponent<IProps, IState> {\r\n    state: IState = {\r\n        currentIndex: 0\r\n    };\r\n\r\n    private blockUpdateIndex = false;\r\n    private sectionList: React.RefObject<RNSectionList<any>> = React.createRef();\r\n\r\n    render() {\r\n        const {\r\n            sections,\r\n            renderTab,\r\n            tabBarStyle,\r\n            scrollToLocationOffset\r\n        } = this.props;\r\n\r\n        const prepareSections = sections.map((item, index) => ({ ...item, index }));\r\n\r\n        return (\r\n            <View style={{ flex: 1 }}>\r\n                <TabBar\r\n                    sections={prepareSections}\r\n                    renderTab={renderTab}\r\n                    tabBarStyle={tabBarStyle}\r\n                    currentIndex={this.state.currentIndex}\r\n                    onPress={(index: number) => {\r\n                        this.setState({ currentIndex: index });\r\n                        this.blockUpdateIndex = true;\r\n\r\n                        const sectionList = this.sectionList.current;\r\n                        if (sectionList && sectionList.scrollToLocation) {\r\n                            sectionList.scrollToLocation({\r\n                                animated: true,\r\n                                itemIndex: 0,\r\n                                viewOffset: scrollToLocationOffset || 0,\r\n                                sectionIndex: index\r\n                            });\r\n                        }\r\n                    }}\r\n                />\r\n\r\n                <RNSectionList\r\n                    {...this.props}\r\n                    sections={prepareSections}\r\n                    onViewableItemsChanged={({ viewableItems }) => {\r\n                        if (!this.blockUpdateIndex && viewableItems[0]) {\r\n                            const currentIndex = viewableItems[0].section.index;\r\n                            if (this.state.currentIndex !== currentIndex) {\r\n                                this.setState({ currentIndex });\r\n                            }\r\n                        }\r\n                    }}\r\n                    viewabilityConfig={{\r\n                        minimumViewTime: 10,\r\n                        itemVisiblePercentThreshold: 10\r\n                    }}\r\n                    ref={this.sectionList as React.RefObject<any>}\r\n                    onMomentumScrollEnd={() => (this.blockUpdateIndex = false)}\r\n                />\r\n            </View>\r\n        );\r\n    }\r\n}\r\n"]}