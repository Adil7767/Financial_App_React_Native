"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const WindowWidth = _reactNative.Dimensions.get("window").width;

class TabBar extends React.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "scrollView", /*#__PURE__*/React.createRef());

    _defineProperty(this, "_tabContainerMeasurements", void 0);

    _defineProperty(this, "_tabsMeasurements", {});

    _defineProperty(this, "getScrollAmount", () => {
      const {
        currentIndex
      } = this.props;
      const position = currentIndex;
      const pageOffset = 0;
      const containerWidth = WindowWidth;
      const tabWidth = this._tabsMeasurements[position].width;
      const nextTabMeasurements = this._tabsMeasurements[position + 1];
      const nextTabWidth = nextTabMeasurements && nextTabMeasurements.width || 0;
      const tabOffset = this._tabsMeasurements[position].left;
      const absolutePageOffset = pageOffset * tabWidth;
      let newScrollX = tabOffset + absolutePageOffset;
      newScrollX -= (containerWidth - (1 - pageOffset) * tabWidth - pageOffset * nextTabWidth) / 2;
      newScrollX = newScrollX >= 0 ? newScrollX : 0;
      const rightBoundScroll = Math.max(this._tabContainerMeasurements.width - containerWidth, 0);
      newScrollX = newScrollX > rightBoundScroll ? rightBoundScroll : newScrollX;
      return newScrollX;
    });

    _defineProperty(this, "onTabContainerLayout", e => {
      this._tabContainerMeasurements = e.nativeEvent.layout;
    });

    _defineProperty(this, "onTabLayout", key => ev => {
      const {
        x,
        width,
        height
      } = ev.nativeEvent.layout;
      this._tabsMeasurements[key] = {
        left: x,
        right: x + width,
        width,
        height
      };
    });

    _defineProperty(this, "renderTab", (section, key) => {
      const {
        renderTab,
        onPress,
        currentIndex
      } = this.props;
      const isActive = currentIndex === key;
      return /*#__PURE__*/React.createElement(_reactNative.TouchableOpacity, {
        onPress: () => onPress(key),
        key: key,
        onLayout: this.onTabLayout(key)
      }, renderTab({
        isActive,
        ...section
      }));
    });
  }

  componentDidUpdate(prevProps) {
    if (this.props.currentIndex !== prevProps.currentIndex) {
      if (this.scrollView.current) {
        this.scrollView.current.scrollTo({
          x: this.getScrollAmount(),
          animated: true
        });
      }
    }
  }

  render() {
    const {
      sections,
      tabBarStyle
    } = this.props;
    return /*#__PURE__*/React.createElement(_reactNative.View, {
      style: [{
        width: WindowWidth
      }, tabBarStyle]
    }, /*#__PURE__*/React.createElement(_reactNative.ScrollView, {
      ref: this.scrollView,
      showsHorizontalScrollIndicator: false,
      horizontal: true,
      contentContainerStyle: {
        flexDirection: "row"
      }
    }, /*#__PURE__*/React.createElement(_reactNative.View, {
      onLayout: this.onTabContainerLayout,
      style: [{
        flexDirection: "row"
      }]
    }, sections.map(this.renderTab))));
  }

}

exports.default = TabBar;
//# sourceMappingURL=TabBar.js.map