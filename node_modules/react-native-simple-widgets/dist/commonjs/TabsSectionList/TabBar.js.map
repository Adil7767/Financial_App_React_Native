{"version":3,"sources":["TabBar.tsx"],"names":["WindowWidth","Dimensions","get","width","TabBar","React","PureComponent","createRef","currentIndex","props","position","pageOffset","containerWidth","tabWidth","_tabsMeasurements","nextTabMeasurements","nextTabWidth","tabOffset","left","absolutePageOffset","newScrollX","rightBoundScroll","Math","max","_tabContainerMeasurements","e","nativeEvent","layout","key","ev","x","height","right","section","renderTab","onPress","isActive","onTabLayout","componentDidUpdate","prevProps","scrollView","current","scrollTo","getScrollAmount","animated","render","sections","tabBarStyle","flexDirection","onTabContainerLayout","map"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    View,\r\n    TouchableOpacity,\r\n    Dimensions,\r\n    ScrollView,\r\n    LayoutChangeEvent,\r\n    LayoutRectangle,\r\n    SectionListData,\r\n    RegisteredStyle,\r\n    ViewStyle\r\n} from \"react-native\";\r\nconst WindowWidth = Dimensions.get(\"window\").width;\r\n\r\ninterface IProps {\r\n    sections: SectionListData<any>[];\r\n    renderTab: (section: SectionListData<any>) => React.ReactNode;\r\n    tabBarStyle?: ViewStyle | RegisteredStyle<ViewStyle>;\r\n    currentIndex: number;\r\n    onPress: (index: number) => void;\r\n}\r\n\r\ninterface ITabMeasurements {\r\n    left: number;\r\n    right: number;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\ninterface ITabsLayoutRectangle {\r\n    [index: number]: ITabMeasurements;\r\n}\r\n\r\nexport default class TabBar extends React.PureComponent<IProps, any> {\r\n    private scrollView: React.RefObject<ScrollView> = React.createRef();\r\n    private _tabContainerMeasurements!: LayoutRectangle;\r\n    private _tabsMeasurements: ITabsLayoutRectangle = {};\r\n\r\n    componentDidUpdate(prevProps: IProps) {\r\n        if (this.props.currentIndex !== prevProps.currentIndex) {\r\n            if (this.scrollView.current) {\r\n                this.scrollView.current.scrollTo({\r\n                    x: this.getScrollAmount(),\r\n                    animated: true\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    getScrollAmount = () => {\r\n        const { currentIndex } = this.props;\r\n        const position = currentIndex;\r\n        const pageOffset = 0;\r\n\r\n        const containerWidth = WindowWidth;\r\n        const tabWidth = this._tabsMeasurements[position].width;\r\n        const nextTabMeasurements = this._tabsMeasurements[position + 1];\r\n        const nextTabWidth =\r\n            (nextTabMeasurements && nextTabMeasurements.width) || 0;\r\n        const tabOffset = this._tabsMeasurements[position].left;\r\n        const absolutePageOffset = pageOffset * tabWidth;\r\n        let newScrollX = tabOffset + absolutePageOffset;\r\n\r\n        newScrollX -=\r\n            (containerWidth -\r\n                (1 - pageOffset) * tabWidth -\r\n                pageOffset * nextTabWidth) /\r\n            2;\r\n        newScrollX = newScrollX >= 0 ? newScrollX : 0;\r\n\r\n        const rightBoundScroll = Math.max(\r\n            this._tabContainerMeasurements.width - containerWidth,\r\n            0\r\n        );\r\n\r\n        newScrollX = newScrollX > rightBoundScroll ? rightBoundScroll : newScrollX;\r\n        return newScrollX;\r\n    }\r\n\r\n    onTabContainerLayout = (e: LayoutChangeEvent) => {\r\n        this._tabContainerMeasurements = e.nativeEvent.layout;\r\n    }\r\n\r\n    onTabLayout = (key: number) => (ev: LayoutChangeEvent) => {\r\n        const { x, width, height } = ev.nativeEvent.layout;\r\n        this._tabsMeasurements[key] = {\r\n            left: x,\r\n            right: x + width,\r\n            width,\r\n            height\r\n        };\r\n    }\r\n\r\n    renderTab = (section: SectionListData<any>, key: number) => {\r\n        const { renderTab, onPress, currentIndex } = this.props;\r\n        const isActive: boolean = currentIndex === key;\r\n\r\n        return (\r\n            <TouchableOpacity\r\n                onPress={() => onPress(key)}\r\n                key={key}\r\n                onLayout={this.onTabLayout(key)}\r\n            >\r\n                {renderTab({ isActive, ...section })}\r\n            </TouchableOpacity>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { sections, tabBarStyle } = this.props;\r\n\r\n        return (\r\n            <View style={[{ width: WindowWidth }, tabBarStyle]}>\r\n                <ScrollView\r\n                    ref={this.scrollView}\r\n                    showsHorizontalScrollIndicator={false}\r\n                    horizontal\r\n                    contentContainerStyle={{ flexDirection: \"row\" }}\r\n                >\r\n                    <View\r\n                        onLayout={this.onTabContainerLayout}\r\n                        style={[{ flexDirection: \"row\" }]}\r\n                    >\r\n                        {sections.map(this.renderTab)}\r\n                    </View>\r\n                </ScrollView>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n"]}