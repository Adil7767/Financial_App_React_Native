"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeMaps = _interopRequireWildcard(require("react-native-maps"));

var _Button = _interopRequireDefault(require("react-native-simple-elements/components/Button"));

var _Icon = require("react-native-simple-elements/components/Icon");

var _Image = _interopRequireDefault(require("react-native-simple-elements/components/Image/Image"));

var _styledComponents = require("styled-components");

var _account = _interopRequireDefault(require("@mdi/svg/svg/account.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const defaultProps = {
  showsUserLocation: false,
  showsMyLocationButton: false
};

const AddressMap = ({
  innerRef,
  initialRegion,
  userLocation,
  selectedLocationImageSource,
  showsUserLocation,
  showsMyLocationButton,
  renderHeader,
  onRegionChangeComplete,
  onUserLocationRequest,
  onConfirm,
  confirmText,
  ...rest
}) => {
  const [region, setRegion] = React.useState(initialRegion);
  const {
    colors
  } = React.useContext(_styledComponents.ThemeContext);

  const handleRegionChangeComplete = newRegion => {
    setRegion(newRegion);

    if (onRegionChangeComplete) {
      onRegionChangeComplete(newRegion);
    }
  };

  const handleUserLocationRequest = () => {
    if (onUserLocationRequest) {
      onUserLocationRequest();
    }
  };

  const handleConfirmPress = () => {
    if (onConfirm) {
      onConfirm();
    }
  };

  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [styles.container]
  }, /*#__PURE__*/React.createElement(_reactNativeMaps.default, _extends({
    ref: innerRef,
    style: [_reactNative.StyleSheet.absoluteFillObject]
  }, rest, {
    initialRegion: region,
    onRegionChangeComplete: handleRegionChangeComplete
  }), showsUserLocation && userLocation ? /*#__PURE__*/React.createElement(_reactNativeMaps.Circle, {
    center: {
      latitude: userLocation.latitude,
      longitude: userLocation.longitude
    },
    radius: Math.round((region.longitudeDelta + region.latitudeDelta) / 2 * 2500),
    strokeColor: colors.white,
    strokeWidth: Math.round((region.longitudeDelta + region.latitudeDelta) / 2 * 2500) / 10,
    fillColor: "blue"
  }) : null), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: { ..._reactNative.StyleSheet.absoluteFillObject,
      backgroundColor: "transparent",
      alignItems: "center",
      justifyContent: "center"
    },
    pointerEvents: "box-none"
  }, /*#__PURE__*/React.createElement(_Image.default, {
    source: selectedLocationImageSource,
    width: 24,
    height: 40
  })), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: { ..._reactNative.StyleSheet.absoluteFillObject,
      backgroundColor: "transparent"
    },
    pointerEvents: "box-none"
  }, renderHeader ? renderHeader() : null, /*#__PURE__*/React.createElement(_reactNative.View, {
    style: {
      flex: 1,
      backgroundColor: "transparent",
      zIndex: -1
    },
    pointerEvents: "box-none"
  }), showsMyLocationButton ? /*#__PURE__*/React.createElement(_reactNative.View, {
    style: {
      flexDirection: "row",
      justifyContent: "flex-end"
    }
  }, /*#__PURE__*/React.createElement(_reactNative.TouchableOpacity, {
    style: {
      backgroundColor: colors.white,
      marginRight: 16,
      marginBottom: 32,
      padding: 5
    },
    onPress: () => handleUserLocationRequest()
  }, /*#__PURE__*/React.createElement(_Icon.SvgIcon, {
    icon: _account.default,
    size: 24
  }))) : null, region ? /*#__PURE__*/React.createElement(_reactNative.View, {
    style: {
      backgroundColor: colors.white,
      padding: 16,
      shadowColor: colors.black,
      shadowOffset: {
        width: 0,
        height: 4
      },
      shadowOpacity: 0.32,
      shadowRadius: 5.46,
      elevation: 12
    },
    pointerEvents: "box-none"
  }, /*#__PURE__*/React.createElement(_Button.default, {
    onPress: handleConfirmPress
  }, confirmText)) : null));
};

var _default = AddressMap;
exports.default = _default;
AddressMap.defaultProps = defaultProps;

const styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  }
});
//# sourceMappingURL=AddressMap.js.map