{"version":3,"sources":["AddressMap.tsx"],"names":["defaultProps","showsUserLocation","showsMyLocationButton","AddressMap","innerRef","initialRegion","userLocation","selectedLocationImageSource","renderHeader","onRegionChangeComplete","onUserLocationRequest","onConfirm","confirmText","rest","region","setRegion","React","useState","colors","useContext","ThemeContext","handleRegionChangeComplete","newRegion","handleUserLocationRequest","handleConfirmPress","styles","container","StyleSheet","absoluteFillObject","latitude","longitude","Math","round","longitudeDelta","latitudeDelta","white","backgroundColor","alignItems","justifyContent","flex","zIndex","flexDirection","marginRight","marginBottom","padding","AccountIcon","shadowColor","black","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","create"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { StyleSheet, View, TouchableOpacity } from \"react-native\";\nimport MapView, { Circle } from \"react-native-maps\";\nimport Button from \"react-native-simple-elements/components/Button\";\nimport { SvgIcon } from \"react-native-simple-elements/components/Icon\";\nimport Image from \"react-native-simple-elements/components/Image/Image\";\nimport { ThemeContext } from \"styled-components\";\nimport AccountIcon from \"@mdi/svg/svg/account.svg\";\n\ntype RegionProps = {\n    latitude: number,\n    longitude: number,\n    latitudeDelta: number,\n    longitudeDelta: number,\n};\n\ntype Props = {\n    innerRef: React.RefObject<any>,\n    initialRegion: RegionProps,\n    userLocation?: RegionProps,\n    selectedLocationImageSource?: any,\n    showsUserLocation?: boolean,\n    showsMyLocationButton?: boolean,\n    renderHeader?: (props?) => React.ReactNode,\n    onRegionChangeComplete: (region?) => void,\n    onUserLocationRequest?: (region?) => void,\n    onConfirm?: () => void,\n    confirmText?: string,\n};\n\nconst defaultProps = {\n    showsUserLocation: false,\n    showsMyLocationButton: false,\n};\n\nconst AddressMap = ({\n    innerRef,\n    initialRegion,\n    userLocation,\n    selectedLocationImageSource,\n    showsUserLocation,\n    showsMyLocationButton,\n    renderHeader,\n    onRegionChangeComplete,\n    onUserLocationRequest,\n    onConfirm,\n    confirmText,\n    ...rest\n}: Props) => {\n    const [region, setRegion] = React.useState(initialRegion);\n\n    const { colors } = React.useContext(ThemeContext);\n\n    const handleRegionChangeComplete = (newRegion) => {\n        setRegion(newRegion);\n        if (onRegionChangeComplete) {\n            onRegionChangeComplete(newRegion);\n        }\n    };\n\n    const handleUserLocationRequest = () => {\n        if (onUserLocationRequest) {\n            onUserLocationRequest();\n        }\n    };\n\n    const handleConfirmPress = () => {\n        if (onConfirm) {\n            onConfirm();\n        }\n    };\n\n    return (\n        <View style={[styles.container]}>\n            <MapView\n                ref={innerRef}\n                style={[StyleSheet.absoluteFillObject]}\n                {...rest}\n                initialRegion={region}\n                onRegionChangeComplete={handleRegionChangeComplete}>\n                {showsUserLocation && userLocation ? (\n                    <Circle\n                        center={{\n                            latitude: userLocation.latitude,\n                            longitude: userLocation.longitude,\n                        }}\n                        radius={Math.round(\n                            ((region.longitudeDelta + region.latitudeDelta) / 2) * 2500,\n                        )}\n                        strokeColor={colors.white}\n                        strokeWidth={\n                            Math.round(\n                                ((region.longitudeDelta + region.latitudeDelta) / 2) * 2500,\n                            ) / 10\n                        }\n                        fillColor={\"blue\"}\n                    />\n                ) : null}\n            </MapView>\n            <View\n                style={{\n                    ...StyleSheet.absoluteFillObject,\n                    backgroundColor: \"transparent\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                }}\n                pointerEvents=\"box-none\">\n                <Image source={selectedLocationImageSource} width={24} height={40} />\n            </View>\n            <View\n                style={{\n                    ...StyleSheet.absoluteFillObject,\n                    backgroundColor: \"transparent\",\n                }}\n                pointerEvents=\"box-none\">\n                {renderHeader ? renderHeader() : null}\n                <View\n                    style={{\n                        flex: 1,\n                        backgroundColor: \"transparent\",\n                        zIndex: -1,\n                    }}\n                    pointerEvents=\"box-none\"\n                />\n                {showsMyLocationButton ? (\n                    <View\n                        style={{\n                            flexDirection: \"row\",\n                            justifyContent: \"flex-end\",\n                        }}>\n                        <TouchableOpacity\n                            style={{\n                                backgroundColor: colors.white,\n                                marginRight: 16,\n                                marginBottom: 32,\n                                padding: 5,\n                            }}\n                            onPress={() => handleUserLocationRequest()}>\n                            <SvgIcon icon={AccountIcon} size={24} />\n                        </TouchableOpacity>\n                    </View>\n                ) : null}\n                {region ? (\n                    <View\n                        style={{\n                            backgroundColor: colors.white,\n                            padding: 16,\n                            shadowColor: colors.black,\n                            shadowOffset: {\n                                width: 0,\n                                height: 4,\n                            },\n                            shadowOpacity: 0.32,\n                            shadowRadius: 5.46,\n                            elevation: 12,\n                        }}\n                        pointerEvents=\"box-none\">\n                        <Button\n                            onPress={handleConfirmPress}\n                        >\n                            {confirmText}\n                        </Button>\n                    </View>\n                ) : null}\n            </View>\n        </View>\n    );\n};\n\nexport default AddressMap;\n\nAddressMap.defaultProps = defaultProps;\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n    },\n});\n"]}