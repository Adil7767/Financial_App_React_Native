{"version":3,"sources":["AutocompleteInput.tsx"],"names":["defaultKeyExtractor","_","index","defaultRenderItem","item","defaultProps","data","keyboardShouldPersistTaps","onStartShouldSetResponderCapture","flatListProps","renderItem","keyExtractor","AutocompleteInput","props","renderResultList","listProps","style","styles","list","renderTextInput","renderFunction","textProps","containerStyle","hideResults","inputContainerStyle","listContainerStyle","onShowResults","onBackdropPress","showResults","length","position","includes","Platform","OS","top","right","bottom","left","zIndex","container","inputContainer","border","borderColor","borderRadius","borderWidth","androidStyles","flex","marginBottom","backgroundColor","borderTopWidth","margin","marginTop","iosStyles","input","height","paddingLeft","StyleSheet","create","select","android","ios","default"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { FlatList, Platform, StyleProp, StyleSheet, Text, TextInput, TouchableOpacity, View } from \"react-native\";\n\nconst defaultKeyExtractor = (_, index) => `key-${index}`;\nconst defaultRenderItem = ({ item }) => <Text>{item}</Text>;\n\ntype Props = React.ComponentProps<typeof TextInput> & {\n    /**\n     * These styles will be applied to the container which\n     * surrounds the autocomplete component.\n     */\n    containerStyle?: StyleProp<View>,\n    /**\n     * Assign an array of data objects which should be\n     * rendered in respect to the entered text.\n     */\n    data: string[] | Record<string, any>[],\n    /**\n     * Props which can be applied to result `FlatList`.\n     */\n    flatListProps?: React.ComponentProps<typeof FlatList>,\n    /**\n     * Set to `true` to hide the suggestion list.\n     */\n    hideResults?: boolean,\n    /**\n     * These styles will be applied to the container which surrounds\n     * the textInput component.\n     */\n    inputContainerStyle?: StyleProp<View>,\n    /**\n     * Set `keyboardShouldPersistTaps` to true if RN version is <= 0.39.\n     */\n    keyboardShouldPersistTaps?: \"always\" | \"handeld\" | \"never\" | boolean,\n    /**\n     * These style will be applied to the result list.\n     */\n    listContainerStyle?: StyleProp<View>,\n    /**\n     * `onShowResults` will be called when list is going to\n     * show/hide results.\n     */\n    onShowResults?: (showResults) => void,\n    /**\n     * `onShowResults` will be called when list is going to\n     * show/hide results.\n     */\n    onStartShouldSetResponderCapture?: () => boolean,\n    /**\n     * renders custom TextInput. All props passed to this function.\n     */\n    renderTextInput: (props) => React.ReactNode,\n\n    onBackdropPress?: () => void,\n\n    [key: string]: any\n};\n\nconst defaultProps = {\n    data: [],\n    keyboardShouldPersistTaps: \"always\",\n    onStartShouldSetResponderCapture: () => false,\n    flatListProps: {\n        renderItem: defaultRenderItem,\n        keyExtractor: defaultKeyExtractor,\n    },\n};\n\nexport const AutocompleteInput = (props: Props) => {\n\n    function renderResultList(data, listProps) {\n        const { style, ...flatListProps } = listProps;\n\n        return (\n            <FlatList\n                data={data}\n                style={[styles.list, style]}\n                {...flatListProps}\n            />\n        );\n    }\n\n    function renderTextInput() {\n        const { renderTextInput: renderFunction } = props;\n        const textProps = {\n            ...props,\n        };\n\n        return renderFunction(textProps);\n    }\n\n    const {\n        data,\n        containerStyle,\n        hideResults,\n        inputContainerStyle,\n        listContainerStyle,\n        onShowResults,\n        onStartShouldSetResponderCapture,\n        flatListProps,\n        onBackdropPress,\n    } = props;\n\n    const showResults = data.length > 0;\n    // Notify listener if the suggestion will be shown.\n    onShowResults && onShowResults(showResults);\n    return (\n        <>\n            {showResults && !hideResults ?\n                <TouchableOpacity\n                    style={{\n                        position: [\"web\"].includes(Platform.OS) ? \"fixed\" : \"absolute\",\n                        top: 0,\n                        right: 0,\n                        bottom: 0,\n                        left: 0,\n                        zIndex: 1,\n                    } as any}\n                    onPress={onBackdropPress}\n                >\n                </TouchableOpacity>\n                :\n                null\n            }\n            <View style={[styles.container, containerStyle]}>\n                <View style={[styles.inputContainer, inputContainerStyle]}>\n                    {renderTextInput()}\n                </View>\n                {!hideResults && (\n                    <View\n                        style={listContainerStyle as any}\n                        onStartShouldSetResponderCapture={onStartShouldSetResponderCapture}\n                    >\n                        {showResults && renderResultList(data, flatListProps)}\n                    </View>\n                )}\n            </View>\n        </>\n    );\n};\n\nAutocompleteInput.defaultProps = defaultProps;\n\nconst border = {\n    borderColor: \"#b9b9b9\",\n    borderRadius: 1,\n    borderWidth: 1,\n};\n\nconst androidStyles = {\n    container: {\n        flex: 1,\n    },\n    inputContainer: {\n        ...border,\n        marginBottom: 0,\n    },\n    list: {\n        ...border,\n        backgroundColor: \"white\",\n        borderTopWidth: 0,\n        margin: 10,\n        marginTop: 0,\n    },\n};\n\nconst iosStyles = {\n    container: {\n        zIndex: 1,\n    },\n    inputContainer: {\n        ...border,\n    },\n    input: {\n        backgroundColor: \"white\",\n        height: 40,\n        paddingLeft: 3,\n    },\n    list: {\n        ...border,\n        backgroundColor: \"white\",\n        borderTopWidth: 0,\n        left: 0,\n        position: \"absolute\",\n        right: 0,\n    },\n};\n\nconst styles = StyleSheet.create({\n    input: {\n        backgroundColor: \"white\",\n        height: 40,\n        paddingLeft: 3,\n    },\n    ...Platform.select({\n        android: androidStyles as any,\n        ios: iosStyles,\n        default: iosStyles,\n    }),\n});\n\nexport default AutocompleteInput;\n"]}