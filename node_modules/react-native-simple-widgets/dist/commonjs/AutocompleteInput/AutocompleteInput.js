"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AutocompleteInput = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const defaultKeyExtractor = (_, index) => "key-".concat(index);

const defaultRenderItem = ({
  item
}) => /*#__PURE__*/React.createElement(_reactNative.Text, null, item);

const defaultProps = {
  data: [],
  keyboardShouldPersistTaps: "always",
  onStartShouldSetResponderCapture: () => false,
  flatListProps: {
    renderItem: defaultRenderItem,
    keyExtractor: defaultKeyExtractor
  }
};

const AutocompleteInput = props => {
  function renderResultList(data, listProps) {
    const {
      style,
      ...flatListProps
    } = listProps;
    return /*#__PURE__*/React.createElement(_reactNative.FlatList, _extends({
      data: data,
      style: [styles.list, style]
    }, flatListProps));
  }

  function renderTextInput() {
    const {
      renderTextInput: renderFunction
    } = props;
    const textProps = { ...props
    };
    return renderFunction(textProps);
  }

  const {
    data,
    containerStyle,
    hideResults,
    inputContainerStyle,
    listContainerStyle,
    onShowResults,
    onStartShouldSetResponderCapture,
    flatListProps,
    onBackdropPress
  } = props;
  const showResults = data.length > 0; // Notify listener if the suggestion will be shown.

  onShowResults && onShowResults(showResults);
  return /*#__PURE__*/React.createElement(React.Fragment, null, showResults && !hideResults ? /*#__PURE__*/React.createElement(_reactNative.TouchableOpacity, {
    style: {
      position: ["web"].includes(_reactNative.Platform.OS) ? "fixed" : "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      zIndex: 1
    },
    onPress: onBackdropPress
  }) : null, /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [styles.container, containerStyle]
  }, /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [styles.inputContainer, inputContainerStyle]
  }, renderTextInput()), !hideResults && /*#__PURE__*/React.createElement(_reactNative.View, {
    style: listContainerStyle,
    onStartShouldSetResponderCapture: onStartShouldSetResponderCapture
  }, showResults && renderResultList(data, flatListProps))));
};

exports.AutocompleteInput = AutocompleteInput;
AutocompleteInput.defaultProps = defaultProps;
const border = {
  borderColor: "#b9b9b9",
  borderRadius: 1,
  borderWidth: 1
};
const androidStyles = {
  container: {
    flex: 1
  },
  inputContainer: { ...border,
    marginBottom: 0
  },
  list: { ...border,
    backgroundColor: "white",
    borderTopWidth: 0,
    margin: 10,
    marginTop: 0
  }
};
const iosStyles = {
  container: {
    zIndex: 1
  },
  inputContainer: { ...border
  },
  input: {
    backgroundColor: "white",
    height: 40,
    paddingLeft: 3
  },
  list: { ...border,
    backgroundColor: "white",
    borderTopWidth: 0,
    left: 0,
    position: "absolute",
    right: 0
  }
};

const styles = _reactNative.StyleSheet.create({
  input: {
    backgroundColor: "white",
    height: 40,
    paddingLeft: 3
  },
  ..._reactNative.Platform.select({
    android: androidStyles,
    ios: iosStyles,
    default: iosStyles
  })
});

var _default = AutocompleteInput;
exports.default = _default;
//# sourceMappingURL=AutocompleteInput.js.map