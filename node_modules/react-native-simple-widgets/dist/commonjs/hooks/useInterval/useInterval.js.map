{"version":3,"sources":["useInterval.tsx"],"names":["defaultOptions","cancelOnUnmount","useInterval","fn","milliseconds","options","opts","timeout","React","useRef","callback","isCleared","setIsCleared","useState","clear","useCallback","current","clearInterval","useEffect","setInterval"],"mappings":";;;;;;;AAAA;;;;;;AAEA,MAAMA,cAAc,GAAG;AACnBC,EAAAA,eAAe,EAAE;AADE,CAAvB;AAIA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG,CAACC,EAAD,EAAKC,YAAL,EAAmBC,OAAO,GAAGL,cAA7B,KAAgD;AAChE,QAAMM,IAAI,GAAG,EAAE,GAAGN,cAAL;AAAqB,QAAIK,OAAO,IAAI,EAAf;AAArB,GAAb;AACA,QAAME,OAAO,GAAGC,KAAK,CAACC,MAAN,EAAhB;AACA,QAAMC,QAAQ,GAAGF,KAAK,CAACC,MAAN,CAAaN,EAAb,CAAjB;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BJ,KAAK,CAACK,QAAN,CAAe,KAAf,CAAlC,CAJgE,CAMhE;;AACA,QAAMC,KAAK,GAAGN,KAAK,CAACO,WAAN,CAAkB,MAAM;AAClC,QAAIR,OAAO,CAACS,OAAZ,EAAqB;AACjBJ,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAK,MAAAA,aAAa,CAACV,OAAO,CAACS,OAAT,CAAb;AACH;AACJ,GALa,EAKX,EALW,CAAd,CAPgE,CAchE;;AACAR,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AAClB,QAAI,OAAOf,EAAP,KAAc,UAAlB,EAA8B;AAC1BO,MAAAA,QAAQ,CAACM,OAAT,GAAmBb,EAAnB;AACH;AACJ,GAJD,EAIG,CAACA,EAAD,CAJH,EAfgE,CAqBhE;;AACAK,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AAClB,QAAI,OAAOd,YAAP,KAAwB,QAA5B,EAAsC;AAClCG,MAAAA,OAAO,CAACS,OAAR,GAAkBG,WAAW,CAAC,MAAM;AAChCT,QAAAA,QAAQ,CAACM,OAAT;AACH,OAF4B,EAE1BZ,YAF0B,CAA7B;AAGH,KALiB,CAOlB;;;AACA,WAAOU,KAAP;AACH,GATD,EASG,CAACV,YAAD,CATH,EAtBgE,CAiChE;;AACAI,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM,MAAM;AACxB,QAAIZ,IAAI,CAACL,eAAT,EAA0B;AACtBa,MAAAA,KAAK;AACR;AACJ,GAJD,EAIG,EAJH;AAMA,SAAO,CAACH,SAAD,EAAYG,KAAZ,CAAP;AACH,CAzCD;;eA2CeZ,W","sourcesContent":["import * as React from \"react\";\n\nconst defaultOptions = {\n    cancelOnUnmount: true,\n};\n\n/**\n * An async-utility hook that accepts a callback function and a delay time (in milliseconds), then repeats the\n * execution of the given function by the defined milliseconds.\n */\nconst useInterval = (fn, milliseconds, options = defaultOptions) => {\n    const opts = { ...defaultOptions, ...(options || {}) };\n    const timeout = React.useRef<any>();\n    const callback = React.useRef(fn);\n    const [isCleared, setIsCleared] = React.useState(false);\n\n    // the clear method\n    const clear = React.useCallback(() => {\n        if (timeout.current) {\n            setIsCleared(true);\n            clearInterval(timeout.current);\n        }\n    }, []);\n\n    // if the provided function changes, change its reference\n    React.useEffect(() => {\n        if (typeof fn === \"function\") {\n            callback.current = fn;\n        }\n    }, [fn]);\n\n    // when the milliseconds change, reset the timeout\n    React.useEffect(() => {\n        if (typeof milliseconds === \"number\") {\n            timeout.current = setInterval(() => {\n                callback.current();\n            }, milliseconds);\n        }\n\n        // cleanup previous interval\n        return clear;\n    }, [milliseconds]);\n\n    // when component unmount clear the timeout\n    React.useEffect(() => () => {\n        if (opts.cancelOnUnmount) {\n            clear();\n        }\n    }, []);\n\n    return [isCleared, clear];\n};\n\nexport default useInterval;"]}