{"version":3,"sources":["Accordion.tsx"],"names":["COLLAPSIBLE_PROPS","Accordion","React","Component","section","key","renderCollapsible","activeSections","sectionContainerStyle","expandFromBottom","sections","underlayColor","touchableProps","touchableComponent","Touchable","renderHeader","renderFooter","renderSectionTitle","props","includes","_toggleSection","expanded","disabled","expandMultiple","onChange","updatedSections","filter","a","render","containerStyle","onAnimationEnd","renderContent","renderAsFlatList","keyExtractor","restProps","viewProps","collapsibleProps","Object","keys","forEach","item","index","_renderContainer","map","TouchableHighlight"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { View, TouchableHighlight, FlatList } from \"react-native\";\r\nimport Collapsible from \"./Collapsible\";\r\n\r\nconst COLLAPSIBLE_PROPS = [\r\n    \"align\",\r\n    \"collapsed\",\r\n    \"collapsedHeight\",\r\n    \"renderChildrenCollapsed\",\r\n    \"enablePointerEvents\",\r\n    \"duration\",\r\n    \"easing\",\r\n    \"style\",\r\n    \"onAnimationEnd\",\r\n];\r\n\r\ntype Props = {\r\n    underlayColor?: string,\r\n    disabled?: boolean,\r\n    expandFromBottom?: boolean,\r\n    expandMultiple?: boolean,\r\n    activeSections?: string[],\r\n    onChange?: (evt?) => void,\r\n    containerStyle?: any,\r\n    sectionContainerStyle?: any,\r\n    sections?: any[],\r\n    touchableProps?: any,\r\n    touchableComponent?: React.ReactNode,\r\n    renderContent?: (props, key, check, sections) => React.ReactElement,\r\n    renderHeader?: (props, key, check, sections) => React.ReactElement,\r\n    renderFooter?: (props, key, check, sections) => React.ReactElement,\r\n    renderSectionTitle?: (props, key, check, sections?) => React.ReactElement,\r\n    onAnimationEnd?: (evt?, key?) => void,\r\n    renderAsFlatList?: boolean,\r\n    keyExtractor?: (props, index?) => void,\r\n};\r\n\r\nclass Accordion extends React.Component<Props> {\r\n\r\n    static defaultProps = {\r\n        underlayColor: \"black\",\r\n        disabled: false,\r\n        expandFromBottom: false,\r\n        expandMultiple: false,\r\n        touchableComponent: TouchableHighlight,\r\n        keyExtractor: (item, index) => index,\r\n        renderSectionTitle: () => null,\r\n        onAnimationEnd: () => null,\r\n        sectionContainerStyle: {},\r\n        renderAsFlatList: false,\r\n    };\r\n\r\n    _toggleSection(section) {\r\n        if (!this.props.disabled) {\r\n            const { activeSections, expandMultiple, onChange } = this.props;\r\n\r\n            let updatedSections = [];\r\n\r\n            if (activeSections.includes(section)) {\r\n                updatedSections = activeSections.filter((a) => a !== section);\r\n            } else if (expandMultiple) {\r\n                updatedSections = [...activeSections, section];\r\n            } else {\r\n                updatedSections = [section];\r\n            }\r\n\r\n            if (onChange) {\r\n                onChange(updatedSections);\r\n            }\r\n        }\r\n    }\r\n\r\n    _renderContainer = (section, key, renderCollapsible) => {\r\n        const {\r\n            activeSections,\r\n            sectionContainerStyle,\r\n            expandFromBottom,\r\n            sections,\r\n            underlayColor,\r\n            touchableProps,\r\n            touchableComponent: Touchable,\r\n            renderHeader,\r\n            renderFooter,\r\n            renderSectionTitle,\r\n        } = this.props;\r\n        return (\r\n            <View key={key} style={sectionContainerStyle}>\r\n                {renderSectionTitle(section, key, activeSections.includes(key))}\r\n\r\n                {expandFromBottom && renderCollapsible(section, key)}\r\n\r\n                {/* @ts-ignore */}\r\n                <Touchable\r\n                    onPress={() => this._toggleSection(key)}\r\n                    underlayColor={underlayColor}\r\n                    {...touchableProps}\r\n                    accessibilityState={{\r\n                        expanded: activeSections.includes(key),\r\n                    }}\r\n                >\r\n                    {renderHeader(section, key, activeSections.includes(key), sections)}\r\n                </Touchable>\r\n\r\n                {!expandFromBottom && renderCollapsible(section, key)}\r\n\r\n                {renderFooter &&\r\n                    renderFooter(section, key, activeSections.includes(key), sections)}\r\n            </View>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            activeSections,\r\n            // expandMultiple,\r\n            // onChange,\r\n            containerStyle,\r\n            // sectionContainerStyle,\r\n            // expandFromBottom,\r\n            sections,\r\n            // underlayColor,\r\n            // touchableProps,\r\n            // touchableComponent: Touchable,\r\n            onAnimationEnd,\r\n            renderContent,\r\n            // renderHeader,\r\n            // renderFooter,\r\n            // renderSectionTitle,\r\n            // disabled,\r\n            renderAsFlatList,\r\n            keyExtractor,\r\n            ...restProps\r\n        } = this.props;\r\n\r\n        const viewProps = {};\r\n        const collapsibleProps = {};\r\n\r\n        Object.keys(restProps).forEach((key) => {\r\n            if (COLLAPSIBLE_PROPS.includes(key)) {\r\n                collapsibleProps[key] = restProps[key];\r\n            } else {\r\n                viewProps[key] = restProps[key];\r\n            }\r\n        });\r\n\r\n        const renderCollapsible = (section, key) => (\r\n            <Collapsible\r\n                collapsed={!activeSections.includes(key)}\r\n                {...collapsibleProps}\r\n                onAnimationEnd={() => onAnimationEnd(section, key)}\r\n            >\r\n                {renderContent(section, key, activeSections.includes(key), sections)}\r\n            </Collapsible>\r\n        );\r\n\r\n        if (renderAsFlatList) {\r\n            return (\r\n                <FlatList\r\n                    style={containerStyle}\r\n                    data={sections}\r\n                    extraData={activeSections}\r\n                    nestedScrollEnabled={true}\r\n                    keyExtractor={keyExtractor as any}\r\n                    renderItem={({ item, index }) => {\r\n                        const section = item;\r\n                        const key = keyExtractor(item, index);\r\n                        return this._renderContainer(section, key, renderCollapsible);\r\n                    }}\r\n                    {...viewProps}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <View style={containerStyle} {...viewProps}>\r\n                {sections.map((section, index) => {\r\n                    const key = keyExtractor(section, index);\r\n                    return this._renderContainer(section, key, renderCollapsible);\r\n                })}\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Accordion;\r\n"]}