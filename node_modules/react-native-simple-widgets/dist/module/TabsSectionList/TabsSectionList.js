function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from "react";
import { View, SectionList as RNSectionList } from "react-native";
import TabBar from "./TabBar";
export default class SectionList extends React.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      currentIndex: 0
    });

    _defineProperty(this, "blockUpdateIndex", false);

    _defineProperty(this, "sectionList", /*#__PURE__*/React.createRef());
  }

  render() {
    const {
      sections,
      renderTab,
      tabBarStyle,
      scrollToLocationOffset
    } = this.props;
    const prepareSections = sections.map((item, index) => ({ ...item,
      index
    }));
    return /*#__PURE__*/React.createElement(View, {
      style: {
        flex: 1
      }
    }, /*#__PURE__*/React.createElement(TabBar, {
      sections: prepareSections,
      renderTab: renderTab,
      tabBarStyle: tabBarStyle,
      currentIndex: this.state.currentIndex,
      onPress: index => {
        this.setState({
          currentIndex: index
        });
        this.blockUpdateIndex = true;
        const sectionList = this.sectionList.current;

        if (sectionList && sectionList.scrollToLocation) {
          sectionList.scrollToLocation({
            animated: true,
            itemIndex: 0,
            viewOffset: scrollToLocationOffset || 0,
            sectionIndex: index
          });
        }
      }
    }), /*#__PURE__*/React.createElement(RNSectionList, _extends({}, this.props, {
      sections: prepareSections,
      onViewableItemsChanged: ({
        viewableItems
      }) => {
        if (!this.blockUpdateIndex && viewableItems[0]) {
          const currentIndex = viewableItems[0].section.index;

          if (this.state.currentIndex !== currentIndex) {
            this.setState({
              currentIndex
            });
          }
        }
      },
      viewabilityConfig: {
        minimumViewTime: 10,
        itemVisiblePercentThreshold: 10
      },
      ref: this.sectionList,
      onMomentumScrollEnd: () => this.blockUpdateIndex = false
    })));
  }

}
//# sourceMappingURL=TabsSectionList.js.map