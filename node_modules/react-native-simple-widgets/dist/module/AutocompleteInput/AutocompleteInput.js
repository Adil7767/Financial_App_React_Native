function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from "react";
import { FlatList, Platform, StyleSheet, Text, TouchableOpacity, View } from "react-native";

const defaultKeyExtractor = (_, index) => "key-".concat(index);

const defaultRenderItem = ({
  item
}) => /*#__PURE__*/React.createElement(Text, null, item);

const defaultProps = {
  data: [],
  keyboardShouldPersistTaps: "always",
  onStartShouldSetResponderCapture: () => false,
  flatListProps: {
    renderItem: defaultRenderItem,
    keyExtractor: defaultKeyExtractor
  }
};
export const AutocompleteInput = props => {
  function renderResultList(data, listProps) {
    const {
      style,
      ...flatListProps
    } = listProps;
    return /*#__PURE__*/React.createElement(FlatList, _extends({
      data: data,
      style: [styles.list, style]
    }, flatListProps));
  }

  function renderTextInput() {
    const {
      renderTextInput: renderFunction
    } = props;
    const textProps = { ...props
    };
    return renderFunction(textProps);
  }

  const {
    data,
    containerStyle,
    hideResults,
    inputContainerStyle,
    listContainerStyle,
    onShowResults,
    onStartShouldSetResponderCapture,
    flatListProps,
    onBackdropPress
  } = props;
  const showResults = data.length > 0; // Notify listener if the suggestion will be shown.

  onShowResults && onShowResults(showResults);
  return /*#__PURE__*/React.createElement(React.Fragment, null, showResults && !hideResults ? /*#__PURE__*/React.createElement(TouchableOpacity, {
    style: {
      position: ["web"].includes(Platform.OS) ? "fixed" : "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      zIndex: 1
    },
    onPress: onBackdropPress
  }) : null, /*#__PURE__*/React.createElement(View, {
    style: [styles.container, containerStyle]
  }, /*#__PURE__*/React.createElement(View, {
    style: [styles.inputContainer, inputContainerStyle]
  }, renderTextInput()), !hideResults && /*#__PURE__*/React.createElement(View, {
    style: listContainerStyle,
    onStartShouldSetResponderCapture: onStartShouldSetResponderCapture
  }, showResults && renderResultList(data, flatListProps))));
};
AutocompleteInput.defaultProps = defaultProps;
const border = {
  borderColor: "#b9b9b9",
  borderRadius: 1,
  borderWidth: 1
};
const androidStyles = {
  container: {
    flex: 1
  },
  inputContainer: { ...border,
    marginBottom: 0
  },
  list: { ...border,
    backgroundColor: "white",
    borderTopWidth: 0,
    margin: 10,
    marginTop: 0
  }
};
const iosStyles = {
  container: {
    zIndex: 1
  },
  inputContainer: { ...border
  },
  input: {
    backgroundColor: "white",
    height: 40,
    paddingLeft: 3
  },
  list: { ...border,
    backgroundColor: "white",
    borderTopWidth: 0,
    left: 0,
    position: "absolute",
    right: 0
  }
};
const styles = StyleSheet.create({
  input: {
    backgroundColor: "white",
    height: 40,
    paddingLeft: 3
  },
  ...Platform.select({
    android: androidStyles,
    ios: iosStyles,
    default: iosStyles
  })
});
export default AutocompleteInput;
//# sourceMappingURL=AutocompleteInput.js.map