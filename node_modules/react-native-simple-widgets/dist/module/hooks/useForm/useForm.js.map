{"version":3,"sources":["useForm.tsx"],"names":["React","validators","defaultFunc","getInitialTouched","initialValues","Object","keys","reduce","value","key","ValidateOnEvent","ValidateOnChange","ValidateOnBlur","useForm","onSubmit","validationSchema","options","onChange","onBlur","onFocus","values","setValues","useState","touched","setTouched","errors","setErrors","hasMissingField","setHasMissingField","useEffect","some","isRequiredError","handleSubmit","touchAllFields","validateAllFields","error","handleChange","name","runFieldLevelValidations","setFieldValue","handleBlur","previousTouched","handleFocus","validatorOnEvent","rule","validatorEvent","validatorFlag","type","validateByFieldName","fieldValidatorSchema","skipValidations","optional","trim","validator","isValid","errorMsg","message","previousErrors","createValidationProps","useCallback","untouched","previousValues","resetForm","initial"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport validators from \"../../utils/Validator\";\n\nconst defaultFunc = () => true;\n\n// If the initial value is not empty, it should be touched to show the green check mark\nconst getInitialTouched = initialValues => {\n    return Object.keys(initialValues).reduce((value, key) => {\n        return {\n            ...value,\n            [key]: !!initialValues[key],\n        };\n    }, {});\n};\n\nconst ValidateOnEvent = {\n    ValidateOnChange: \"validateOnChange\",\n    ValidateOnBlur: \"validateOnBlur\",\n};\n\nconst useForm = (\n    initialValues = {},\n    onSubmit,\n    validationSchema = {},\n    options = {} as any,\n) => {\n    const {\n        onChange = defaultFunc,\n        onBlur = defaultFunc,\n        onFocus = defaultFunc,\n    } = options;\n    const [values, setValues] = React.useState(initialValues);\n    const [touched, setTouched] = React.useState(getInitialTouched(initialValues));\n    const [errors, setErrors] = React.useState({});\n    const [hasMissingField, setHasMissingField] = React.useState(false);\n\n    React.useEffect(() => {\n        setHasMissingField(\n            Object.keys(errors).some(key => isRequiredError(errors[key]))\n        );\n    }, [errors]);\n\n    const handleSubmit = () => {\n        touchAllFields();\n        const errors = validateAllFields();\n        setErrors(errors);\n\n        // If there is no errors, submit value else abort\n        if (!Object.keys(errors).some(key => errors[key].error)) {\n            onSubmit && onSubmit(values);\n            return values;\n        }\n    };\n\n    const handleChange = name => value => {\n        runFieldLevelValidations(ValidateOnEvent.ValidateOnChange)(name, value);\n        setFieldValue(name, value);\n        onChange(name, value);\n    };\n\n    const handleBlur = name => () => {\n        runFieldLevelValidations(ValidateOnEvent.ValidateOnBlur)(\n            name,\n            values[name]\n        );\n        setTouched(previousTouched => ({ ...previousTouched, [name]: true }));\n\n        if (typeof onBlur === \"function\") {\n            onBlur(name, values[name]);\n        }\n    };\n\n    const handleFocus = name => () => {\n        if (typeof onFocus === \"function\") {\n            onFocus(name, values[name]);\n        }\n    };\n\n    const validatorOnEvent = (name, rule, validatorEvent) => {\n        const { [validatorEvent]: validatorFlag = true } = rule;\n        return (\n            validatorFlag ||\n            (touched[name] &&\n                errors[name] &&\n                errors[name].error &&\n                !isRequiredError(errors[name]))\n        );\n    };\n\n    const isRequiredError = ({ error, type }) => error && type === \"required\";\n\n    const validateByFieldName = (name, value = \"\", validatorEvent?) => {\n        let error = {};\n        const fieldValidatorSchema = validationSchema[name];\n        const skipValidations =\n            fieldValidatorSchema?.optional && value.trim() === \"\";\n\n        if (skipValidations) {\n            return { [name]: { error: false } };\n        }\n\n        fieldValidatorSchema &&\n            Object.keys(fieldValidatorSchema).some(key => {\n                const validator = validators[key];\n\n                // ignore invalid validation props\n                if (!validator) return false;\n\n                const rule = fieldValidatorSchema[key];\n                if (!validatorOnEvent(name, rule, validatorEvent)) {\n                    return false;\n                }\n\n                const isValid = validator(value, rule);\n\n                error = {\n                    ...error,\n                    [name]: {\n                        error: !isValid,\n                        errorMsg: rule.message,\n                        type: key,\n                    },\n                };\n\n                return !isValid;\n            });\n\n        return error;\n    };\n\n    const validateAllFields = () => {\n        return Object.keys(validationSchema).reduce((value, key) => {\n            const error = validateByFieldName(key, values[key]);\n            return {\n                ...value,\n                ...error,\n            };\n        }, {});\n    };\n\n    const runFieldLevelValidations = validatorEvent => (name, value = \"\") => {\n        const error = validateByFieldName(name, value, validatorEvent);\n        setErrors(previousErrors => ({ ...previousErrors, ...error }));\n    };\n\n    const touchAllFields = () => {\n        const touched = Object.keys(values).reduce((value, key) => {\n            return {\n                ...value,\n                [key]: true,\n            };\n        }, {});\n        setTouched(touched);\n    };\n\n    // Shorthand to pass appropriate props to FieldValidator component\n    const createValidationProps = name => {\n        return {\n            name,\n            touched,\n            value: values[name],\n            onChange: handleChange(name),\n            onBlur: handleBlur(name),\n            onFocus: handleFocus(name),\n            values,\n            errors,\n        };\n    };\n\n    const setFieldValue = React.useCallback((name, value, untouched = false) => {\n        setValues(previousValues => ({ ...previousValues, [name]: value }));\n        if (untouched === true) {\n            setTouched(touched => ({\n                ...touched,\n                [name]: false,\n            }));\n            setErrors(errors => ({\n                ...errors,\n                [name]: false,\n            }));\n        }\n    }, []);\n\n    const resetForm = React.useCallback(\n        (initial = {}) => {\n            setValues(initial);\n            setErrors({});\n            setTouched(getInitialTouched(initial));\n            // eslint-disable-next-line\n        }, [setValues]);\n\n    return {\n        values,\n        errors,\n        touched,\n        hasMissingField,\n        setFieldValue,\n        handleChange,\n        handleBlur,\n        handleFocus,\n        handleSubmit,\n        createValidationProps,\n        resetForm,\n    };\n};\n\nexport default useForm;\n"]}