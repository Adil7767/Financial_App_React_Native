{"version":3,"sources":["ErrorDialog.tsx"],"names":["React","StyleSheet","AlertDialog","Button","DialogActions","DialogContent","DialogTitle","Text","ThemeContext","defaultProps","translations","confirmText","ErrorDialog","innerRef","children","title","message","dialogContentStyle","messageStyle","rest","visible","setVisible","useState","optionsRef","useRef","colors","useContext","useImperativeHandle","open","opts","current","onConfirm","close","_handleConfirm","_handleDismiss","styles","color","error","create","paddingHorizontal"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { StyleProp, StyleSheet, TextStyle, ViewStyle } from \"react-native\";\nimport AlertDialog from \"react-native-simple-elements/components/AlertDialog\";\nimport Button from \"react-native-simple-elements/components/Button\";\nimport { DialogActions, DialogContent, DialogTitle } from \"react-native-simple-elements/components/Dialog\";\nimport Text from \"react-native-simple-elements/components/Text\";\nimport { ThemeContext } from \"styled-components\";\n\ntype RefProps = {\n    open: (opts) => void,\n    close: () => void,\n};\n\ntype TranslationProps = {\n    confirmText: string,\n}\n\ntype Props = Omit<React.ComponentProps<typeof AlertDialog>, \"visible\" | \"onDismiss\"> & {\n    innerRef: React.RefObject<RefProps>,\n    title?: string,\n    message?: string,\n    translations?: TranslationProps,\n    dialogContentStyle?: StyleProp<ViewStyle>,\n    messageStyle?: StyleProp<TextStyle>,\n}\n\nconst defaultProps = {\n    translations: {\n        confirmText: \"Ok\",\n    },\n};\n\nconst ErrorDialog = ({\n    innerRef,\n    children,\n    title,\n    message,\n    translations,\n    dialogContentStyle,\n    messageStyle,\n    ...rest\n}: Props) => {\n    const [ visible, setVisible ] = React.useState(false);\n    const optionsRef = React.useRef<any>({});\n\n    const { colors } = React.useContext(ThemeContext);\n\n    React.useImperativeHandle(innerRef, () => ({\n        open: (opts) => {\n            optionsRef.current = {\n                onConfirm: opts?.onConfirm,\n            };\n            setVisible(true);\n        },\n        close: () => {\n            setVisible(false);\n        },\n    }));\n\n    const _handleConfirm = () => {\n        if (optionsRef && optionsRef.current && optionsRef.current.onConfirm) {\n            optionsRef.current.onConfirm();\n        }\n        innerRef.current.close();\n    };\n\n    const _handleDismiss = () => {\n        innerRef.current.close();\n    };\n\n    return (\n        <AlertDialog\n            visible={visible}\n            onDismiss={_handleDismiss}\n            contentStyle={{\n\n            }}\n            {...rest}\n        >\n            {title ?\n                <DialogTitle>{title}</DialogTitle>\n                :\n                null\n            }\n            <DialogContent\n                style={[\n                    styles.dialogContentStyle,\n                    dialogContentStyle,\n                ]}\n            >\n                {message ?\n                    <Text\n                        style={[\n                            messageStyle,\n                            {\n                                color: colors.error,\n                            },\n                        ]}\n                    >\n                        {message}\n                    </Text>\n                    :\n                    children\n                }\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    mode=\"contained\"\n                    onPress={_handleConfirm}\n                >\n                    {translations?.confirmText}\n                </Button>\n            </DialogActions>\n        </AlertDialog>\n    );\n};\n\nErrorDialog.defaultProps = defaultProps;\n\nexport default ErrorDialog;\n\nconst styles = StyleSheet.create({\n    dialogContentStyle: {\n        paddingHorizontal: 16,\n    },\n});\n"]}