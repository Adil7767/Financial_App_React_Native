function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from "react";
import { StyleSheet } from "react-native";
import AlertDialog from "react-native-simple-elements/components/AlertDialog";
import Button from "react-native-simple-elements/components/Button";
import { DialogActions, DialogContent, DialogTitle } from "react-native-simple-elements/components/Dialog";
import Text from "react-native-simple-elements/components/Text";
const defaultProps = {
  translations: {
    confirmText: "Ok"
  }
};

const MessageDialog = ({
  innerRef,
  children,
  title,
  message,
  translations,
  dialogContentStyle,
  messageStyle,
  ...rest
}) => {
  const [visible, setVisible] = React.useState(false);
  const optionsRef = React.useRef({});
  React.useImperativeHandle(innerRef, () => ({
    open: opts => {
      optionsRef.current = {
        onConfirm: opts === null || opts === void 0 ? void 0 : opts.onConfirm
      };
      setVisible(true);
    },
    close: () => {
      setVisible(false);
    }
  }));

  const _handleConfirm = () => {
    if (optionsRef && optionsRef.current && optionsRef.current.onConfirm) {
      optionsRef.current.onConfirm();
    }

    innerRef.current.close();
  };

  const _handleDismiss = () => {
    innerRef.current.close();
  };

  return /*#__PURE__*/React.createElement(AlertDialog, _extends({
    visible: visible,
    onDismiss: _handleDismiss,
    contentStyle: {}
  }, rest), title ? /*#__PURE__*/React.createElement(DialogTitle, null, title) : null, /*#__PURE__*/React.createElement(DialogContent, {
    style: [styles.dialogContentStyle, dialogContentStyle]
  }, message ? /*#__PURE__*/React.createElement(Text, {
    style: [messageStyle]
  }, message) : children), /*#__PURE__*/React.createElement(DialogActions, null, /*#__PURE__*/React.createElement(Button, {
    mode: "contained",
    onPress: _handleConfirm
  }, translations === null || translations === void 0 ? void 0 : translations.confirmText)));
};

MessageDialog.defaultProps = defaultProps;
export default MessageDialog;
const styles = StyleSheet.create({
  dialogContentStyle: {
    paddingHorizontal: 16
  }
});
//# sourceMappingURL=MessageDialog.js.map