{"version":3,"sources":["TestUtils.tsx"],"names":["ThemeProvider","render","shallow","oneOfType","element","arrayOf","ProviderWrapper","children","propTypes","shallowWithProvider","component","options","wrappingComponent","renderWithProvider","wrapper","TestHook","hook","testHook","targetHook"],"mappings":"AAAA,SAASA,aAAT,QAA8B,mBAA9B;AACA,SAASC,MAAT,QAAuB,8BAAvB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,SAAT,EAAoBC,OAApB,EAA6BC,OAA7B,QAA4C,YAA5C;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,kBACpB,oBAAC,aAAD;AAAe,EAAA,KAAK,EAAE;AAAtB,GAAkCA,QAAlC,CADJ;;AAIAD,eAAe,CAACE,SAAhB,GAA4B;AACxBD,EAAAA,QAAQ,EAAEJ,SAAS,CAAC,CAACC,OAAD,EAAUC,OAAO,CAACD,OAAD,CAAjB,CAAD;AADK,CAA5B;AAIA,OAAO,MAAMK,mBAAmB,GAAG,CAACC,SAAD,EAAYC,OAAZ,KAAwB;AACvD,SAAOT,OAAO,CAACQ,SAAD,EAAY;AACtBE,IAAAA,iBAAiB,EAAEN,eADG;AAEtB,OAAGK;AAFmB,GAAZ,CAAd;AAIH,CALM;AAOP,OAAO,MAAME,kBAAkB,GAAG,CAACH,SAAD,EAAYC,OAAZ,KAAyB;AACvD,SAAOV,MAAM,CAACS,SAAD,EAAY;AACrBI,IAAAA,OAAO,EAAER,eADY;AAErB,OAAGK;AAFkB,GAAZ,CAAb;AAIH,CALM,C,CAOP;;AACA,MAAMI,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC3BA,EAAAA,IAAI;AACJ,SAAO,IAAP;AACH,CAHD;;AAKA,OAAO,MAAMC,QAAQ,GAAGC,UAAU,IAAI;AAClChB,EAAAA,OAAO,eAAC,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAEgB;AAAhB,IAAD,CAAP;AACH,CAFM;AAIP,SAAST,mBAAmB,IAAIP,OAAhC,EAAyCW,kBAAkB,IAAIZ,MAA/D","sourcesContent":["import { ThemeProvider } from \"styled-components\";\nimport { render } from \"react-native-testing-library\";\nimport { shallow } from \"enzyme\";\nimport { oneOfType, element, arrayOf } from \"prop-types\";\n\nconst ProviderWrapper = ({ children }) => (\n    <ThemeProvider theme={{} as any}>{children}</ThemeProvider>\n);\n\nProviderWrapper.propTypes = {\n    children: oneOfType([element, arrayOf(element)]),\n};\n\nexport const shallowWithProvider = (component, options) => {\n    return shallow(component, {\n        wrappingComponent: ProviderWrapper,\n        ...options,\n    });\n};\n\nexport const renderWithProvider = (component, options?) => {\n    return render(component, {\n        wrapper: ProviderWrapper,\n        ...options,\n    });\n};\n\n// Hooks can only be called from a functional component or from other hooks\nconst TestHook = ({ hook }) => {\n    hook();\n    return null;\n};\n\nexport const testHook = targetHook => {\n    shallow(<TestHook hook={targetHook} />);\n};\n\nexport { shallowWithProvider as shallow, renderWithProvider as render };\n"]}