{"version":3,"sources":["OpenMapsUtils.tsx"],"names":["Linking","Platform","queryString","geoCordStringify","latitude","longitude","map","coord","Error","validateTravelType","type","TRAVEL_TYPE_ENUM","validType","filter","cleanObject","input","Object","keys","reduce","acc","key","index","currentValue","assign","createAppleParams","params","travelTypeMap","drive","walk","public_transport","ll","coords","z","zoom","dirflg","travelType","q","query","saddr","start","daddr","end","createGoogleParams","origin","destination","destination_place_id","end_place_id","travelmode","navigate_mode","dir_action","center","query_place_id","createQueryParameters","formatArguments","apple","google","createOpenLink","provider","mapProvider","OS","mapLink","createMapLink","openURL","catch","err","console","error","link","warn","queryParameters","appleQs","stringify","replace","googleQs","open"],"mappings":"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","sourcesContent":["import { Linking, Platform } from \"react-native\";\nimport queryString from \"query-string\";\n\nexport const geoCordStringify = (latitude, longitude) => {\n    [latitude, longitude].map(coord => {\n        if (typeof coord !== \"number\") {\n            throw new Error(\"Entered a non-number value for geo coordinates.\");\n        }\n    });\n\n    return `${latitude},${longitude}`;\n};\n\nexport const validateTravelType = type => {\n    // Google supports \"biking\", omitted for sake of compatability and user expectations\n    const TRAVEL_TYPE_ENUM = [\"drive\", \"walk\", \"public_transport\"];\n    const validType = TRAVEL_TYPE_ENUM.filter(validType => validType === type);\n    if (!validType) {\n        throw new Error(`Recieved ${type}, expected ${TRAVEL_TYPE_ENUM}`);\n    }\n};\n\n// cleanObject :: {} -> {}\n// Creates a new object that removes any empty values\nconst cleanObject = input => {\n    return Object.keys(input).reduce((acc, key, index,)=> {\n        const currentValue = input[key];\n        return (currentValue) ?\n            Object.assign({}, acc, { [key]: currentValue }) : acc;\n    }, {});\n};\n\n// Create apple parameters\nexport const createAppleParams = params => {\n    const travelTypeMap = {\n        drive: \"d\",\n        walk: \"w\",\n        public_transport: \"r\"\n    };\n\n    const map = {\n        ll: params.coords,\n        z: params.zoom,\n        dirflg: travelTypeMap[params.travelType],\n        q: params.query,\n        saddr: params.start,\n        daddr: params.end\n    };\n\n    return cleanObject(map);\n};\n\n// Create google parameters\nexport const createGoogleParams = params => {\n    const travelTypeMap = {\n        drive: \"driving\",\n        walk: \"walking\",\n        public_transport: \"transit\"\n    };\n\n    const map = {\n        origin: params.start,\n        destination: params.end,\n        destination_place_id: params.end_place_id,\n        travelmode: travelTypeMap[params.travelType],\n        zoom: params.zoom\n    } as any;\n\n    if (params.navigate_mode === \"navigate\") {\n        map.dir_action = \"navigate\";\n    }\n\n    if (params.coords) {\n        map.center = params.coords;\n    } else {\n        map.query = params.query;\n        map.query_place_id = params.query_place_id;\n    }\n\n    return cleanObject(map);\n};\n\n// The map portion API is defined here essentially\nexport const createQueryParameters = ({\n    latitude,\n    longitude,\n    zoom = 15,\n    start = \"\",\n    end = \"\",\n    end_place_id = \"\",\n    query = \"\",\n    query_place_id = \"\",\n    navigate_mode = \"preview\", // preview has always being the default mode\n    travelType = \"drive\"\n}) => {\n    validateTravelType(travelType);\n\n    const formatArguments = {\n        start,\n        end,\n        end_place_id,\n        query,\n        query_place_id,\n        navigate_mode,\n        travelType,\n        zoom,\n        coords: \"\",\n    };\n\t\n    if (latitude && longitude) {\n        formatArguments.coords = geoCordStringify(latitude, longitude);\n    }\n\n    return {\n        apple: createAppleParams(formatArguments),\n        google: createGoogleParams(formatArguments)\n    };\n};\n\nexport function createOpenLink({ provider, ...params }) {\n    const mapProvider = !provider ? ((Platform.OS === \"ios\") ? \"apple\" : \"google\") : provider;\n    // Allow override provider, otherwise use the default provider\n    const mapLink = createMapLink({ provider: mapProvider, ...params });\n    return async () => Linking.openURL(mapLink).catch(err => console.error(\"An error occurred\", err));\n}\n\nexport function createMapLink({\n    provider = \"google\",\n    ...params\n}) {\n    // Assume query is first choice\n    const link = {\n        google: \"https://www.google.com/maps/search/?api=1&\",\n        apple: \"http://maps.apple.com/?\"\n    };\n\t\n    // Display if lat and longitude is specified\n    if (params.latitude && params.longitude) {\n        link.google = \"https://www.google.com/maps/@?api=1&map_action=map&\";\n\n        // if navigate_mode is navigate with latlng params\n        if (params.navigate_mode === \"navigate\") {\n            console.warn(\"navigate_mode='navigate' only supports 'end' prop\");\n            params[\"navigate_mode\"] = \"preview\";\n        }\n    }\n\n    // Directions if start and end is present\n    if (params.end) {\n        link.google = \"https://www.google.com/maps/dir/?api=1&\";\n    }\n\n    // throw an error to the developer\n    if (params.start && params.navigate_mode === \"navigate\") {\n        console.warn(\"navigate_mode='navigate' only supports 'end' prop\");\n    }\n\n    const queryParameters = createQueryParameters(params as any);\n    // Escaped commas cause unusual error with Google map\n    const appleQs = queryString.stringify(queryParameters.apple).replace(/%2C/g, \",\");\n    const googleQs = queryString.stringify(queryParameters.google).replace(/%2C/g, \",\");\n\n    link.google += googleQs;\n    link.apple  += appleQs;\n\n    return link[provider];\n}\n\nexport default function open(params) {\n    createOpenLink(params)();\n}\n"]}