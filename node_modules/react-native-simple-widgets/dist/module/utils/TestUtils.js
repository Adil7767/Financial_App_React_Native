import { ThemeProvider } from "styled-components";
import { render } from "react-native-testing-library";
import { shallow } from "enzyme";
import { oneOfType, element, arrayOf } from "prop-types";

const ProviderWrapper = ({
  children
}) => /*#__PURE__*/React.createElement(ThemeProvider, {
  theme: {}
}, children);

ProviderWrapper.propTypes = {
  children: oneOfType([element, arrayOf(element)])
};
export const shallowWithProvider = (component, options) => {
  return shallow(component, {
    wrappingComponent: ProviderWrapper,
    ...options
  });
};
export const renderWithProvider = (component, options) => {
  return render(component, {
    wrapper: ProviderWrapper,
    ...options
  });
}; // Hooks can only be called from a functional component or from other hooks

const TestHook = ({
  hook
}) => {
  hook();
  return null;
};

export const testHook = targetHook => {
  shallow( /*#__PURE__*/React.createElement(TestHook, {
    hook: targetHook
  }));
};
export { shallowWithProvider as shallow, renderWithProvider as render };
//# sourceMappingURL=TestUtils.js.map