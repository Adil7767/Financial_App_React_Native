{"version":3,"sources":["LocaleProvider.tsx"],"names":["React","Polyglot","defaultPhrases","LocaleProviderCtx","createContext","defaultLocale","currentLocale","polyglot","locale","phrases","en","setCurrentLocale","setPolyglot","newPolyglot","translate","key","option","t","getCurrentLocale","LocaleProvider","Component","isInit","fetchLocaleJson","props","then","result","ok","data","setState","setDefaultPolyglot","catch","componentDidMount","updatePolyglot","componentDidUpdate","prevProps","isFilterInitChanged","isLocaleChanged","render","children"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport Polyglot from \"node-polyglot\";\r\nimport defaultPhrases from \"./locales\";\r\n\r\nexport const LocaleProviderCtx = React.createContext<Polyglot>({});\r\n\r\nconst defaultLocale = \"en\";\r\nlet currentLocale = defaultLocale;\r\nlet polyglot = new Polyglot({\r\n    locale: currentLocale,\r\n    phrases: defaultPhrases.en,\r\n});\r\n\r\nexport const setCurrentLocale = locale => {\r\n    currentLocale = locale;\r\n};\r\n\r\nexport const setPolyglot = newPolyglot => {\r\n    polyglot = newPolyglot;\r\n};\r\n\r\nexport const translate = (key, option = {}) => {\r\n    return polyglot ? polyglot.t(key, option) : key;\r\n};\r\n\r\nexport const getCurrentLocale = () => currentLocale;\r\n\r\ntype Props = {\r\n    children: React.ReactNode,\r\n    locale?: string,\r\n    isInit: boolean,\r\n    loadingComponent?: React.ReactNode,\r\n    fetchLocaleJson: () => Promise<any>,\r\n};\r\n\r\nclass LocaleProvider extends React.Component<Props> {\r\n\r\n    state = {\r\n        polyglot,\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.updatePolyglot();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const isFilterInitChanged = prevProps.isInit !== this.props.isInit;\r\n        const isLocaleChanged = prevProps.locale !== this.props.locale;\r\n\r\n        if (this.props.isInit && (isFilterInitChanged || isLocaleChanged)) {\r\n            this.updatePolyglot();\r\n        }\r\n    }\r\n\r\n    updatePolyglot = () => {\r\n        const { locale = \"en\", isInit, fetchLocaleJson } = this.props;\r\n        if (!isInit) return;\r\n\r\n        if (typeof fetchLocaleJson === \"function\") {\r\n            fetchLocaleJson()\r\n                .then(result => {\r\n                    if (result.ok) {\r\n                        setCurrentLocale(locale);\r\n                        polyglot = new Polyglot({\r\n                            locale: locale,\r\n                            phrases: result.data,\r\n                        });\r\n                        this.setState({\r\n                            polyglot,\r\n                        });\r\n                    } else {\r\n                        this.setDefaultPolyglot();\r\n                    }\r\n                })\r\n                .catch(() => {\r\n                    this.setDefaultPolyglot();\r\n                });\r\n        }\r\n    };\r\n\r\n    setDefaultPolyglot = () => {\r\n        setCurrentLocale(defaultLocale);\r\n        polyglot = new Polyglot({\r\n            locale: defaultLocale,\r\n            phrases: defaultPhrases.en,\r\n        });\r\n        this.setState({\r\n            polyglot,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { children } = this.props;\r\n\r\n        return (\r\n            <LocaleProviderCtx.Provider value={polyglot}>\r\n                {children}\r\n            </LocaleProviderCtx.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LocaleProvider;\r\n"]}