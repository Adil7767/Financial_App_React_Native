function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from "react";
import Polyglot from "node-polyglot";
import defaultPhrases from "./locales";
export const LocaleProviderCtx = /*#__PURE__*/React.createContext({});
const defaultLocale = "en";
let currentLocale = defaultLocale;
let polyglot = new Polyglot({
  locale: currentLocale,
  phrases: defaultPhrases.en
});
export const setCurrentLocale = locale => {
  currentLocale = locale;
};
export const setPolyglot = newPolyglot => {
  polyglot = newPolyglot;
};
export const translate = (key, option = {}) => {
  return polyglot ? polyglot.t(key, option) : key;
};
export const getCurrentLocale = () => currentLocale;

class LocaleProvider extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      polyglot
    });

    _defineProperty(this, "updatePolyglot", () => {
      const {
        locale = "en",
        isInit,
        fetchLocaleJson
      } = this.props;
      if (!isInit) return;

      if (typeof fetchLocaleJson === "function") {
        fetchLocaleJson().then(result => {
          if (result.ok) {
            setCurrentLocale(locale);
            polyglot = new Polyglot({
              locale: locale,
              phrases: result.data
            });
            this.setState({
              polyglot
            });
          } else {
            this.setDefaultPolyglot();
          }
        }).catch(() => {
          this.setDefaultPolyglot();
        });
      }
    });

    _defineProperty(this, "setDefaultPolyglot", () => {
      setCurrentLocale(defaultLocale);
      polyglot = new Polyglot({
        locale: defaultLocale,
        phrases: defaultPhrases.en
      });
      this.setState({
        polyglot
      });
    });
  }

  componentDidMount() {
    this.updatePolyglot();
  }

  componentDidUpdate(prevProps) {
    const isFilterInitChanged = prevProps.isInit !== this.props.isInit;
    const isLocaleChanged = prevProps.locale !== this.props.locale;

    if (this.props.isInit && (isFilterInitChanged || isLocaleChanged)) {
      this.updatePolyglot();
    }
  }

  render() {
    const {
      children
    } = this.props;
    return /*#__PURE__*/React.createElement(LocaleProviderCtx.Provider, {
      value: polyglot
    }, children);
  }

}

export default LocaleProvider;
//# sourceMappingURL=LocaleProvider.js.map