{"version":3,"sources":["index.ts"],"names":["dateAdd","dateParseJSON","dateParse","dateFormat","dateFormatDistance","dateFormatRelative","TIME_FORMAT_ISO_STRING","newUTCDateTimeString","Date","toISOString","newUTCDateTimeAndDurationString","duration","parse","timeStr","format","parseSavedTime","time","formatDistance","time1","time2","formatDistanceToNow","formatRelative","formatRelativeToNow"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AAEA,OAAO,MAAMC,sBAAsB,GAAG,8BAA/B;AAEP,OAAO,MAAMC,oBAAoB,GAAG,MAAM;AACtC,SAAON,aAAa,CAAE,IAAIO,IAAJ,EAAD,CAAaC,WAAb,EAAD,CAApB;AACH,CAFM;AAIP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,+BAA+B,GAAIC,QAAD,IAAc;AACzD,SAAOX,OAAO,CAACC,aAAa,CAAE,IAAIO,IAAJ,EAAD,CAAaC,WAAb,EAAD,CAAd,EAA4CE,QAA5C,CAAd;AACH,CAFM;AAIP,OAAO,MAAMC,KAAK,GAAG,CAACC,OAAD,EAAkBC,MAAlB,KAA6B;AAC9C,SAAOZ,SAAS,CAACW,OAAD,EAAUC,MAAV,EAAkB,IAAIN,IAAJ,EAAlB,CAAhB;AACH,CAFM;AAIP,OAAO,MAAMO,cAAc,GAAIF,OAAD,IAAqB;AAC/C,SAAOZ,aAAa,CAACY,OAAD,CAApB;AACH,CAFM;AAIP,OAAO,MAAMC,MAAM,GAAG,CAACE,IAAD,EAAaF,MAAM,GAAGR,sBAAtB,KAAiD;AACnE,SAAOH,UAAU,CAACa,IAAD,EAAOF,MAAP,CAAjB;AACH,CAFM,C,CAIP;;AACA,OAAO,MAAMG,cAAc,GAAG,CAACC,KAAD,EAAcC,KAAd,KAA8B;AACxD,SAAOf,kBAAkB,CAACc,KAAD,EAAQC,KAAR,CAAzB;AACH,CAFM;AAIP,OAAO,MAAMC,mBAAmB,GAAIJ,IAAD,IAAgB;AAC/C,SAAOZ,kBAAkB,CAACY,IAAD,EAAO,IAAIR,IAAJ,EAAP,CAAzB;AACH,CAFM,C,CAIP;;AACA,OAAO,MAAMa,cAAc,GAAG,CAACH,KAAD,EAAcC,KAAd,KAA8B;AACxD,SAAOd,kBAAkB,CAACa,KAAD,EAAQC,KAAR,CAAzB;AACH,CAFM;AAIP,OAAO,MAAMG,mBAAmB,GAAIN,IAAD,IAAgB;AAC/C,SAAOX,kBAAkB,CAACW,IAAD,EAAO,IAAIR,IAAJ,EAAP,CAAzB;AACH,CAFM","sourcesContent":["import dateAdd from \"date-fns/add\";\nimport dateParseJSON from \"date-fns/parseJSON\";\nimport dateParse from \"date-fns/parse\";\nimport dateFormat from \"date-fns/format\";\nimport dateFormatDistance from \"date-fns/formatDistance\";\nimport dateFormatRelative from \"date-fns/formatRelative\";\n\nexport const TIME_FORMAT_ISO_STRING = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\n\nexport const newUTCDateTimeString = () => {\n    return dateParseJSON((new Date()).toISOString());\n};\n\n/**\n * format UTC time with a duration\n * @param duration ex: { hours: 1 }\n * @returns string\n */\nexport const newUTCDateTimeAndDurationString = (duration) => {\n    return dateAdd(dateParseJSON((new Date()).toISOString()), duration);\n};\n\nexport const parse = (timeStr: string, format) => {\n    return dateParse(timeStr, format, new Date());\n};\n\nexport const parseSavedTime = (timeStr: string) => {\n    return dateParseJSON(timeStr);\n};\n\nexport const format = (time: Date, format = TIME_FORMAT_ISO_STRING) => {\n    return dateFormat(time, format);\n};\n\n// How many\nexport const formatDistance = (time1: Date, time2: Date) => {\n    return dateFormatDistance(time1, time2);\n};\n\nexport const formatDistanceToNow = (time: Date) => {\n    return dateFormatDistance(time, new Date());\n};\n\n// When\nexport const formatRelative = (time1: Date, time2: Date) => {\n    return dateFormatRelative(time1, time2);\n};\n\nexport const formatRelativeToNow = (time: Date) => {\n    return dateFormatRelative(time, new Date());\n};\n"]}