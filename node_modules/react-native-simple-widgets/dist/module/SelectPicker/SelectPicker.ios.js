function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from "react";
import { StyleSheet, Text, TouchableHighlight, View, Appearance } from "react-native";
import { Picker } from "@react-native-picker/picker";
import Modal from "./Modal";
import { isIphoneX } from "./utils";
export const BACKGROUND_COLOR_LIGHT = "white";
export const BACKGROUND_COLOR_DARK = "#0E0E0E";
export const BORDER_COLOR = "#d5d5d5";
export const BORDER_COLOR_DARK = "#272729";
export const BORDER_RADIUS = 13;
export const BUTTON_FONT_WEIGHT = "normal";
export const BUTTON_FONT_COLOR = "#007ff9";
export const BUTTON_FONT_SIZE = 20;
export const HIGHLIGHT_COLOR_DARK = "#444444";
export const HIGHLIGHT_COLOR_LIGHT = "#ebebeb";
export const TITLE_FONT_SIZE = 20;
export const TITLE_COLOR = "#8f8f8f";

class SelectPicker extends React.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      currentDate: this.props.date,
      isPickerVisible: this.props.isVisible
    });

    _defineProperty(this, "didPressConfirm", false);

    _defineProperty(this, "handleCancel", () => {
      this.didPressConfirm = false;
      this.props.onCancel();
    });

    _defineProperty(this, "handleConfirm", () => {
      this.didPressConfirm = true;
      this.props.onConfirm(this.state.currentDate);
    });

    _defineProperty(this, "handleHide", () => {
      const {
        onHide
      } = this.props;

      if (onHide) {
        onHide(this.didPressConfirm, this.state.currentDate);
      }

      this.setState({
        isPickerVisible: false
      });
    });

    _defineProperty(this, "handleChange", (value, index) => {
      if (this.props.onChange) {
        this.props.onChange(value);
      }

      this.setState({
        currentDate: value
      });
    });
  }

  static getDerivedStateFromProps(props, state) {
    if (props.isVisible && !state.isPickerVisible) {
      return {
        currentDate: props.date,
        isPickerVisible: true
      };
    }

    return null;
  }

  render() {
    const {
      cancelTextIOS,
      confirmTextIOS,
      // customCancelButtonIOS,
      // customConfirmButtonIOS,
      // customHeaderIOS,
      // customPickerIOS,
      // date,
      headerTextIOS,
      isDarkModeEnabled,
      isVisible,
      modalStyleIOS,
      modalPropsIOS,
      pickerContainerStyleIOS,
      // onCancel,
      // onConfirm,
      // onChange,
      // onHide,
      options,
      ...otherProps
    } = this.props;
    const isAppearanceModuleAvailable = !!(Appearance && Appearance.getColorScheme);

    const _isDarkModeEnabled = isDarkModeEnabled === undefined && isAppearanceModuleAvailable ? Appearance.getColorScheme() === "dark" : isDarkModeEnabled || false; //   const ConfirmButtonComponent = customConfirmButtonIOS || ConfirmButton;


    const ConfirmButtonComponent = ConfirmButton; //   const CancelButtonComponent = customCancelButtonIOS || CancelButton;

    const CancelButtonComponent = CancelButton; //   const HeaderComponent = customHeaderIOS || Header;

    const HeaderComponent = Header; //   const PickerComponent = customPickerIOS || DateTimePicker;

    const PickerComponent = Picker;
    const themedContainerStyle = _isDarkModeEnabled ? pickerStyles.containerDark : pickerStyles.containerLight;
    const headerText = headerTextIOS || "Pick an options";
    return /*#__PURE__*/React.createElement(Modal, _extends({
      isVisible: isVisible,
      contentStyle: [pickerStyles.modal, modalStyleIOS],
      onBackdropPress: this.handleCancel,
      onHide: this.handleHide
    }, modalPropsIOS), /*#__PURE__*/React.createElement(View, {
      style: [pickerStyles.container, themedContainerStyle, pickerContainerStyleIOS]
    }, /*#__PURE__*/React.createElement(HeaderComponent, {
      label: headerText
    }), /*#__PURE__*/React.createElement(PickerComponent // display="spinner"
    , _extends({}, otherProps, {
      selectedValue: this.state.currentDate,
      onValueChange: this.handleChange
    }), options.map((item, index) => /*#__PURE__*/React.createElement(PickerComponent.Item, {
      label: item.label,
      value: item.value,
      key: index
    }))), /*#__PURE__*/React.createElement(ConfirmButtonComponent, {
      isDarkModeEnabled: _isDarkModeEnabled,
      onPress: this.handleConfirm,
      label: confirmTextIOS
    })), /*#__PURE__*/React.createElement(CancelButtonComponent, {
      isDarkModeEnabled: _isDarkModeEnabled,
      onPress: this.handleCancel,
      label: cancelTextIOS
    }));
  }

}

_defineProperty(SelectPicker, "defaultProps", {
  cancelTextIOS: "Cancel",
  confirmTextIOS: "Confirm",
  modalPropsIOS: {},
  date: new Date(),
  isDarkModeEnabled: undefined,
  isVisible: false,
  pickerContainerStyleIOS: {},
  options: []
});

const pickerStyles = StyleSheet.create({
  modal: {
    justifyContent: "flex-end",
    margin: 10
  },
  container: {
    borderRadius: BORDER_RADIUS,
    marginBottom: 8,
    overflow: "hidden"
  },
  containerLight: {
    backgroundColor: BACKGROUND_COLOR_LIGHT
  },
  containerDark: {
    backgroundColor: BACKGROUND_COLOR_DARK
  }
});
export const Header = ({
  label,
  style = headerStyles
}) => {
  return /*#__PURE__*/React.createElement(View, {
    style: style.root
  }, /*#__PURE__*/React.createElement(Text, {
    style: style.text
  }, label));
};
export const headerStyles = StyleSheet.create({
  root: {
    borderBottomColor: BORDER_COLOR,
    borderBottomWidth: StyleSheet.hairlineWidth,
    padding: 14,
    backgroundColor: "transparent"
  },
  text: {
    textAlign: "center",
    color: TITLE_COLOR,
    fontSize: TITLE_FONT_SIZE
  }
});
export const ConfirmButton = ({
  isDarkModeEnabled,
  onPress,
  label,
  style = confirmButtonStyles
}) => {
  const themedButtonStyle = isDarkModeEnabled ? confirmButtonStyles.buttonDark : confirmButtonStyles.buttonLight;
  const underlayColor = isDarkModeEnabled ? HIGHLIGHT_COLOR_DARK : HIGHLIGHT_COLOR_LIGHT;
  return /*#__PURE__*/React.createElement(TouchableHighlight, {
    style: [themedButtonStyle, style.button],
    underlayColor: underlayColor,
    onPress: onPress,
    accessible: true,
    accessibilityRole: "button",
    accessibilityLabel: label
  }, /*#__PURE__*/React.createElement(Text, {
    style: style.text
  }, label));
};
export const confirmButtonStyles = StyleSheet.create({
  button: {
    borderTopWidth: StyleSheet.hairlineWidth,
    backgroundColor: "transparent",
    height: 57,
    justifyContent: "center"
  },
  buttonLight: {
    borderColor: BORDER_COLOR
  },
  buttonDark: {
    borderColor: BORDER_COLOR_DARK
  },
  text: {
    textAlign: "center",
    color: BUTTON_FONT_COLOR,
    fontSize: BUTTON_FONT_SIZE,
    fontWeight: BUTTON_FONT_WEIGHT,
    backgroundColor: "transparent"
  }
});
export const CancelButton = ({
  isDarkModeEnabled,
  onPress,
  label,
  style = cancelButtonStyles
}) => {
  const themedButtonStyle = isDarkModeEnabled ? cancelButtonStyles.buttonDark : cancelButtonStyles.buttonLight;
  const underlayColor = isDarkModeEnabled ? HIGHLIGHT_COLOR_DARK : HIGHLIGHT_COLOR_LIGHT;
  return /*#__PURE__*/React.createElement(TouchableHighlight, {
    style: [style.button, themedButtonStyle],
    underlayColor: underlayColor,
    onPress: onPress,
    accessible: true,
    accessibilityRole: "button",
    accessibilityLabel: label
  }, /*#__PURE__*/React.createElement(Text, {
    style: style.text
  }, label));
};
export const cancelButtonStyles = StyleSheet.create({
  button: {
    borderRadius: BORDER_RADIUS,
    height: 57,
    marginBottom: isIphoneX() ? 20 : 0,
    justifyContent: "center"
  },
  buttonLight: {
    backgroundColor: BACKGROUND_COLOR_LIGHT
  },
  buttonDark: {
    backgroundColor: BACKGROUND_COLOR_DARK
  },
  text: {
    padding: 10,
    textAlign: "center",
    color: BUTTON_FONT_COLOR,
    fontSize: BUTTON_FONT_SIZE,
    fontWeight: "600",
    backgroundColor: "transparent"
  }
});
export default SelectPicker;
//# sourceMappingURL=SelectPicker.ios.js.map