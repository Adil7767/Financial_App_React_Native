{"version":3,"sources":["Modal.tsx"],"names":["React","Animated","DeviceEventEmitter","Dimensions","Easing","Modal","ReactNativeModal","StyleSheet","TouchableWithoutFeedback","MODAL_ANIM_DURATION","MODAL_BACKDROP_OPACITY","Component","isVisible","props","deviceWidth","get","width","deviceHeight","height","Value","dimensionsUpdate","window","state","setState","timing","animVal","easing","inOut","quad","useNativeDriver","duration","toValue","start","_isMounted","onHide","componentDidMount","show","addListener","handleDimensionsUpdate","componentWillUnmount","removeListener","componentDidUpdate","prevProps","hide","render","children","onBackdropPress","contentStyle","otherProps","backdropAnimatedStyle","opacity","interpolate","inputRange","outputRange","contentAnimatedStyle","transform","translateY","extrapolate","styles","backdrop","content","create","container","position","top","left","right","bottom","backgroundColor","flex","justifyContent"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACIC,QADJ,EAEIC,kBAFJ,EAGIC,UAHJ,EAIIC,MAJJ,EAKIC,KAAK,IAAIC,gBALb,EAMIC,UANJ,EAOIC,wBAPJ,QAQO,cARP;AAUA,MAAMC,mBAAmB,GAAG,GAA5B;AACA,MAAMC,sBAAsB,GAAG,GAA/B;AASA,OAAO,MAAML,KAAN,SAAoBL,KAAK,CAACW,SAA1B,CAA2C;AAAA;AAAA;;AAAA,mCAQtC;AACJC,MAAAA,SAAS,EAAE,KAAKC,KAAL,CAAWD,SADlB;AAEJE,MAAAA,WAAW,EAAEX,UAAU,CAACY,GAAX,CAAe,QAAf,EAAyBC,KAFlC;AAGJC,MAAAA,YAAY,EAAEd,UAAU,CAACY,GAAX,CAAe,QAAf,EAAyBG;AAHnC,KARsC;;AAAA,qCAcpC,IAAIjB,QAAQ,CAACkB,KAAb,CAAmB,CAAnB,CAdoC;;AAAA,wCAejC,KAfiC;;AAAA,oDA4CpBC,gBAAD,IAAsB;AAC3C,YAAMN,WAAW,GAAGM,gBAAgB,CAACC,MAAjB,CAAwBL,KAA5C;AACA,YAAMC,YAAY,GAAGG,gBAAgB,CAACC,MAAjB,CAAwBH,MAA7C;;AACA,UACIJ,WAAW,KAAK,KAAKQ,KAAL,CAAWR,WAA3B,IACAG,YAAY,KAAK,KAAKK,KAAL,CAAWL,YAFhC,EAGE;AACE,aAAKM,QAAL,CAAc;AAAET,UAAAA,WAAF;AAAeG,UAAAA;AAAf,SAAd;AACH;AACJ,KArD6C;;AAAA,kCAuDvC,MAAM;AACT,WAAKM,QAAL,CAAc;AAAEX,QAAAA,SAAS,EAAE;AAAb,OAAd;AACAX,MAAAA,QAAQ,CAACuB,MAAT,CAAgB,KAAKC,OAArB,EAA8B;AAC1BC,QAAAA,MAAM,EAAEtB,MAAM,CAACuB,KAAP,CAAavB,MAAM,CAACwB,IAApB,CADkB;AAE1B;AACAC,QAAAA,eAAe,EAAE,KAHS;AAI1BC,QAAAA,QAAQ,EAAErB,mBAJgB;AAK1BsB,QAAAA,OAAO,EAAE;AALiB,OAA9B,EAMGC,KANH;AAOH,KAhE6C;;AAAA,kCAkEvC,MAAM;AACT/B,MAAAA,QAAQ,CAACuB,MAAT,CAAgB,KAAKC,OAArB,EAA8B;AAC1BC,QAAAA,MAAM,EAAEtB,MAAM,CAACuB,KAAP,CAAavB,MAAM,CAACwB,IAApB,CADkB;AAE1B;AACAC,QAAAA,eAAe,EAAE,KAHS;AAI1BC,QAAAA,QAAQ,EAAErB,mBAJgB;AAK1BsB,QAAAA,OAAO,EAAE;AALiB,OAA9B,EAMGC,KANH,CAMS,MAAM;AACX,YAAI,KAAKC,UAAT,EAAqB;AACjB,eAAKV,QAAL,CAAc;AAAEX,YAAAA,SAAS,EAAE;AAAb,WAAd,EAAoC,KAAKC,KAAL,CAAWqB,MAA/C;AACH;AACJ,OAVD;AAWH,KA9E6C;AAAA;;AAiB9CC,EAAAA,iBAAiB,GAAG;AAChB,SAAKF,UAAL,GAAkB,IAAlB;;AACA,QAAI,KAAKX,KAAL,CAAWV,SAAf,EAA0B;AACtB,WAAKwB,IAAL;AACH;;AACDlC,IAAAA,kBAAkB,CAACmC,WAAnB,CACI,qBADJ,EAEI,KAAKC,sBAFT;AAIH;;AAEDC,EAAAA,oBAAoB,GAAG;AACnBrC,IAAAA,kBAAkB,CAACsC,cAAnB,CACI,qBADJ,EAEI,KAAKF,sBAFT;AAIA,SAAKL,UAAL,GAAkB,KAAlB;AACH;;AAEDQ,EAAAA,kBAAkB,CAACC,SAAD,EAAmB;AACjC,QAAI,KAAK7B,KAAL,CAAWD,SAAX,IAAwB,CAAC8B,SAAS,CAAC9B,SAAvC,EAAkD;AAC9C,WAAKwB,IAAL;AACH,KAFD,MAEO,IAAI,CAAC,KAAKvB,KAAL,CAAWD,SAAZ,IAAyB8B,SAAS,CAAC9B,SAAvC,EAAkD;AACrD,WAAK+B,IAAL;AACH;AACJ;;AAsCDC,EAAAA,MAAM,GAAG;AACL,UAAM;AACFC,MAAAA,QADE;AAEFC,MAAAA,eAFE;AAGFC,MAAAA,YAHE;AAIF,SAAGC;AAJD,QAKF,KAAKnC,KALT;AAMA,UAAM;AAAEI,MAAAA,YAAF;AAAgBH,MAAAA,WAAhB;AAA6BF,MAAAA;AAA7B,QAA2C,KAAKU,KAAtD;AACA,UAAM2B,qBAAqB,GAAG;AAC1BC,MAAAA,OAAO,EAAE,KAAKzB,OAAL,CAAa0B,WAAb,CAAyB;AAC9BC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADkB;AAE9BC,QAAAA,WAAW,EAAE,CAAC,CAAD,EAAI3C,sBAAJ;AAFiB,OAAzB;AADiB,KAA9B;AAMA,UAAM4C,oBAAoB,GAAG;AACzBC,MAAAA,SAAS,EAAE,CACP;AACIC,QAAAA,UAAU,EAAE,KAAK/B,OAAL,CAAa0B,WAAb,CAAyB;AACjCC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADqB;AAEjCC,UAAAA,WAAW,EAAE,CAACpC,YAAD,EAAe,CAAf,CAFoB;AAGjCwC,UAAAA,WAAW,EAAE;AAHoB,SAAzB;AADhB,OADO;AADc,KAA7B;AAWA,wBACI,oBAAC,gBAAD;AACI,MAAA,WAAW,MADf;AAEI,MAAA,aAAa,EAAC,MAFlB;AAGI,MAAA,OAAO,EAAE7C;AAHb,OAIQoC,UAJR,gBAMI,oBAAC,wBAAD;AAA0B,MAAA,OAAO,EAAEF;AAAnC,oBACI,oBAAC,QAAD,CAAU,IAAV;AACI,MAAA,KAAK,EAAE,CACHY,MAAM,CAACC,QADJ,EAEHV,qBAFG,EAGH;AAAEjC,QAAAA,KAAK,EAAEF,WAAT;AAAsBI,QAAAA,MAAM,EAAED;AAA9B,OAHG;AADX,MADJ,CANJ,EAeKL,SAAS,iBACN,oBAAC,QAAD,CAAU,IAAV;AACI,MAAA,KAAK,EAAE,CAAC8C,MAAM,CAACE,OAAR,EAAiBN,oBAAjB,EAAuCP,YAAvC,CADX;AAEI,MAAA,aAAa,EAAC;AAFlB,OAIKF,QAJL,CAhBR,CADJ;AA0BH;;AAnI6C;;gBAArCxC,K,kBAEa;AAClByC,EAAAA,eAAe,EAAE,MAAM,IADL;AAElBZ,EAAAA,MAAM,EAAE,MAAM,IAFI;AAGlBtB,EAAAA,SAAS,EAAE;AAHO,C;;AAoI1B,MAAM8C,MAAM,GAAGnD,UAAU,CAACsD,MAAX,CAAkB;AAC7BC,EAAAA,SAAS,EAAE;AACPC,IAAAA,QAAQ,EAAE,UADH;AAEPC,IAAAA,GAAG,EAAE,CAFE;AAGPC,IAAAA,IAAI,EAAE,CAHC;AAIPC,IAAAA,KAAK,EAAE,CAJA;AAKPC,IAAAA,MAAM,EAAE;AALD,GADkB;AAQ7BR,EAAAA,QAAQ,EAAE;AACNI,IAAAA,QAAQ,EAAE,UADJ;AAENC,IAAAA,GAAG,EAAE,CAFC;AAGNG,IAAAA,MAAM,EAAE,CAHF;AAINF,IAAAA,IAAI,EAAE,CAJA;AAKNC,IAAAA,KAAK,EAAE,CALD;AAMNE,IAAAA,eAAe,EAAE,OANX;AAONlB,IAAAA,OAAO,EAAE;AAPH,GARmB;AAiB7BU,EAAAA,OAAO,EAAE;AACLS,IAAAA,IAAI,EAAE,CADD;AAELC,IAAAA,cAAc,EAAE;AAFX;AAjBoB,CAAlB,CAAf;AAuBA,eAAejE,KAAf","sourcesContent":["import * as React from \"react\";\nimport {\n    Animated,\n    DeviceEventEmitter,\n    Dimensions,\n    Easing,\n    Modal as ReactNativeModal,\n    StyleSheet,\n    TouchableWithoutFeedback,\n} from \"react-native\";\n\nconst MODAL_ANIM_DURATION = 300;\nconst MODAL_BACKDROP_OPACITY = 0.4;\n\ntype Props = {\n    onBackdropPress?: () => void,\n    onHide?: () => void,\n    isVisible?: boolean,\n    contentStyle?: Record<string, any>,\n};\n\nexport class Modal extends React.Component<Props> {\n\n    static defaultProps = {\n        onBackdropPress: () => null,\n        onHide: () => null,\n        isVisible: false,\n    };\n\n    state = {\n        isVisible: this.props.isVisible,\n        deviceWidth: Dimensions.get(\"window\").width,\n        deviceHeight: Dimensions.get(\"window\").height,\n    };\n\n    animVal = new Animated.Value(0);\n    _isMounted = false;\n\n    componentDidMount() {\n        this._isMounted = true;\n        if (this.state.isVisible) {\n            this.show();\n        }\n        DeviceEventEmitter.addListener(\n            \"didUpdateDimensions\",\n            this.handleDimensionsUpdate\n        );\n    }\n\n    componentWillUnmount() {\n        DeviceEventEmitter.removeListener(\n            \"didUpdateDimensions\",\n            this.handleDimensionsUpdate\n        );\n        this._isMounted = false;\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.isVisible && !prevProps.isVisible) {\n            this.show();\n        } else if (!this.props.isVisible && prevProps.isVisible) {\n            this.hide();\n        }\n    }\n\n    handleDimensionsUpdate = (dimensionsUpdate) => {\n        const deviceWidth = dimensionsUpdate.window.width;\n        const deviceHeight = dimensionsUpdate.window.height;\n        if (\n            deviceWidth !== this.state.deviceWidth ||\n            deviceHeight !== this.state.deviceHeight\n        ) {\n            this.setState({ deviceWidth, deviceHeight });\n        }\n    };\n\n    show = () => {\n        this.setState({ isVisible: true });\n        Animated.timing(this.animVal, {\n            easing: Easing.inOut(Easing.quad),\n            // Using native driver in the modal makes the content flash\n            useNativeDriver: false,\n            duration: MODAL_ANIM_DURATION,\n            toValue: 1,\n        }).start();\n    };\n\n    hide = () => {\n        Animated.timing(this.animVal, {\n            easing: Easing.inOut(Easing.quad),\n            // Using native driver in the modal makes the content flash\n            useNativeDriver: false,\n            duration: MODAL_ANIM_DURATION,\n            toValue: 0,\n        }).start(() => {\n            if (this._isMounted) {\n                this.setState({ isVisible: false }, this.props.onHide);\n            }\n        });\n    };\n\n    render() {\n        const {\n            children,\n            onBackdropPress,\n            contentStyle,\n            ...otherProps\n        } = this.props;\n        const { deviceHeight, deviceWidth, isVisible } = this.state;\n        const backdropAnimatedStyle = {\n            opacity: this.animVal.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, MODAL_BACKDROP_OPACITY],\n            }),\n        };\n        const contentAnimatedStyle = {\n            transform: [\n                {\n                    translateY: this.animVal.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [deviceHeight, 0],\n                        extrapolate: \"clamp\",\n                    }),\n                },\n            ],\n        };\n        return (\n            <ReactNativeModal\n                transparent\n                animationType=\"none\"\n                visible={isVisible}\n                {...otherProps}\n            >\n                <TouchableWithoutFeedback onPress={onBackdropPress}>\n                    <Animated.View\n                        style={[\n                            styles.backdrop,\n                            backdropAnimatedStyle,\n                            { width: deviceWidth, height: deviceHeight },\n                        ]}\n                    />\n                </TouchableWithoutFeedback>\n                {isVisible && (\n                    <Animated.View\n                        style={[styles.content, contentAnimatedStyle, contentStyle]}\n                        pointerEvents=\"box-none\"\n                    >\n                        {children}\n                    </Animated.View>\n                )}\n            </ReactNativeModal>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n    },\n    backdrop: {\n        position: \"absolute\",\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        backgroundColor: \"black\",\n        opacity: 0,\n    },\n    content: {\n        flex: 1,\n        justifyContent: \"flex-end\",\n    },\n});\n\nexport default Modal;"]}