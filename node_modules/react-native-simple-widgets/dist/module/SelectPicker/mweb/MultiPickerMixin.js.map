{"version":3,"sources":["MultiPickerMixin.tsx"],"names":["React","ComposedComponent","Component","children","selectedValue","props","length","Children","map","c","cc","toArray","value","i","v","cb","getValue","concat","onChange","onValueChange","onScrollChange","render","prefixCls"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,eAAe,UAAUC,iBAAV,EAA6B;AAAA;;AAExC,0BAAO,cAAcD,KAAK,CAACE,SAApB,CAAqD;AAAA;AAAA;;AAAA,wCAS7C,MAAM;AACb,cAAM;AAAEC,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,YAA8B,KAAKC,KAAzC;;AACA,YAAID,aAAa,IAAIA,aAAa,CAACE,MAAnC,EAA2C;AACvC,iBAAOF,aAAP;AACH,SAFD,MAEO;AACH,cAAI,CAACD,QAAL,EAAe;AACX,mBAAO,EAAP;AACH;;AACD,iBAAOH,KAAK,CAACO,QAAN,CAAeC,GAAf,CAAmBL,QAAnB,EAA8BM,CAAD,IAAY;AAC5C,kBAAMC,EAAO,GAAGV,KAAK,CAACO,QAAN,CAAeI,OAAf,CAAuBF,CAAC,CAACN,QAAF,IAAcM,CAAC,CAACJ,KAAF,CAAQF,QAA7C,CAAhB;AACA,mBAAOO,EAAE,IAAIA,EAAE,CAAC,CAAD,CAAR,IAAeA,EAAE,CAAC,CAAD,CAAF,CAAML,KAAN,CAAYO,KAAlC;AACH,WAHM,CAAP;AAIH;AACJ,OAtBuD;;AAAA,wCAwB7C,CAACC,CAAD,EAAIC,CAAJ,EAAOC,EAAP,KAAc;AACrB,cAAMH,KAAK,GAAG,KAAKI,QAAL,GAAgBC,MAAhB,EAAd;AACAL,QAAAA,KAAK,CAACC,CAAD,CAAL,GAAWC,CAAX;;AACA,YAAIC,EAAJ,EAAQ;AACJA,UAAAA,EAAE,CAACH,KAAD,EAAQC,CAAR,CAAF;AACH;AACJ,OA9BuD;;AAAA,6CAgCxC,CAACA,CAAD,EAAIC,CAAJ,KAAU;AACtB,aAAKI,QAAL,CAAcL,CAAd,EAAiBC,CAAjB,EAAoB,KAAKT,KAAL,CAAWc,aAA/B;AACH,OAlCuD;;AAAA,8CAoCvC,CAACN,CAAD,EAAIC,CAAJ,KAAU;AACvB,aAAKI,QAAL,CAAcL,CAAd,EAAiBC,CAAjB,EAAoB,KAAKT,KAAL,CAAWe,cAA/B;AACH,OAtCuD;AAAA;;AAwCxDC,IAAAA,MAAM,GAAG;AACL,0BACI,oBAAC,iBAAD,eACQ,KAAKhB,KADb;AAEI,QAAA,QAAQ,EAAE,KAAKW,QAFnB;AAGI,QAAA,aAAa,EAAE,KAAKG,aAHxB;AAII,QAAA,cAAc,EAAE,KAAKd,KAAL,CAAWe,cAAX,IAA6B,KAAKA;AAJtD,SADJ;AAQH;;AAjDuD,GAA5D,0CAE0B;AAClBE,IAAAA,SAAS,EAAE,kBADO;AAElBH,IAAAA,aAAa,EAAE,MAAM,CACjB;AACH;AAJiB,GAF1B;AAmDH","sourcesContent":["import * as React from \"react\";\nimport MultiPickerProps from \"./MultiPickerProps\";\n\nexport default function (ComposedComponent) {\n\n    return class extends React.Component<MultiPickerProps, any> {\n\n        static defaultProps = {\n            prefixCls: \"rmc-multi-picker\",\n            onValueChange: () => {\n                // do something\n            },\n        };\n\n        getValue = () => {\n            const { children, selectedValue } = this.props;\n            if (selectedValue && selectedValue.length) {\n                return selectedValue;\n            } else {\n                if (!children) {\n                    return [];\n                }\n                return React.Children.map(children, (c: any) => {\n                    const cc: any = React.Children.toArray(c.children || c.props.children);\n                    return cc && cc[0] && cc[0].props.value;\n                });\n            }\n        }\n\n        onChange = (i, v, cb) => {\n            const value = this.getValue().concat();\n            value[i] = v;\n            if (cb) {\n                cb(value, i);\n            }\n        }\n\n        onValueChange = (i, v) => {\n            this.onChange(i, v, this.props.onValueChange);\n        }\n\n        onScrollChange = (i, v) => {\n            this.onChange(i, v, this.props.onScrollChange);\n        }\n\n        render() {\n            return (\n                <ComposedComponent\n                    {...this.props}\n                    getValue={this.getValue}\n                    onValueChange={this.onValueChange}\n                    onScrollChange={this.props.onScrollChange && this.onScrollChange}\n                />\n            );\n        }\n    };\n}\n"]}