function _templateObject() {
  const data = _taggedTemplateLiteral(["\n    background-image: -webkit-linear-gradient(top, #e7e7e7, #e7e7e7, transparent, transparent);\n    background-image: linear-gradient(to bottom, #e7e7e7, #e7e7e7, transparent, transparent);\n    background-position: bottom;\n    background-size: 100% 1px;\n    background-repeat: no-repeat;\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    &-left, &-right {\n        padding-left: 15px;\n        padding-right: 15px;\n    }\n"]);

  _templateObject = function () {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import * as React from "react";
import { Modal } from "react-native";
import PopupMixin from "./PopupMixin"; // import Touchable from 'rmc-feedback';

import styled from "styled-components";
const SelectPickerPopupHeader = styled.div(_templateObject());

const getModal = (props, visible, {
  getContent,
  hide,
  onDismiss,
  onOk
}) => {
  if (!visible) {
    return null;
  }

  const {
    prefixCls
  } = props;
  return /*#__PURE__*/React.createElement(Modal // prefixCls={`${prefixCls}`}
  // className={props.className || ''}
  , {
    visible: true // closable={false}
    // transitionName={props.transitionName || props.popupTransitionName}
    // maskTransitionName={props.maskTransitionName}
    // onClose={hide}
    ,
    style: props.style
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(SelectPickerPopupHeader, {
    className: "".concat(prefixCls, "-header")
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-item ").concat(prefixCls, "-header-left"),
    onClick: onDismiss
  }, props.dismissText), /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-item ").concat(prefixCls, "-title")
  }, props.title), /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-item ").concat(prefixCls, "-header-right"),
    onClick: onOk
  }, props.okText)), getContent()));
};

export default PopupMixin(getModal, {
  prefixCls: "rmc-picker-popup",
  WrapComponent: "span",
  triggerType: "onClick",
  pickerValueProp: "selectedValue",
  pickerValueChangeProp: "onValueChange"
});
//# sourceMappingURL=Popup.js.map