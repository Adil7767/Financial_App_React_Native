function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from "react";
import NativePicker from "./NativePicker";
const Item = NativePicker.Item;

class Picker extends React.Component {
  static Item() {// do something
  }

  getValue() {
    if ("selectedValue" in this.props) {
      return this.props.selectedValue;
    }

    const children = React.Children.toArray(this.props.children);
    return children && children[0] && children[0].props.value;
  }

  shouldComponentUpdate(nextProps) {
    return this.props.selectedValue !== nextProps.selectedValue || this.props.children !== nextProps.children;
  }

  render() {
    const children = React.Children.map(this.props.children, c => {
      return /*#__PURE__*/React.createElement(Item, {
        label: c.props.children + "",
        value: c.props.value + "",
        key: c.key
      });
    });
    return /*#__PURE__*/React.createElement(NativePicker, this.props, children);
  }

}

_defineProperty(Picker, "defaultProps", {
  children: []
});

export default Picker;
//# sourceMappingURL=Picker.native.js.map