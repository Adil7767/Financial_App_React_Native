function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from "react";
export default function (ComposedComponent) {
  var _class, _temp;

  return _temp = _class = class extends React.Component {
    constructor(...args) {
      super(...args);

      _defineProperty(this, "getValue", () => {
        const {
          children,
          selectedValue
        } = this.props;

        if (selectedValue && selectedValue.length) {
          return selectedValue;
        } else {
          if (!children) {
            return [];
          }

          return React.Children.map(children, c => {
            const cc = React.Children.toArray(c.children || c.props.children);
            return cc && cc[0] && cc[0].props.value;
          });
        }
      });

      _defineProperty(this, "onChange", (i, v, cb) => {
        const value = this.getValue().concat();
        value[i] = v;

        if (cb) {
          cb(value, i);
        }
      });

      _defineProperty(this, "onValueChange", (i, v) => {
        this.onChange(i, v, this.props.onValueChange);
      });

      _defineProperty(this, "onScrollChange", (i, v) => {
        this.onChange(i, v, this.props.onScrollChange);
      });
    }

    render() {
      return /*#__PURE__*/React.createElement(ComposedComponent, _extends({}, this.props, {
        getValue: this.getValue,
        onValueChange: this.onValueChange,
        onScrollChange: this.props.onScrollChange && this.onScrollChange
      }));
    }

  }, _defineProperty(_class, "defaultProps", {
    prefixCls: "rmc-multi-picker",
    onValueChange: () => {// do something
    }
  }), _temp;
}
//# sourceMappingURL=MultiPickerMixin.js.map