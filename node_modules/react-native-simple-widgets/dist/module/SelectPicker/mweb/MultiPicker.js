function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from "react"; // import classnames from 'classnames';

import MultiPickerMixin from "./MultiPickerMixin";

const MultiPicker = props => {
  const {
    // prefixCls,
    // className,
    rootNativeProps,
    children,
    style
  } = props;
  const selectedValue = props.getValue();
  const colElements = React.Children.map(children, (col, i) => {
    return /*#__PURE__*/React.cloneElement(col, {
      selectedValue: selectedValue[i],
      onValueChange: (...args) => props.onValueChange(i, ...args),
      onScrollChange: props.onScrollChange && ((...args) => props.onScrollChange(i, ...args))
    });
  });
  return /*#__PURE__*/React.createElement("div", _extends({}, rootNativeProps, {
    style: style // className={classnames(className, prefixCls)}

  }), colElements);
};

export default MultiPickerMixin(MultiPicker);
//# sourceMappingURL=MultiPicker.js.map