function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from "react";
export default function PopupMixin(getModal, platformProps) {
  var _class, _temp;

  return _temp = _class = class extends React.Component {
    constructor(props) {
      super(props);

      _defineProperty(this, "picker", void 0);

      _defineProperty(this, "onPickerChange", pickerValue => {
        if (this.state.pickerValue !== pickerValue) {
          this.setState({
            pickerValue
          });
          const {
            picker,
            pickerValueChangeProp
          } = this.props;

          if (picker && picker.props[pickerValueChangeProp]) {
            picker.props[pickerValueChangeProp](pickerValue);
          }
        }
      });

      _defineProperty(this, "saveRef", picker => {
        this.picker = picker;
      });

      _defineProperty(this, "onTriggerClick", e => {
        const child = this.props.children;
        const childProps = child.props || {};

        if (childProps[this.props.triggerType]) {
          childProps[this.props.triggerType](e);
        }

        this.fireVisibleChange(!this.state.visible);
      });

      _defineProperty(this, "onOk", () => {
        this.props.onOk(this.picker && this.picker.getValue());
        this.fireVisibleChange(false);
      });

      _defineProperty(this, "getContent", () => {
        if (this.props.picker) {
          let {
            pickerValue
          } = this.state;

          if (pickerValue === null) {
            pickerValue = this.props.value;
          }

          return /*#__PURE__*/React.cloneElement(this.props.picker, {
            [this.props.pickerValueProp]: pickerValue,
            [this.props.pickerValueChangeProp]: this.onPickerChange,
            ref: this.saveRef
          });
        } else {
          return this.props.content;
        }
      });

      _defineProperty(this, "onDismiss", () => {
        this.props.onDismiss();
        this.fireVisibleChange(false);
      });

      _defineProperty(this, "hide", () => {
        this.fireVisibleChange(false);
      });

      this.state = {
        pickerValue: "value" in this.props ? this.props.value : null,
        visible: this.props.visible || false
      };
    }

    UNSAFE_componentWillReceiveProps(nextProps) {
      if ("value" in nextProps) {
        this.setState({
          pickerValue: nextProps.value
        });
      }

      if ("visible" in nextProps) {
        this.setVisibleState(nextProps.visible);
      }
    }

    setVisibleState(visible) {
      this.setState({
        visible
      });

      if (!visible) {
        this.setState({
          pickerValue: null
        });
      }
    }

    fireVisibleChange(visible) {
      if (this.state.visible !== visible) {
        if (!("visible" in this.props)) {
          this.setVisibleState(visible);
        }

        this.props.onVisibleChange(visible);
      }
    }

    getRender() {
      const props = this.props;
      const children = props.children;

      if (!children) {
        return getModal(props, this.state.visible, {
          getContent: this.getContent,
          onOk: this.onOk,
          hide: this.hide,
          onDismiss: this.onDismiss
        });
      }

      const {
        WrapComponent,
        disabled
      } = this.props;
      const child = children;
      const newChildProps = {};

      if (!disabled) {
        newChildProps[props.triggerType] = this.onTriggerClick;
      }

      return /*#__PURE__*/React.createElement(WrapComponent, {
        style: props.wrapStyle
      }, /*#__PURE__*/React.cloneElement(child, newChildProps), getModal(props, this.state.visible, {
        getContent: this.getContent,
        onOk: this.onOk,
        hide: this.hide,
        onDismiss: this.onDismiss
      }));
    }

    render() {
      return this.getRender();
    }

  }, _defineProperty(_class, "defaultProps", {
    onVisibleChange: () => {// do something
    },
    okText: "Ok",
    dismissText: "Dismiss",
    title: "",
    onOk: () => {// do something
    },
    onDismiss: () => {// do something
    },
    ...platformProps
  }), _temp;
}
//# sourceMappingURL=PopupMixin.js.map