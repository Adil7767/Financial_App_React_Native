function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from "react";
import { View, TouchableHighlight, FlatList } from "react-native";
import Collapsible from "./Collapsible";
const COLLAPSIBLE_PROPS = ["align", "collapsed", "collapsedHeight", "renderChildrenCollapsed", "enablePointerEvents", "duration", "easing", "style", "onAnimationEnd"];

class Accordion extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "_renderContainer", (section, key, renderCollapsible) => {
      const {
        activeSections,
        sectionContainerStyle,
        expandFromBottom,
        sections,
        underlayColor,
        touchableProps,
        touchableComponent: Touchable,
        renderHeader,
        renderFooter,
        renderSectionTitle
      } = this.props;
      return /*#__PURE__*/React.createElement(View, {
        key: key,
        style: sectionContainerStyle
      }, renderSectionTitle(section, key, activeSections.includes(key)), expandFromBottom && renderCollapsible(section, key), /*#__PURE__*/React.createElement(Touchable, _extends({
        onPress: () => this._toggleSection(key),
        underlayColor: underlayColor
      }, touchableProps, {
        accessibilityState: {
          expanded: activeSections.includes(key)
        }
      }), renderHeader(section, key, activeSections.includes(key), sections)), !expandFromBottom && renderCollapsible(section, key), renderFooter && renderFooter(section, key, activeSections.includes(key), sections));
    });
  }

  _toggleSection(section) {
    if (!this.props.disabled) {
      const {
        activeSections,
        expandMultiple,
        onChange
      } = this.props;
      let updatedSections = [];

      if (activeSections.includes(section)) {
        updatedSections = activeSections.filter(a => a !== section);
      } else if (expandMultiple) {
        updatedSections = [...activeSections, section];
      } else {
        updatedSections = [section];
      }

      if (onChange) {
        onChange(updatedSections);
      }
    }
  }

  render() {
    const {
      activeSections,
      // expandMultiple,
      // onChange,
      containerStyle,
      // sectionContainerStyle,
      // expandFromBottom,
      sections,
      // underlayColor,
      // touchableProps,
      // touchableComponent: Touchable,
      onAnimationEnd,
      renderContent,
      // renderHeader,
      // renderFooter,
      // renderSectionTitle,
      // disabled,
      renderAsFlatList,
      keyExtractor,
      ...restProps
    } = this.props;
    const viewProps = {};
    const collapsibleProps = {};
    Object.keys(restProps).forEach(key => {
      if (COLLAPSIBLE_PROPS.includes(key)) {
        collapsibleProps[key] = restProps[key];
      } else {
        viewProps[key] = restProps[key];
      }
    });

    const renderCollapsible = (section, key) => /*#__PURE__*/React.createElement(Collapsible, _extends({
      collapsed: !activeSections.includes(key)
    }, collapsibleProps, {
      onAnimationEnd: () => onAnimationEnd(section, key)
    }), renderContent(section, key, activeSections.includes(key), sections));

    if (renderAsFlatList) {
      return /*#__PURE__*/React.createElement(FlatList, _extends({
        style: containerStyle,
        data: sections,
        extraData: activeSections,
        nestedScrollEnabled: true,
        keyExtractor: keyExtractor,
        renderItem: ({
          item,
          index
        }) => {
          const section = item;
          const key = keyExtractor(item, index);
          return this._renderContainer(section, key, renderCollapsible);
        }
      }, viewProps));
    }

    return /*#__PURE__*/React.createElement(View, _extends({
      style: containerStyle
    }, viewProps), sections.map((section, index) => {
      const key = keyExtractor(section, index);
      return this._renderContainer(section, key, renderCollapsible);
    }));
  }

}

_defineProperty(Accordion, "defaultProps", {
  underlayColor: "black",
  disabled: false,
  expandFromBottom: false,
  expandMultiple: false,
  touchableComponent: TouchableHighlight,
  keyExtractor: (item, index) => index,
  renderSectionTitle: () => null,
  onAnimationEnd: () => null,
  sectionContainerStyle: {},
  renderAsFlatList: false
});

export default Accordion;
//# sourceMappingURL=Accordion.js.map