{"version":3,"sources":["CalendarContainer.tsx"],"names":["dayjs","React","MIN_HEIGHT","useTheme","getDatesInMonth","getDatesInNextCustomDays","getDatesInNextOneDay","getDatesInNextThreeDays","getDatesInWeek","isAllDayEvent","modeToNum","typedMemo","CalendarBody","CalendarBodyForMonthView","CalendarHeader","CalendarHeaderForMonthView","_CalendarContainer","events","height","ampm","date","eventCellStyle","locale","hideNowIndicator","mode","overlapOffset","scrollOffsetMinutes","showTime","headerContainerStyle","bodyContainerStyle","swipeEnabled","weekStartsOn","onChangeDate","onPressCell","onPressDateHeader","onPressEvent","renderEvent","renderHeader","HeaderComponent","renderHeaderForMonthView","HeaderComponentForMonthView","weekEndsOn","maxVisibleEventCount","targetDate","setTargetDate","useState","useEffect","allDayEvents","useMemo","filter","event","start","end","daytimeEvents","dateRange","Error","toDate","slice","cellHeight","Math","max","theme","onSwipeHorizontal","useCallback","direction","isRTL","add","commonProps","headerProps","style","CalendarContainer"],"mappings":"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","sourcesContent":["import dayjs from \"dayjs\";\nimport * as React from \"react\";\nimport { ViewStyle } from \"react-native\";\n\nimport { MIN_HEIGHT } from \"./styles/commonStyles\";\nimport {\n    DateRangeHandler,\n    EventCellStyle,\n    EventRenderer,\n    HeaderRenderer,\n    HorizontalDirection,\n    ICalendarEvent,\n    Mode,\n    MonthHeaderRenderer,\n    WeekNum,\n} from \"./interfaces\";\nimport { useTheme } from \"./theme/ThemeContext\";\nimport {\n    getDatesInMonth,\n    getDatesInNextCustomDays,\n    getDatesInNextOneDay,\n    getDatesInNextThreeDays,\n    getDatesInWeek,\n    isAllDayEvent,\n    modeToNum,\n    typedMemo,\n} from \"./utils\";\nimport { CalendarBody } from \"./CalendarBody\";\nimport { CalendarBodyForMonthView } from \"./CalendarBodyForMonthView\";\nimport { CalendarHeader } from \"./CalendarHeader\";\nimport { CalendarHeaderForMonthView } from \"./CalendarHeaderForMonthView\";\n\nexport interface CalendarContainerProps<T> {\n    /**\n     * Events to be rendered. This is a required prop.\n     */\n    events: ICalendarEvent<T>[]\n\n    /**\n     * The height of calendar component. This is a required prop.\n     */\n    height: number\n\n    /**\n     * Adjusts the indentation of events that occur during the same time period. Defaults to 20 on web and 8 on mobile.\n     */\n    overlapOffset?: number\n\n    // Custom style\n    eventCellStyle?: EventCellStyle<T>\n    calendarContainerStyle?: ViewStyle\n    headerContainerStyle?: ViewStyle\n    bodyContainerStyle?: ViewStyle\n\n    // Custom renderer\n    renderEvent?: EventRenderer<T>\n    renderHeader?: HeaderRenderer<T>\n    renderHeaderForMonthView?: MonthHeaderRenderer\n\n    ampm?: boolean\n    date?: Date\n    locale?: string\n    hideNowIndicator?: boolean\n    mode?: Mode\n    scrollOffsetMinutes?: number\n    showTime?: boolean\n\n    swipeEnabled?: boolean\n    weekStartsOn?: WeekNum\n    onChangeDate?: DateRangeHandler\n    onPressCell?: (date: Date) => void\n    onPressDateHeader?: (date: Date) => void\n    onPressEvent?: (event: ICalendarEvent<T>) => void\n    weekEndsOn?: WeekNum\n    maxVisibleEventCount?: number\n}\n\nfunction _CalendarContainer<T>({\n    events,\n    height,\n    ampm = false,\n    date,\n    eventCellStyle,\n    locale = \"en\",\n    hideNowIndicator = false,\n    mode = \"week\",\n    overlapOffset,\n    scrollOffsetMinutes = 0,\n    showTime = true,\n    headerContainerStyle = {},\n    bodyContainerStyle = {},\n    swipeEnabled = true,\n    weekStartsOn = 0,\n    onChangeDate,\n    onPressCell,\n    onPressDateHeader,\n    onPressEvent,\n    renderEvent,\n    renderHeader: HeaderComponent = CalendarHeader,\n    renderHeaderForMonthView: HeaderComponentForMonthView = CalendarHeaderForMonthView,\n    weekEndsOn = 6,\n    maxVisibleEventCount = 3,\n}: CalendarContainerProps<T>) {\n    const [targetDate, setTargetDate] = React.useState(dayjs(date));\n\n    React.useEffect(() => {\n        if (date) {\n            setTargetDate(dayjs(date));\n        }\n    }, [date]);\n\n    const allDayEvents = React.useMemo(\n        () => events.filter((event) => isAllDayEvent(event.start, event.end)),\n        [events],\n    );\n\n    const daytimeEvents = React.useMemo(\n        () => events.filter((event) => !isAllDayEvent(event.start, event.end)),\n        [events],\n    );\n\n    const dateRange = React.useMemo(() => {\n        switch (mode) {\n        case \"month\":\n            return getDatesInMonth(targetDate, locale);\n        case \"week\":\n            return getDatesInWeek(targetDate, weekStartsOn, locale);\n        case \"3days\":\n            return getDatesInNextThreeDays(targetDate, locale);\n        case \"day\":\n            return getDatesInNextOneDay(targetDate, locale);\n        case \"custom\":\n            return getDatesInNextCustomDays(targetDate, weekStartsOn, weekEndsOn, locale);\n        default:\n            throw new Error(\n                `[react-native-big-calendar] The mode which you specified \"${mode}\" is not supported.`,\n            );\n        }\n    }, [mode, targetDate, locale, weekEndsOn, weekStartsOn]);\n\n    React.useEffect(() => {\n        if (onChangeDate) {\n            onChangeDate([dateRange[0].toDate(), dateRange.slice(-1)[0].toDate()]);\n        }\n    }, [dateRange, onChangeDate]);\n\n    const cellHeight = React.useMemo(() => Math.max(height - 30, MIN_HEIGHT) / 24, [height]);\n\n    const theme = useTheme();\n\n    const onSwipeHorizontal = React.useCallback(\n        (direction: HorizontalDirection) => {\n            if (!swipeEnabled) {\n                return;\n            }\n            if ((direction === \"LEFT\" && !theme.isRTL) || (direction === \"RIGHT\" && theme.isRTL)) {\n                setTargetDate(targetDate.add(modeToNum(mode, targetDate), \"day\"));\n            } else {\n                setTargetDate(targetDate.add(modeToNum(mode, targetDate) * -1, \"day\"));\n            }\n        },\n        [swipeEnabled, targetDate, mode, theme.isRTL],\n    );\n\n    const commonProps = {\n        cellHeight,\n        dateRange,\n        mode,\n    };\n\n    if (mode === \"month\") {\n        const headerProps = {\n            style: headerContainerStyle,\n            locale: locale,\n            weekStartsOn: weekStartsOn,\n        };\n        return (\n            <React.Fragment>\n                <HeaderComponentForMonthView {...headerProps} />\n                <CalendarBodyForMonthView<T>\n                    {...commonProps}\n                    style={bodyContainerStyle}\n                    containerHeight={height}\n                    events={daytimeEvents}\n                    eventCellStyle={eventCellStyle}\n                    weekStartsOn={weekStartsOn}\n                    hideNowIndicator={hideNowIndicator}\n                    onPressCell={onPressCell}\n                    onPressEvent={onPressEvent}\n                    onSwipeHorizontal={onSwipeHorizontal}\n                    renderEvent={renderEvent}\n                    targetDate={targetDate}\n                    maxVisibleEventCount={maxVisibleEventCount}\n                />\n            </React.Fragment>\n        );\n    }\n\n    const headerProps = {\n        ...commonProps,\n        style: headerContainerStyle,\n        allDayEvents: allDayEvents,\n        onPressDateHeader: onPressDateHeader,\n    };\n\n    return (\n        <React.Fragment>\n            <HeaderComponent {...headerProps} />\n            <CalendarBody\n                {...commonProps}\n                style={bodyContainerStyle}\n                containerHeight={height}\n                events={daytimeEvents}\n                eventCellStyle={eventCellStyle}\n                hideNowIndicator={hideNowIndicator}\n                overlapOffset={overlapOffset}\n                scrollOffsetMinutes={scrollOffsetMinutes}\n                ampm={ampm}\n                showTime={showTime}\n                onPressCell={onPressCell}\n                onPressEvent={onPressEvent}\n                onSwipeHorizontal={onSwipeHorizontal}\n                renderEvent={renderEvent}\n            />\n        </React.Fragment>\n    );\n}\n\nexport const CalendarContainer = typedMemo(_CalendarContainer);\n"]}