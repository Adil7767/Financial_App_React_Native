{"version":3,"sources":["CalendarEvent.tsx"],"names":["dayjs","React","OVERLAP_OFFSET","u","useCalendarTouchableOpacityProps","useTheme","DAY_MINUTES","getRelativeTopInDay","getStyleForOverlappingEvent","typedMemo","DefaultCalendarEventRenderer","getEventCellPositionStyle","start","end","relativeHeight","diff","relativeTop","height","top","_CalendarEvent","event","onPressEvent","eventCellStyle","showTime","eventCount","eventOrder","overlapOffset","renderEvent","ampm","theme","palettes","useMemo","palette","primary","eventCellOverlappings","touchableOpacityProps","injectedStyles","textColor","fgColors","map","p","contrastText","length","CalendarEvent"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,SAASC,cAAT,EAAyBC,CAAzB,QAAkC,uBAAlC;AACA,SAASC,gCAAT,QAAiD,0CAAjD;AAEA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,WAAT,EAAsBC,mBAAtB,EAA2CC,2BAA3C,EAAwEC,SAAxE,QAAyF,SAAzF;AACA,SAASC,4BAAT,QAA6C,gCAA7C;;AAEA,MAAMC,yBAAyB,GAAG,CAACC,KAAD,EAAcC,GAAd,KAA4B;AAC1D,QAAMC,cAAc,GAAG,OAAO,IAAIR,WAAX,IAA0BN,KAAK,CAACa,GAAD,CAAL,CAAWE,IAAX,CAAgBH,KAAhB,EAAuB,QAAvB,CAAjD;AACA,QAAMI,WAAW,GAAGT,mBAAmB,CAACP,KAAK,CAACY,KAAD,CAAN,CAAvC;AACA,SAAO;AACHK,IAAAA,MAAM,YAAKH,cAAL,MADH;AAEHI,IAAAA,GAAG,YAAKF,WAAL;AAFA,GAAP;AAIH,CAPD;;AAqBA,SAASG,cAAT,CAA2B;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA,YAFuB;AAGvBC,EAAAA,cAHuB;AAIvBC,EAAAA,QAJuB;AAKvBC,EAAAA,UAAU,GAAG,CALU;AAMvBC,EAAAA,UAAU,GAAG,CANU;AAOvBC,EAAAA,aAAa,GAAGxB,cAPO;AAQvByB,EAAAA,WARuB;AASvBC,EAAAA;AATuB,CAA3B,EAU0B;AACtB,QAAMC,KAAK,GAAGxB,QAAQ,EAAtB;AAEA,QAAMyB,QAAQ,GAAG7B,KAAK,CAAC8B,OAAN,CACb,MAAM,CAACF,KAAK,CAACG,OAAN,CAAcC,OAAf,EAAwB,GAAGJ,KAAK,CAACK,qBAAjC,CADO,EAEb,CAACL,KAAD,CAFa,CAAjB;AAKA,QAAMM,qBAAqB,GAAG/B,gCAAgC,CAAC;AAC3DgB,IAAAA,KAD2D;AAE3DE,IAAAA,cAF2D;AAG3DD,IAAAA,YAH2D;AAI3De,IAAAA,cAAc,EAAE,CACZzB,yBAAyB,CAACS,KAAK,CAACR,KAAP,EAAcQ,KAAK,CAACP,GAApB,CADb,EAEZL,2BAA2B,CAACiB,UAAD,EAAaC,aAAb,EAA4BI,QAA5B,CAFf,EAGZ3B,CAAC,CAAC,UAAD,CAHW,EAIZA,CAAC,CAAC,MAAD,CAJW,EAKZA,CAAC,CAAC,MAAD,CALW;AAJ2C,GAAD,CAA9D;AAaA,QAAMkC,SAAS,GAAGpC,KAAK,CAAC8B,OAAN,CAAc,MAAM;AAClC,UAAMO,QAAQ,GAAGR,QAAQ,CAACS,GAAT,CAAcC,CAAD,IAAOA,CAAC,CAACC,YAAtB,CAAjB;AACA,WAAOH,QAAQ,CAACd,UAAU,GAAGc,QAAQ,CAACI,MAAvB,CAAR,IAA0CJ,QAAQ,CAAC,CAAD,CAAzD;AACH,GAHiB,EAGf,CAACd,UAAD,EAAaM,QAAb,CAHe,CAAlB;;AAKA,MAAIH,WAAJ,EAAiB;AACb,WAAOA,WAAW,CAACP,KAAD,EAAQe,qBAAR,CAAlB;AACH;;AAED,sBACI,oBAAC,4BAAD;AACI,IAAA,KAAK,EAAEf,KADX;AAEI,IAAA,QAAQ,EAAEG,QAFd;AAGI,IAAA,IAAI,EAAEK,IAHV;AAII,IAAA,qBAAqB,EAAEO,qBAJ3B;AAKI,IAAA,SAAS,EAAEE;AALf,IADJ;AASH;;AAED,OAAO,MAAMM,aAAa,GAAGlC,SAAS,CAACU,cAAD,CAA/B","sourcesContent":["import dayjs from \"dayjs\";\nimport * as React from \"react\";\n\nimport { OVERLAP_OFFSET, u } from \"./styles/commonStyles\";\nimport { useCalendarTouchableOpacityProps } from \"./hooks/useCalendarTouchableOpacityProps\";\nimport { EventCellStyle, EventRenderer, ICalendarEvent } from \"./interfaces\";\nimport { useTheme } from \"./theme/ThemeContext\";\nimport { DAY_MINUTES, getRelativeTopInDay, getStyleForOverlappingEvent, typedMemo } from \"./utils\";\nimport { DefaultCalendarEventRenderer } from \"./DefaultCalendarEventRenderer\";\n\nconst getEventCellPositionStyle = (start: Date, end: Date) => {\n    const relativeHeight = 100 * (1 / DAY_MINUTES) * dayjs(end).diff(start, \"minute\");\n    const relativeTop = getRelativeTopInDay(dayjs(start));\n    return {\n        height: `${relativeHeight}%`,\n        top: `${relativeTop}%`,\n    };\n};\n\ninterface CalendarEventProps<T> {\n    event: ICalendarEvent<T>\n    onPressEvent?: (event: ICalendarEvent<T>) => void\n    eventCellStyle?: EventCellStyle<T>\n    showTime: boolean\n    eventCount?: number\n    eventOrder?: number\n    overlapOffset?: number\n    renderEvent?: EventRenderer<T>\n    ampm: boolean\n}\n\nfunction _CalendarEvent<T>({\n    event,\n    onPressEvent,\n    eventCellStyle,\n    showTime,\n    eventCount = 1,\n    eventOrder = 0,\n    overlapOffset = OVERLAP_OFFSET,\n    renderEvent,\n    ampm,\n}: CalendarEventProps<T>) {\n    const theme = useTheme();\n\n    const palettes = React.useMemo(\n        () => [theme.palette.primary, ...theme.eventCellOverlappings],\n        [theme],\n    );\n\n    const touchableOpacityProps = useCalendarTouchableOpacityProps({\n        event,\n        eventCellStyle,\n        onPressEvent,\n        injectedStyles: [\n            getEventCellPositionStyle(event.start, event.end),\n            getStyleForOverlappingEvent(eventOrder, overlapOffset, palettes),\n            u[\"absolute\"],\n            u[\"mt-2\"],\n            u[\"mx-3\"],\n        ],\n    });\n\n    const textColor = React.useMemo(() => {\n        const fgColors = palettes.map((p) => p.contrastText);\n        return fgColors[eventCount % fgColors.length] || fgColors[0];\n    }, [eventCount, palettes]);\n\n    if (renderEvent) {\n        return renderEvent(event, touchableOpacityProps);\n    }\n\n    return (\n        <DefaultCalendarEventRenderer\n            event={event}\n            showTime={showTime}\n            ampm={ampm}\n            touchableOpacityProps={touchableOpacityProps}\n            textColor={textColor}\n        />\n    );\n}\n\nexport const CalendarEvent = typedMemo(_CalendarEvent);\n"]}