{"version":3,"sources":["CalendarEventForMonthView.tsx"],"names":["React","Text","TouchableOpacity","View","u","useCalendarTouchableOpacityProps","useTheme","getEventSpanningInfo","typedMemo","_CalendarEventForMonthView","event","onPressEvent","eventCellStyle","renderEvent","date","dayOfTheWeek","calendarWidth","isRTL","theme","eventWidth","isMultipleDays","isMultipleDaysStart","eventWeekDuration","useMemo","touchableOpacityProps","injectedStyles","backgroundColor","palette","primary","main","position","width","zIndex","right","left","minHeight","isSame","start","color","contrastText","typography","xs","textAlign","title","CalendarEventForMonthView"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,EAAeC,gBAAf,EAAiCC,IAAjC,QAA6C,cAA7C;AAEA,SAASC,CAAT,QAAkB,uBAAlB;AACA,SAASC,gCAAT,QAAiD,0CAAjD;AAEA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,oBAAT,EAA+BC,SAA/B,QAAgD,SAAhD;;AAaA,SAASC,0BAAT,CAAuC;AACnCC,EAAAA,KADmC;AAEnCC,EAAAA,YAFmC;AAGnCC,EAAAA,cAHmC;AAInCC,EAAAA,WAJmC;AAKnCC,EAAAA,IALmC;AAMnCC,EAAAA,YANmC;AAOnCC,EAAAA,aAPmC;AAQnCC,EAAAA;AARmC,CAAvC,EAS0B;AACtB,QAAMC,KAAK,GAAGZ,QAAQ,EAAtB;AAEA,QAAM;AAAEa,IAAAA,UAAF;AAAcC,IAAAA,cAAd;AAA8BC,IAAAA,mBAA9B;AAAmDC,IAAAA;AAAnD,MAAyEtB,KAAK,CAACuB,OAAN,CAC3E,MAAMhB,oBAAoB,CAACG,KAAD,EAAQI,IAAR,EAAcC,YAAd,EAA4BC,aAA5B,CADiD,EAE3E,CAACF,IAAD,EAAOC,YAAP,EAAqBL,KAArB,EAA4BM,aAA5B,CAF2E,CAA/E;AAKA,QAAMQ,qBAAqB,GAAGnB,gCAAgC,CAAC;AAC3DK,IAAAA,KAD2D;AAE3DE,IAAAA,cAF2D;AAG3DD,IAAAA,YAH2D;AAI3Dc,IAAAA,cAAc,EAAE,CACZ;AAAEC,MAAAA,eAAe,EAAER,KAAK,CAACS,OAAN,CAAcC,OAAd,CAAsBC;AAAzC,KADY,EAEZR,mBAAmB,IAAIC,iBAAiB,GAAG,CAA3C,GACM;AACEQ,MAAAA,QAAQ,EAAE,UADZ;AAEEC,MAAAA,KAAK,EAAEZ,UAFT;AAGEa,MAAAA,MAAM,EAAE;AAHV,KADN,GAMM,EARM,EASZf,KAAK,GAAG;AAAEgB,MAAAA,KAAK,EAAE;AAAT,KAAH,GAAkB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KATX,EAUZ9B,CAAC,CAAC,MAAD,CAVW;AAJ2C,GAAD,CAA9D;;AAkBA,MAAIS,WAAJ,EAAiB;AACb,WAAOA,WAAW,CAACH,KAAD,EAAQc,qBAAR,CAAlB;AACH;;AAED,sBACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEW,MAAAA,SAAS,EAAE;AAAb;AAAb,KACK,CAAE,CAACf,cAAD,IAAmBN,IAAI,CAACsB,MAAL,CAAY1B,KAAK,CAAC2B,KAAlB,EAAyB,KAAzB,CAApB,IACGjB,cAAc,IAAIC,mBADtB,kBAEG,oBAAC,gBAAD,EAAsBG,qBAAtB,eACI,oBAAC,IAAD;AACI,IAAA,KAAK,EAAE,CACH;AAAEc,MAAAA,KAAK,EAAEpB,KAAK,CAACS,OAAN,CAAcC,OAAd,CAAsBW;AAA/B,KADG,EAEHrB,KAAK,CAACsB,UAAN,CAAiBC,EAFd,EAGHrC,CAAC,CAAC,UAAD,CAHE,EAIHa,KAAK,IAAI;AAAEyB,MAAAA,SAAS,EAAE;AAAb,KAJN,CADX;AAOI,IAAA,aAAa,EAAE;AAPnB,KASKhC,KAAK,CAACiC,KATX,CADJ,CAHR,CADJ;AAoBH;;AAED,OAAO,MAAMC,yBAAyB,GAAGpC,SAAS,CAACC,0BAAD,CAA3C","sourcesContent":["import dayjs from \"dayjs\";\nimport * as React from \"react\";\nimport { Text, TouchableOpacity, View } from \"react-native\";\n\nimport { u } from \"./styles/commonStyles\";\nimport { useCalendarTouchableOpacityProps } from \"./hooks/useCalendarTouchableOpacityProps\";\nimport { EventCellStyle, EventRenderer, ICalendarEvent } from \"./interfaces\";\nimport { useTheme } from \"./theme/ThemeContext\";\nimport { getEventSpanningInfo, typedMemo } from \"./utils\";\n\ninterface CalendarEventProps<T> {\n    event: ICalendarEvent<T>\n    onPressEvent?: (event: ICalendarEvent<T>) => void\n    eventCellStyle?: EventCellStyle<T>\n    renderEvent?: EventRenderer<T>\n    date: dayjs.Dayjs\n    dayOfTheWeek: number\n    calendarWidth: number\n    isRTL: boolean\n}\n\nfunction _CalendarEventForMonthView<T>({\n    event,\n    onPressEvent,\n    eventCellStyle,\n    renderEvent,\n    date,\n    dayOfTheWeek,\n    calendarWidth,\n    isRTL,\n}: CalendarEventProps<T>) {\n    const theme = useTheme();\n\n    const { eventWidth, isMultipleDays, isMultipleDaysStart, eventWeekDuration } = React.useMemo(\n        () => getEventSpanningInfo(event, date, dayOfTheWeek, calendarWidth),\n        [date, dayOfTheWeek, event, calendarWidth],\n    );\n\n    const touchableOpacityProps = useCalendarTouchableOpacityProps({\n        event,\n        eventCellStyle,\n        onPressEvent,\n        injectedStyles: [\n            { backgroundColor: theme.palette.primary.main },\n            isMultipleDaysStart && eventWeekDuration > 1\n                ? {\n                    position: \"absolute\",\n                    width: eventWidth,\n                    zIndex: 10000,\n                }\n                : {},\n            isRTL ? { right: 0 } : { left: 0 },\n            u[\"mt-2\"],\n        ],\n    });\n\n    if (renderEvent) {\n        return renderEvent(event, touchableOpacityProps);\n    }\n\n    return (\n        <View style={{ minHeight: 22 }}>\n            {((!isMultipleDays && date.isSame(event.start, \"day\")) ||\n                (isMultipleDays && isMultipleDaysStart)) && (\n                <TouchableOpacity {...touchableOpacityProps}>\n                    <Text\n                        style={[\n                            { color: theme.palette.primary.contrastText },\n                            theme.typography.xs,\n                            u[\"truncate\"],\n                            isRTL && { textAlign: \"right\" },\n                        ]}\n                        numberOfLines={1}\n                    >\n                        {event.title}\n                    </Text>\n                </TouchableOpacity>\n            )}\n        </View>\n    );\n}\n\nexport const CalendarEventForMonthView = typedMemo(_CalendarEventForMonthView);\n"]}