import dayjs from "dayjs";
import * as React from "react";
import { Platform, Text, TouchableOpacity, View } from "react-native";
import { eventCellCss, u } from "./styles/commonStyles";
import { useTheme } from "./theme/ThemeContext";
import { isToday, typedMemo } from "./utils";

function _CalendarHeader({
  dateRange,
  cellHeight,
  style,
  allDayEvents,
  onPressDateHeader
}) {
  const _onPress = React.useCallback(date => {
    onPressDateHeader && onPressDateHeader(date);
  }, [onPressDateHeader]);

  const theme = useTheme();
  const borderColor = {
    borderColor: theme.palette.gray["200"]
  };
  const primaryBg = {
    backgroundColor: theme.palette.primary.main
  };
  return /*#__PURE__*/React.createElement(View, {
    style: [u["border-b-2"], borderColor, theme.isRTL ? u["flex-row-reverse"] : u["flex-row"], style]
  }, /*#__PURE__*/React.createElement(View, {
    style: [u["z-10"], u["w-50"], borderColor]
  }), dateRange.map(date => {
    const _isToday = isToday(date);

    return /*#__PURE__*/React.createElement(TouchableOpacity, {
      style: [u["flex-1"], u["pt-2"]],
      onPress: () => _onPress(date.toDate()),
      disabled: onPressDateHeader === undefined,
      key: date.toString()
    }, /*#__PURE__*/React.createElement(View, {
      style: [u["justify-between"], {
        height: cellHeight
      }]
    }, /*#__PURE__*/React.createElement(Text, {
      style: [theme.typography.xs, u["text-center"], {
        color: _isToday ? theme.palette.primary.main : theme.palette.gray["500"]
      }]
    }, date.format("ddd")), /*#__PURE__*/React.createElement(View, {
      style: _isToday ? [primaryBg, u["h-36"], u["w-36"], u["pb-6"], u["rounded-full"], u["items-center"], u["justify-center"], u["self-center"], u["z-20"]] : [u["mb-6"]]
    }, /*#__PURE__*/React.createElement(Text, {
      style: [{
        color: _isToday ? theme.palette.primary.contrastText : theme.palette.gray["800"]
      }, theme.typography.xl, u["text-center"], Platform.OS === "web" && _isToday && u["mt-6"]]
    }, date.format("D")))), /*#__PURE__*/React.createElement(View, {
      style: [u["border-l"], {
        borderColor: theme.palette.gray["200"]
      }, {
        height: cellHeight
      }]
    }, allDayEvents.map(event => {
      if (!dayjs(date).isBetween(event.start, event.end, "day", "[]")) {
        return null;
      }

      return /*#__PURE__*/React.createElement(View, {
        style: [eventCellCss.style, primaryBg, u["mt-2"]],
        key: "".concat(event.start).concat(event.title)
      }, /*#__PURE__*/React.createElement(Text, {
        style: {
          fontSize: theme.typography.sm.fontSize,
          color: theme.palette.primary.contrastText
        }
      }, event.title));
    })));
  }));
}

export const CalendarHeader = typedMemo(_CalendarHeader);
//# sourceMappingURL=CalendarHeader.js.map