import * as React from "react";
import { Text, TouchableOpacity, View } from "react-native";
import { u } from "./styles/commonStyles";
import { useCalendarTouchableOpacityProps } from "./hooks/useCalendarTouchableOpacityProps";
import { useTheme } from "./theme/ThemeContext";
import { getEventSpanningInfo, typedMemo } from "./utils";

function _CalendarEventForMonthView({
  event,
  onPressEvent,
  eventCellStyle,
  renderEvent,
  date,
  dayOfTheWeek,
  calendarWidth,
  isRTL
}) {
  const theme = useTheme();
  const {
    eventWidth,
    isMultipleDays,
    isMultipleDaysStart,
    eventWeekDuration
  } = React.useMemo(() => getEventSpanningInfo(event, date, dayOfTheWeek, calendarWidth), [date, dayOfTheWeek, event, calendarWidth]);
  const touchableOpacityProps = useCalendarTouchableOpacityProps({
    event,
    eventCellStyle,
    onPressEvent,
    injectedStyles: [{
      backgroundColor: theme.palette.primary.main
    }, isMultipleDaysStart && eventWeekDuration > 1 ? {
      position: "absolute",
      width: eventWidth,
      zIndex: 10000
    } : {}, isRTL ? {
      right: 0
    } : {
      left: 0
    }, u["mt-2"]]
  });

  if (renderEvent) {
    return renderEvent(event, touchableOpacityProps);
  }

  return /*#__PURE__*/React.createElement(View, {
    style: {
      minHeight: 22
    }
  }, (!isMultipleDays && date.isSame(event.start, "day") || isMultipleDays && isMultipleDaysStart) && /*#__PURE__*/React.createElement(TouchableOpacity, touchableOpacityProps, /*#__PURE__*/React.createElement(Text, {
    style: [{
      color: theme.palette.primary.contrastText
    }, theme.typography.xs, u["truncate"], isRTL && {
      textAlign: "right"
    }],
    numberOfLines: 1
  }, event.title)));
}

export const CalendarEventForMonthView = typedMemo(_CalendarEventForMonthView);
//# sourceMappingURL=CalendarEventForMonthView.js.map