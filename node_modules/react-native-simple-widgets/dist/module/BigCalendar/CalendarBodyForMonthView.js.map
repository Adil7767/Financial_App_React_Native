{"version":3,"sources":["CalendarBodyForMonthView.tsx"],"names":["calendarize","dayjs","React","Platform","Text","TouchableOpacity","View","u","useNow","usePanResponder","useTheme","typedMemo","CalendarEventForMonthView","_CalendarBodyForMonthView","containerHeight","targetDate","style","onPressCell","events","onPressEvent","eventCellStyle","onSwipeHorizontal","hideNowIndicator","renderEvent","maxVisibleEventCount","weekStartsOn","now","calendarWidth","setCalendarWidth","useState","panResponder","weeks","toDate","minCellHeight","theme","height","borderColor","palette","gray","nativeEvent","layout","width","panHandlers","map","week","i","isRTL","OS","minHeight","d","date","ii","textAlign","typography","sm","color","format","primary","main","sort","a","b","start","isSame","aDuration","duration","end","diff","days","bDuration","getTime","filter","isBetween","startOf","endOf","reduce","elements","event","index","fontSize","marginTop","fontWeight","length","CalendarBodyForMonthView"],"mappings":"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","sourcesContent":["import calendarize from \"calendarize\";\nimport dayjs from \"dayjs\";\nimport * as React from \"react\";\nimport { Platform, Text, TouchableOpacity, View, ViewStyle } from \"react-native\";\n\nimport { u } from \"./styles/commonStyles\";\nimport { useNow } from \"./hooks/useNow\";\nimport { usePanResponder } from \"./hooks/usePanResponder\";\nimport {\n    EventCellStyle,\n    EventRenderer,\n    HorizontalDirection,\n    ICalendarEvent,\n    WeekNum,\n} from \"./interfaces\";\nimport { useTheme } from \"./theme/ThemeContext\";\nimport { typedMemo } from \"./utils\";\nimport { CalendarEventForMonthView } from \"./CalendarEventForMonthView\";\n\ninterface CalendarBodyForMonthViewProps<T> {\n    containerHeight: number\n    targetDate: dayjs.Dayjs\n    events: ICalendarEvent<T>[]\n    style: ViewStyle\n    eventCellStyle?: EventCellStyle<T>\n    hideNowIndicator?: boolean\n    onPressCell?: (date: Date) => void\n    onPressEvent?: (event: ICalendarEvent<T>) => void\n    onSwipeHorizontal?: (d: HorizontalDirection) => void\n    renderEvent?: EventRenderer<T>\n    maxVisibleEventCount: number\n    weekStartsOn: WeekNum\n}\n\nfunction _CalendarBodyForMonthView<T>({\n    containerHeight,\n    targetDate,\n    style,\n    onPressCell,\n    events,\n    onPressEvent,\n    eventCellStyle,\n    onSwipeHorizontal,\n    hideNowIndicator,\n    renderEvent,\n    maxVisibleEventCount,\n    weekStartsOn,\n}: CalendarBodyForMonthViewProps<T>) {\n    const { now } = useNow(!hideNowIndicator);\n    const [calendarWidth, setCalendarWidth] = React.useState<number>(0);\n\n    const panResponder = usePanResponder({\n        onSwipeHorizontal,\n    });\n\n    const weeks = calendarize(targetDate.toDate(), weekStartsOn);\n\n    const minCellHeight = containerHeight / 5 - 30;\n    const theme = useTheme();\n\n    return (\n        <View\n            style={[\n                {\n                    height: containerHeight,\n                },\n                u[\"flex-column\"],\n                u[\"flex-1\"],\n                u[\"border-b\"],\n                u[\"border-l\"],\n                u[\"border-r\"],\n                u[\"rounded\"],\n                { borderColor: theme.palette.gray[\"200\"] },\n                style,\n            ]}\n            onLayout={({ nativeEvent: { layout } }) => setCalendarWidth(layout.width)}\n            {...panResponder.panHandlers}\n        >\n            {weeks.map((week, i) => (\n                <View\n                    key={i}\n                    style={[\n                        u[\"flex-1\"],\n                        theme.isRTL ? u[\"flex-row-reverse\"] : u[\"flex-row\"],\n                        Platform.OS === \"android\" && style, // TODO: in Android, backgroundColor is not applied to child components\n                        {\n                            minHeight: minCellHeight,\n                        },\n                    ]}\n                >\n                    {week\n                        .map((d) => (d > 0 ? targetDate.date(d) : null))\n                        .map((date, ii) => (\n                            <TouchableOpacity\n                                onPress={() => date && onPressCell && onPressCell(date.toDate())}\n                                style={[\n                                    i > 0 && u[\"border-t\"],\n                                    theme.isRTL && ii > 0 && u[\"border-r\"],\n                                    !theme.isRTL && ii > 0 && u[\"border-l\"],\n                                    { borderColor: theme.palette.gray[\"200\"] },\n                                    u[\"p-2\"],\n                                    u[\"flex-1\"],\n                                    u[\"flex-column\"],\n                                    {\n                                        minHeight: minCellHeight,\n                                    },\n                                ]}\n                                key={ii}\n                            >\n                                <Text\n                                    style={[\n                                        { textAlign: \"center\" },\n                                        theme.typography.sm,\n                                        {\n                                            color:\n                                                date?.format(\"YYYY-MM-DD\") === now.format(\"YYYY-MM-DD\")\n                                                    ? theme.palette.primary.main\n                                                    : theme.palette.gray[\"800\"],\n                                        },\n                                    ]}\n                                >\n                                    {date && date.format(\"D\")}\n                                </Text>\n                                {date &&\n                                    events\n                                        .sort((a, b) => {\n                                            if (dayjs(a.start).isSame(b.start, \"day\")) {\n                                                const aDuration = dayjs.duration(dayjs(a.end).diff(dayjs(a.start))).days();\n                                                const bDuration = dayjs.duration(dayjs(b.end).diff(dayjs(b.start))).days();\n                                                return bDuration - aDuration;\n                                            }\n                                            return a.start.getTime() - b.start.getTime();\n                                        })\n                                        .filter(({ start, end }) =>\n                                            date.isBetween(\n                                                dayjs(start).startOf(\"day\"),\n                                                dayjs(end).endOf(\"day\"),\n                                                null,\n                                                \"[)\",\n                                            ),\n                                        )\n                                        .reduce(\n                                            (elements, event, index, events) => [\n                                                ...elements,\n                                                index > maxVisibleEventCount ? null : index === maxVisibleEventCount ? (\n                                                    <Text\n                                                        key={index}\n                                                        style={{ fontSize: 11, marginTop: 2, fontWeight: \"bold\" }}\n                                                    >\n                                                        {events.length - maxVisibleEventCount} More\n                                                    </Text>\n                                                ) : (\n                                                    <CalendarEventForMonthView\n                                                        key={index}\n                                                        event={event}\n                                                        eventCellStyle={eventCellStyle}\n                                                        onPressEvent={onPressEvent}\n                                                        renderEvent={renderEvent}\n                                                        date={date}\n                                                        dayOfTheWeek={ii}\n                                                        calendarWidth={calendarWidth}\n                                                        isRTL={theme.isRTL}\n                                                    />\n                                                ),\n                                            ],\n                                            [] as (null | JSX.Element)[],\n                                        )}\n                            </TouchableOpacity>\n                        ))}\n                </View>\n            ))}\n        </View>\n    );\n}\n\nexport const CalendarBodyForMonthView = typedMemo(_CalendarBodyForMonthView);\n"]}