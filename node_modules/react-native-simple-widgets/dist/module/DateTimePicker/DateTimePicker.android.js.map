{"version":3,"sources":["DateTimePicker.android.tsx"],"names":["React","DateTimePicker","areEqual","prevProps","nextProps","isVisible","date","getTime","DateTimePickerModal","memo","props","mode","onCancel","onConfirm","onHide","otherProps","currentDateRef","useRef","currentMode","setCurrentMode","useState","useEffect","handleChange","event","type","nextDate","current","Date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP,MAA2B,wCAA3B,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACvC,SACID,SAAS,CAACE,SAAV,KAAwBD,SAAS,CAACC,SAAlC,IACAF,SAAS,CAACG,IAAV,CAAeC,OAAf,OAA6BH,SAAS,CAACE,IAAV,CAAeC,OAAf,EAFjC;AAIH,CALD;;AAkBA,MAAMC,mBAAmB,gBAAGR,KAAK,CAACS,IAAN,CAAYC,KAAD,IAAkB;AACrD,QAAM;AAAEJ,IAAAA,IAAF;AAAQK,IAAAA,IAAR;AAAcN,IAAAA,SAAd;AAAyBO,IAAAA,QAAzB;AAAmCC,IAAAA,SAAnC;AAA8CC,IAAAA,MAA9C;AAAsD,OAAGC;AAAzD,MAAwEL,KAA9E;AACA,QAAMM,cAAc,GAAGhB,KAAK,CAACiB,MAAN,CAAaX,IAAb,CAAvB;AACA,QAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCnB,KAAK,CAACoB,QAAN,CAAe,IAAf,CAAtC;AAEApB,EAAAA,KAAK,CAACqB,SAAN,CAAgB,MAAM;AAClB,QAAIhB,SAAS,IAAIa,WAAW,KAAK,IAAjC,EAAuC;AACnCC,MAAAA,cAAc,CAACR,IAAI,KAAK,MAAT,GAAkB,MAAlB,GAA2B,MAA5B,CAAd;AACH,KAFD,MAEO,IAAI,CAACN,SAAL,EAAgB;AACnBc,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH;AACJ,GAND,EAMG,CAACd,SAAD,EAAYa,WAAZ,EAAyBP,IAAzB,CANH;AAQA,MAAI,CAACN,SAAD,IAAc,CAACa,WAAnB,EAAgC,OAAO,IAAP;;AAEhC,QAAMI,YAAY,GAAG,CAACC,KAAD,EAAQjB,IAAR,KAAiB;AAClC,QAAIiB,KAAK,CAACC,IAAN,KAAe,WAAnB,EAAgC;AAC5BZ,MAAAA,QAAQ;AACRE,MAAAA,MAAM,CAAC,KAAD,CAAN;AACA;AACH;;AACD,QAAIW,QAAQ,GAAGnB,IAAf;;AACA,QAAIK,IAAI,KAAK,UAAb,EAAyB;AACrB,UAAIO,WAAW,KAAK,MAApB,EAA4B;AACxBC,QAAAA,cAAc,CAAC,MAAD,CAAd;AACAH,QAAAA,cAAc,CAACU,OAAf,GAAyB,IAAIC,IAAJ,CAASrB,IAAT,CAAzB;AACA;AACH,OAJD,MAIO,IAAIY,WAAW,KAAK,MAApB,EAA4B;AAC/B,cAAMU,IAAI,GAAGZ,cAAc,CAACU,OAAf,CAAuBG,WAAvB,EAAb;AACA,cAAMC,KAAK,GAAGd,cAAc,CAACU,OAAf,CAAuBK,QAAvB,EAAd;AACA,cAAMC,GAAG,GAAGhB,cAAc,CAACU,OAAf,CAAuBO,OAAvB,EAAZ;AACA,cAAMC,KAAK,GAAG5B,IAAI,CAAC6B,QAAL,EAAd;AACA,cAAMC,OAAO,GAAG9B,IAAI,CAAC+B,UAAL,EAAhB;AACAZ,QAAAA,QAAQ,GAAG,IAAIE,IAAJ,CAASC,IAAT,EAAeE,KAAf,EAAsBE,GAAtB,EAA2BE,KAA3B,EAAkCE,OAAlC,CAAX;AACH;AACJ;;AACDvB,IAAAA,SAAS,CAACY,QAAD,CAAT;AACAX,IAAAA,MAAM,CAAC,IAAD,EAAOW,QAAP,CAAN;AACH,GAvBD;;AAyBA,sBACI,oBAAC,cAAD,eACQV,UADR;AAEI,IAAA,IAAI,EAAEG,WAFV;AAGI,IAAA,KAAK,EAAEZ,IAHX;AAII,IAAA,QAAQ,EAAEgB;AAJd,KADJ;AAQH,CAhD2B,EAiD5BpB,QAjD4B,CAA5B,C,CAoDA;AACA;AACA;AACA;;AAEA,eAAeM,mBAAf","sourcesContent":["import * as React from \"react\";\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\n\n// Memo workaround for https://github.com/react-native-community/datetimepicker/issues/54\nconst areEqual = (prevProps, nextProps) => {\n    return (\n        prevProps.isVisible === nextProps.isVisible &&\n        prevProps.date.getTime() === nextProps.date.getTime()\n    );\n};\n\ntype Props = {\n    date?: Date,\n    mode?: string,\n    isVisible?: boolean,\n    onCancel: () => void,\n    onConfirm: (date) => void,\n    onHide?: (flag, date?) => void,\n    maximumDate?: Date,\n    minimumDate?: Date,\n};\n\nconst DateTimePickerModal = React.memo((props: Props) => {\n    const { date, mode, isVisible, onCancel, onConfirm, onHide, ...otherProps } = props;\n    const currentDateRef = React.useRef(date);\n    const [currentMode, setCurrentMode] = React.useState(null);\n\n    React.useEffect(() => {\n        if (isVisible && currentMode === null) {\n            setCurrentMode(mode === \"time\" ? \"time\" : \"date\");\n        } else if (!isVisible) {\n            setCurrentMode(null);\n        }\n    }, [isVisible, currentMode, mode]);\n\n    if (!isVisible || !currentMode) return null;\n\n    const handleChange = (event, date) => {\n        if (event.type === \"dismissed\") {\n            onCancel();\n            onHide(false);\n            return;\n        }\n        let nextDate = date;\n        if (mode === \"datetime\") {\n            if (currentMode === \"date\") {\n                setCurrentMode(\"time\");\n                currentDateRef.current = new Date(date);\n                return;\n            } else if (currentMode === \"time\") {\n                const year = currentDateRef.current.getFullYear();\n                const month = currentDateRef.current.getMonth();\n                const day = currentDateRef.current.getDate();\n                const hours = date.getHours();\n                const minutes = date.getMinutes();\n                nextDate = new Date(year, month, day, hours, minutes);\n            }\n        }\n        onConfirm(nextDate);\n        onHide(true, nextDate);\n    };\n\n    return (\n        <DateTimePicker\n            {...otherProps}\n            mode={currentMode}\n            value={date}\n            onChange={handleChange}\n        />\n    );\n},\nareEqual\n);\n\n// DateTimePickerModal.defaultProps = {\n//     date: new Date(),\n//     isVisible: false,\n// };\n\nexport default DateTimePickerModal;\n"]}