function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from "react";
import { Animated, DeviceEventEmitter, Dimensions, Easing, Modal as ReactNativeModal, StyleSheet, TouchableWithoutFeedback } from "react-native";
const MODAL_ANIM_DURATION = 300;
const MODAL_BACKDROP_OPACITY = 0.4;
export class Modal extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      isVisible: this.props.isVisible,
      deviceWidth: Dimensions.get("window").width,
      deviceHeight: Dimensions.get("window").height
    });

    _defineProperty(this, "animVal", new Animated.Value(0));

    _defineProperty(this, "_isMounted", false);

    _defineProperty(this, "handleDimensionsUpdate", dimensionsUpdate => {
      const deviceWidth = dimensionsUpdate.window.width;
      const deviceHeight = dimensionsUpdate.window.height;

      if (deviceWidth !== this.state.deviceWidth || deviceHeight !== this.state.deviceHeight) {
        this.setState({
          deviceWidth,
          deviceHeight
        });
      }
    });

    _defineProperty(this, "show", () => {
      this.setState({
        isVisible: true
      });
      Animated.timing(this.animVal, {
        easing: Easing.inOut(Easing.quad),
        // Using native driver in the modal makes the content flash
        useNativeDriver: false,
        duration: MODAL_ANIM_DURATION,
        toValue: 1
      }).start();
    });

    _defineProperty(this, "hide", () => {
      Animated.timing(this.animVal, {
        easing: Easing.inOut(Easing.quad),
        // Using native driver in the modal makes the content flash
        useNativeDriver: false,
        duration: MODAL_ANIM_DURATION,
        toValue: 0
      }).start(() => {
        if (this._isMounted) {
          this.setState({
            isVisible: false
          }, this.props.onHide);
        }
      });
    });
  }

  componentDidMount() {
    this._isMounted = true;

    if (this.state.isVisible) {
      this.show();
    }

    DeviceEventEmitter.addListener("didUpdateDimensions", this.handleDimensionsUpdate);
  }

  componentWillUnmount() {
    DeviceEventEmitter.removeListener("didUpdateDimensions", this.handleDimensionsUpdate);
    this._isMounted = false;
  }

  componentDidUpdate(prevProps) {
    if (this.props.isVisible && !prevProps.isVisible) {
      this.show();
    } else if (!this.props.isVisible && prevProps.isVisible) {
      this.hide();
    }
  }

  render() {
    const {
      children,
      onBackdropPress,
      contentStyle,
      ...otherProps
    } = this.props;
    const {
      deviceHeight,
      deviceWidth,
      isVisible
    } = this.state;
    const backdropAnimatedStyle = {
      opacity: this.animVal.interpolate({
        inputRange: [0, 1],
        outputRange: [0, MODAL_BACKDROP_OPACITY]
      })
    };
    const contentAnimatedStyle = {
      transform: [{
        translateY: this.animVal.interpolate({
          inputRange: [0, 1],
          outputRange: [deviceHeight, 0],
          extrapolate: "clamp"
        })
      }]
    };
    return /*#__PURE__*/React.createElement(ReactNativeModal, _extends({
      transparent: true,
      animationType: "none",
      visible: isVisible
    }, otherProps), /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {
      onPress: onBackdropPress
    }, /*#__PURE__*/React.createElement(Animated.View, {
      style: [styles.backdrop, backdropAnimatedStyle, {
        width: deviceWidth,
        height: deviceHeight
      }]
    })), isVisible && /*#__PURE__*/React.createElement(Animated.View, {
      style: [styles.content, contentAnimatedStyle, contentStyle],
      pointerEvents: "box-none"
    }, children));
  }

}

_defineProperty(Modal, "defaultProps", {
  onBackdropPress: () => null,
  onHide: () => null,
  isVisible: false
});

const styles = StyleSheet.create({
  container: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  backdrop: {
    position: "absolute",
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: "black",
    opacity: 0
  },
  content: {
    flex: 1,
    justifyContent: "flex-end"
  }
});
export default Modal;
//# sourceMappingURL=Modal.js.map