{"version":3,"sources":["Rect.tsx"],"names":["Rect","constructor","left","top","right","bottom","set","width","height","centerX","centerY","offset","dx","dy","copy","equals","rect","epsilon","Math","abs","isValid"],"mappings":";;AAAA,eAAe,MAAMA,IAAN,CAAW;AAOtBC,EAAAA,WAAW,CAACC,IAAD,EAAQC,GAAR,EAAcC,KAAd,EAAsBC,MAAtB,EAA+B;AAAA;;AAAA;;AAAA;;AAAA;;AACtC,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AAEDC,EAAAA,GAAG,CAACJ,IAAD,EAAOC,GAAP,EAAYC,KAAZ,EAAmBC,MAAnB,EAA2B;AAC1B,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AAEDE,EAAAA,KAAK,GAAG;AACJ,WAAO,KAAKH,KAAL,GAAa,KAAKF,IAAzB;AACH;;AAEDM,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKH,MAAL,GAAc,KAAKF,GAA1B;AACH;;AAEDM,EAAAA,OAAO,GAAG;AACN,WAAO,CAAC,KAAKP,IAAL,GAAY,KAAKE,KAAlB,IAA2B,CAAlC;AACH;;AAEDM,EAAAA,OAAO,GAAG;AACN,WAAO,CAAC,KAAKP,GAAL,GAAW,KAAKE,MAAjB,IAA2B,CAAlC;AACH;;AAEDM,EAAAA,MAAM,CAACC,EAAD,EAAKC,EAAL,EAAS;AACX,SAAKX,IAAL,IAAaU,EAAb;AACA,SAAKR,KAAL,IAAcQ,EAAd;AACA,SAAKT,GAAL,IAAYU,EAAZ;AACA,SAAKR,MAAL,IAAeQ,EAAf;AACA,WAAO,IAAP;AACH;;AAEDC,EAAAA,IAAI,GAAG;AACH,WAAO,IAAId,IAAJ,CAAS,KAAKE,IAAd,EAAoB,KAAKC,GAAzB,EAA8B,KAAKC,KAAnC,EAA0C,KAAKC,MAA/C,CAAP;AACH;;AAEDU,EAAAA,MAAM,CAACC,IAAD,EAAOC,OAAP,EAAgB;AAClB,QAAI,CAACA,OAAL,EAAc;AACV,aACI,KAAKf,IAAL,KAAcc,IAAI,CAACd,IAAnB,IACA,KAAKC,GAAL,KAAaa,IAAI,CAACb,GADlB,IAEA,KAAKC,KAAL,KAAeY,IAAI,CAACZ,KAFpB,IAGA,KAAKC,MAAL,KAAgBW,IAAI,CAACX,MAJzB;AAMH,KAPD,MAOO;AACH,aACIa,IAAI,CAACC,GAAL,CAAS,KAAKjB,IAAL,GAAYc,IAAI,CAACd,IAA1B,IAAkCe,OAAlC,IACAC,IAAI,CAACC,GAAL,CAAS,KAAKhB,GAAL,GAAWa,IAAI,CAACb,GAAzB,IAAgCc,OADhC,IAEAC,IAAI,CAACC,GAAL,CAAS,KAAKf,KAAL,GAAaY,IAAI,CAACZ,KAA3B,IAAoCa,OAFpC,IAGAC,IAAI,CAACC,GAAL,CAAS,KAAKd,MAAL,GAAcW,IAAI,CAACX,MAA5B,IAAsCY,OAJ1C;AAMH;AACJ;;AAEDG,EAAAA,OAAO,GAAG;AACN,QAAI,OAAO,KAAKlB,IAAZ,KAAqB,QAArB,IACA,OAAO,KAAKE,KAAZ,KAAsB,QADtB,IAEA,OAAO,KAAKD,GAAZ,KAAoB,QAFpB,IAGA,OAAO,KAAKE,MAAZ,KAAuB,QAH3B,EAGqC;AACjC,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AA3EqB","sourcesContent":["export default class Rect {\n\n    left;\n    top;\n    right;\n    bottom;\n\n    constructor(left?, top?, right?, bottom?) {\n        this.left = left;\n        this.top = top;\n        this.right = right;\n        this.bottom = bottom;\n    }\n\n    set(left, top, right, bottom) {\n        this.left = left;\n        this.top = top;\n        this.right = right;\n        this.bottom = bottom;\n    }\n\n    width() {\n        return this.right - this.left;\n    }\n\n    height() {\n        return this.bottom - this.top;\n    }\n\n    centerX() {\n        return (this.left + this.right) / 2;\n    }\n\n    centerY() {\n        return (this.top + this.bottom) / 2;\n    }\n\n    offset(dx, dy) {\n        this.left += dx;\n        this.right += dx;\n        this.top += dy;\n        this.bottom += dy;\n        return this;\n    }\n\n    copy() {\n        return new Rect(this.left, this.top, this.right, this.bottom);\n    }\n\n    equals(rect, epsilon) {\n        if (!epsilon) {\n            return (\n                this.left === rect.left &&\n                this.top === rect.top &&\n                this.right === rect.right &&\n                this.bottom === rect.bottom\n            );\n        } else {\n            return (\n                Math.abs(this.left - rect.left) < epsilon &&\n                Math.abs(this.top - rect.top) < epsilon &&\n                Math.abs(this.right - rect.right) < epsilon &&\n                Math.abs(this.bottom - rect.bottom) < epsilon\n            );\n        }\n    }\n\n    isValid() {\n        if (typeof this.left === \"number\" &&\n            typeof this.right === \"number\" &&\n            typeof this.top === \"number\" &&\n            typeof this.bottom === \"number\") {\n            return true;\n        }\n        return false;\n    }\n}\n"]}