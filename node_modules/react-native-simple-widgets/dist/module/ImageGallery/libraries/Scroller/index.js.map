{"version":3,"sources":["index.tsx"],"names":["ViscousFluidInterpolator","currentAnimationTimeMillis","SCROLL_FRICTION","DEFAULT_DURATION","SCROLL_MODE","FLING_MODE","DECELERATION_RATE","Math","log","INFLEXION","START_TENSION","END_TENSION","P1","P2","NB_SAMPLES","SPLINE_POSITION","SPLINE_TIME","GRAVITY_EARTH","x_min","y_min","i","alpha","x_max","x","tx","coef","abs","y_max","y","dy","signum","number","isNaN","NaN","sig","Scroller","constructor","flywheel","onScrollCallback","mCurrX","mCurrY","mFinished","mInterpolator","mPpi","mDeceleration","computeDeceleration","mFlywheel","mPhysicalCoeff","mFlingFriction","friction","isFinished","forceFinished","finished","getCurrX","getCurrY","getCurrVelocity","mMode","mCurrVelocity","mVelocity","timePassed","computeScrollOffset","mStartTime","mDuration","getInterpolation","mDurationReciprocal","mStartX","round","mDeltaX","mStartY","mDeltaY","t","index","parseInt","distanceCoef","velocityCoef","t_inf","t_sup","d_inf","d_sup","mDistance","mFinalX","mFinalY","min","mMaxY","max","mMinY","dx","mLastX","mLastY","startScroll","startX","startY","duration","performAnimation","fling","velocityX","velocityY","minX","maxX","minY","maxY","oldVel","hyp","hypot","ndx","ndy","oldVelocityX","oldVelocityY","velocity","getSplineFlingDuration","coeffX","coeffY","totalDistance","getSplineFlingDistance","mMinX","mMaxX","getSplineDeceleration","l","decelMinusOne","exp","requestAnimationFrame","bind","abortAnimation","extendDuration","extend","passed","setFinalX","newX","setFinalY","newY","debugInfo"],"mappings":"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","sourcesContent":["/**\n * Inspired by Android Scroller\n */\n\nimport ViscousFluidInterpolator from \"./ViscousFluidInterpolator\";\nimport { currentAnimationTimeMillis } from \"./AnimationUtils\";\n\n/**\n * The coefficient of friction applied to flings/scrolls.\n * @type {number}\n */\n// const SCROLL_FRICTION = 0.015;\nconst SCROLL_FRICTION = 0.03;\n\nconst DEFAULT_DURATION = 250;\nconst SCROLL_MODE = 0;\nconst FLING_MODE = 1;\n\nconst DECELERATION_RATE = Math.log(0.78) / Math.log(0.9);\nconst INFLEXION = 0.35; // Tension lines cross at (INFLEXION, 1)\nconst START_TENSION = 0.5;\nconst END_TENSION = 1.0;\nconst P1 = START_TENSION * INFLEXION;\nconst P2 = 1.0 - END_TENSION * (1.0 - INFLEXION);\n\nconst NB_SAMPLES = 100;\nconst SPLINE_POSITION = [];\nconst SPLINE_TIME = [];\n\nconst GRAVITY_EARTH = 9.80665;\n\n(function () {\n    let x_min = 0;\n    let y_min = 0;\n    for (let i = 0; i < NB_SAMPLES; i++) {\n        const alpha = i / NB_SAMPLES;\n\n        let x_max = 1;\n        let x, tx, coef;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            x = x_min + (x_max - x_min) / 2.0;\n            coef = 3.0 * x * (1.0 - x);\n            tx = coef * ((1.0 - x) * P1 + x * P2) + x * x * x;\n            if (Math.abs(tx - alpha) < 1E-5) break;\n            if (tx > alpha) x_max = x;\n            else x_min = x;\n        }\n        SPLINE_POSITION[i] = coef * ((1.0 - x) * START_TENSION + x) + x * x * x;\n\n        let y_max = 1.0;\n        let y, dy;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            y = y_min + (y_max - y_min) / 2.0;\n            coef = 3.0 * y * (1.0 - y);\n            dy = coef * ((1.0 - y) * START_TENSION + y) + y * y * y;\n            if (Math.abs(dy - alpha) < 1E-5) break;\n            if (dy > alpha) y_max = y;\n            else y_min = y;\n        }\n        SPLINE_TIME[i] = coef * ((1.0 - y) * P1 + y * P2) + y * y * y;\n    }\n    SPLINE_POSITION[NB_SAMPLES] = SPLINE_TIME[NB_SAMPLES] = 1.0;\n})();\n\nfunction signum(number) {\n    if (isNaN(number)) {\n        return NaN;\n    }\n    let sig = number;\n    if (number > 0) {\n        sig = 1;\n    } else if (number < 0) {\n        sig = -1;\n    }\n    return sig;\n}\n\nexport default class Scroller {\n\n    mCurrX;\n    mCurrY;\n    mFinished;\n    mInterpolator;\n    // mPpi = PixelRatio.get() * 160;\n    mPpi;\n    mDeceleration;\n    mFlywheel;\n\n    mPhysicalCoeff; // look and feel tuning\n\n    mFlingFriction;\n    onScrollCallback;\n\n    mMode;\n    mCurrVelocity;\n    mVelocity;\n\n    mStartTime;\n\n    mDuration;\n\n    mDurationReciprocal;\n\n    mStartX;\n    mStartY;\n    mDeltaX;\n    mDeltaY;\n\n    mDistance;\n\n    mFinalX;\n    mFinalY;\n\n    mMinX;\n    mMaxX;\n\n    mMaxY;\n    mMinY;\n\n    mLastX;\n    mLastY;\n\n    /**\n     *\n     * @param flywheel specify whether or not to support progressive \"flywheel\" behavior in flinging.\n     */\n    constructor(flywheel, onScrollCallback) {\n        this.mCurrX = 0;\n        this.mCurrY = 0;\n        this.mFinished = true;\n        this.mInterpolator = ViscousFluidInterpolator;\n        // this.mPpi = PixelRatio.get() * 160;\n        this.mPpi = 160;\n        this.mDeceleration = this.computeDeceleration(SCROLL_FRICTION);\n        this.mFlywheel = flywheel;\n\n        this.mPhysicalCoeff = this.computeDeceleration(0.84); // look and feel tuning\n\n        this.mFlingFriction = SCROLL_FRICTION;\n        this.onScrollCallback = onScrollCallback;\n    }\n\n    computeDeceleration(friction) {\n        return GRAVITY_EARTH * 39.37 * this.mPpi * friction;\n    }\n\n    /**\n     * Returns whether the scroller has finished scrolling.\n     * @returns {Boolean} True if the scroller has finished scrolling, false otherwise.\n     */\n    isFinished() {\n        return this.mFinished;\n    }\n\n    /**\n     * Force the finished field to a particular value.\n     * @param finished The new finished value.\n     */\n    forceFinished(finished) {\n        this.mFinished = finished;\n    }\n\n    /**\n     * Returns the current X offset in the scroll.\n     * @returns {*} The new X offset as an absolute distance from the origin.\n     */\n    getCurrX() {\n        return this.mCurrX;\n    }\n\n    /**\n     * Returns the current Y offset in the scroll.\n     * @returns {*} The new Y offset as an absolute distance from the origin.\n     */\n    getCurrY() {\n        return this.mCurrY;\n    }\n\n    getCurrVelocity() {\n        return this.mMode === FLING_MODE ?\n            this.mCurrVelocity : this.mVelocity - this.mDeceleration * this.timePassed() / 2000.0;\n    }\n\n    computeScrollOffset() {\n        if (this.mFinished) {\n            this.onScrollCallback && this.onScrollCallback(0, 0, this);\n            return false;\n        }\n\n        const timePassed = currentAnimationTimeMillis() - this.mStartTime;\n\n        if (timePassed < this.mDuration) {\n            switch (this.mMode) {\n            case SCROLL_MODE:\n                const x = this.mInterpolator.getInterpolation(timePassed * this.mDurationReciprocal);\n                this.mCurrX = this.mStartX + Math.round(x * this.mDeltaX);\n                this.mCurrY = this.mStartY + Math.round(x * this.mDeltaY);\n                break;\n            case FLING_MODE:\n                const t = timePassed / this.mDuration;\n                const index = parseInt(`${NB_SAMPLES * t}`);\n                let distanceCoef = 1;\n                let velocityCoef = 0;\n                if (index < NB_SAMPLES) {\n                    const t_inf = index / NB_SAMPLES;\n                    const t_sup = (index + 1) / NB_SAMPLES;\n                    const d_inf = SPLINE_POSITION[index];\n                    const d_sup = SPLINE_POSITION[index + 1];\n                    velocityCoef = (d_sup - d_inf) / (t_sup - t_inf);\n                    distanceCoef = d_inf + (t - t_inf) * velocityCoef;\n                }\n\n                this.mCurrVelocity = velocityCoef * this.mDistance / this.mDuration * 1000;\n\n                this.mCurrX = this.mStartX + Math.round(distanceCoef * (this.mFinalX - this.mStartX));\n                // Pin to mMinX <= mCurrX <= mMaxX\n                // this.mCurrX = Math.min(this.mCurrX, this.mMaxX);\n                // this.mCurrX = Math.max(this.mCurrX, this.mMinX);\n\n                this.mCurrY = this.mStartY + Math.round(distanceCoef * (this.mFinalY - this.mStartY));\n                // Pin to mMinY <= mCurrY <= mMaxY\n                this.mCurrY = Math.min(this.mCurrY, this.mMaxY);\n                this.mCurrY = Math.max(this.mCurrY, this.mMinY);\n\n                if (this.mCurrX == this.mFinalX && this.mCurrY == this.mFinalY) {\n                    this.mFinished = true;\n                }\n\n                break;\n            }\n        } else {\n            this.mCurrX = this.mFinalX;\n            this.mCurrY = this.mFinalY;\n            this.mFinished = true;\n        }\n\n        const dx = this.mCurrX - this.mLastX;\n        const dy = this.mCurrY - this.mLastY;\n\n        this.mLastX = this.mCurrX;\n        this.mLastY = this.mCurrY;\n\n        this.onScrollCallback && this.onScrollCallback(dx, dy, this);\n\n        if (dx === 0 && dy === 0 && this.mFinished) {\n            return false;\n        }\n        return true;\n    }\n\n    startScroll(startX, startY, dx, dy, duration = DEFAULT_DURATION) {\n        this.mMode = SCROLL_MODE;\n        this.mFinished = false;\n        this.mDuration = duration;\n        this.mStartTime = currentAnimationTimeMillis();\n        this.mStartX = startX;\n        this.mStartY = startY;\n        this.mFinalX = startX + dx;\n        this.mFinalY = startY + dy;\n        this.mDeltaX = dx;\n        this.mDeltaY = dy;\n        this.mDurationReciprocal = 1.0 / this.mDuration;\n\n        this.mLastX = this.mStartX;\n        this.mLastY = this.mStartY;\n\n        this.performAnimation();\n    }\n\n    /**\n     * Start scrolling based on a fling gesture. The distance travelled will\n     * depend on the initial velocity of the fling.\n     * @param startX\n     * @param startY\n     * @param velocityX Initial velocity of the fling (X) measured in dp or pt per second\n     * @param velocityY Initial velocity of the fling (Y) measured in dp or pt per second\n     * @param minX\n     * @param maxX\n     * @param minY\n     * @param maxY\n     */\n    fling(startX, startY, velocityX, velocityY,\n        minX, maxX, minY, maxY) {\n        // Continue a scroll or fling in progress\n        if (this.mFlywheel && !this.mFinished) {\n            const oldVel = this.getCurrVelocity();\n\n            const dx = this.mFinalX - this.mStartX;\n            const dy = this.mFinalY - this.mStartY;\n            const hyp = Math.hypot(dx, dy);\n\n            const ndx = dx / hyp;\n            const ndy = dy / hyp;\n\n            const oldVelocityX = ndx * oldVel;\n            const oldVelocityY = ndy * oldVel;\n            if (signum(velocityX) === signum(oldVelocityX) &&\n                signum(velocityY) === signum(oldVelocityY)) {\n                velocityX += oldVelocityX;\n                velocityY += oldVelocityY;\n            }\n        }\n\n        this.mMode = FLING_MODE;\n        this.mFinished = false;\n\n        const velocity = Math.hypot(velocityX, velocityY);\n\n        this.mVelocity = velocity;\n        this.mDuration = this.getSplineFlingDuration(velocity);\n        this.mStartTime = currentAnimationTimeMillis();\n        this.mStartX = startX;\n        this.mStartY = startY;\n\n        const coeffX = velocity == 0 ? 1.0 : velocityX / velocity;\n        const coeffY = velocity == 0 ? 1.0 : velocityY / velocity;\n\n        const totalDistance = this.getSplineFlingDistance(velocity);\n        this.mDistance = totalDistance * signum(velocity);\n\n        this.mMinX = minX;\n        this.mMaxX = maxX;\n        this.mMinY = minY;\n        this.mMaxY = maxY;\n\n        this.mFinalX = startX + Math.round(totalDistance * coeffX);\n        // Pin to mMinX <= mFinalX <= mMaxX\n        this.mFinalX = Math.min(this.mFinalX, this.mMaxX);\n        this.mFinalX = Math.max(this.mFinalX, this.mMinX);\n\n        this.mFinalY = startY + Math.round(totalDistance * coeffY);\n        // Pin to mMinY <= mFinalY <= mMaxY\n        this.mFinalY = Math.min(this.mFinalY, this.mMaxY);\n        this.mFinalY = Math.max(this.mFinalY, this.mMinY);\n\n        this.mLastX = this.mStartX;\n        this.mLastY = this.mStartY;\n\n        this.performAnimation();\n    }\n\n    getSplineDeceleration(velocity) {\n        return Math.log(INFLEXION * Math.abs(velocity) / (this.mFlingFriction * this.mPhysicalCoeff));\n    }\n\n    getSplineFlingDuration(velocity) {\n        const l = this.getSplineDeceleration(velocity);\n        const decelMinusOne = DECELERATION_RATE - 1.0;\n        return 1000.0 * Math.exp(l / decelMinusOne);\n    }\n\n    getSplineFlingDistance(velocity) {\n        const l = this.getSplineDeceleration(velocity);\n        const decelMinusOne = DECELERATION_RATE - 1.0;\n        return this.mFlingFriction * this.mPhysicalCoeff * Math.exp(DECELERATION_RATE / decelMinusOne * l);\n    }\n\n    performAnimation() {\n        if (this.computeScrollOffset()) {\n            requestAnimationFrame(this.performAnimation.bind(this));\n        } else {\n            // do something\n        }\n    }\n\n    abortAnimation() {\n        this.mCurrX = this.mFinalX;\n        this.mCurrY = this.mFinalY;\n        this.mFinished = true;\n    }\n\n    extendDuration(extend) {\n        const passed = this.timePassed();\n        this.mDuration = passed + extend;\n        this.mDurationReciprocal = 1.0 / this.mDuration;\n        this.mFinished = false;\n    }\n\n    timePassed() {\n        return currentAnimationTimeMillis() - this.mStartTime;\n    }\n\n    setFinalX(newX) {\n        this.mFinalX = newX;\n        this.mDeltaX = this.mFinalX - this.mStartX;\n        this.mFinished = false;\n    }\n\n    setFinalY(newY) {\n        this.mFinalY = newY;\n        this.mDeltaY = this.mFinalY - this.mStartY;\n        this.mFinished = false;\n    }\n\n    debugInfo() {\n        return \"cur=\" + this.mCurrX + \" \" + this.mCurrY + \", final=\" + this.mFinalX + \" \" + this.mFinalY;\n    }\n}\n"]}