{"version":3,"sources":["TouchHistoryMath.tsx"],"names":["TouchHistoryMath","centroidDimension","touchHistory","touchesChangedAfter","isXAxis","ofCurrent","touchBank","total","count","oneTouchData","numberActiveTouches","indexOfSingleActiveTouch","touchActive","currentTimeStamp","currentPageX","currentPageY","previousPageX","previousPageY","i","length","touchTrack","undefined","toAdd","noCentroid","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY"],"mappings":"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","sourcesContent":["/**\n * @providesModule TouchHistoryMath\n */\n\nconst TouchHistoryMath = {\n    /**\n     * This code is optimized and not intended to look beautiful. This allows\n     * computing of touch centroids that have moved after `touchesChangedAfter`\n     * timeStamp. You can compute the current centroid involving all touches\n     * moves after `touchesChangedAfter`, or you can compute the previous\n     * centroid of all touches that were moved after `touchesChangedAfter`.\n     *\n     * @param {TouchHistoryMath} touchHistory Standard Responder touch track\n     * data.\n     * @param {number} touchesChangedAfter timeStamp after which moved touches\n     * are considered \"actively moving\" - not just \"active\".\n     * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.\n     * @param {boolean} ofCurrent Compute current centroid for actively moving\n     * touches vs. previous centroid of now actively moving touches.\n     * @return {number} value of centroid in specified dimension.\n     */\n    centroidDimension: function (touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {\n        const touchBank = touchHistory.touchBank;\n        let total = 0;\n        let count = 0;\n\n        const oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;\n\n        if (oneTouchData !== null) {\n            if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {\n                total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;\n                count = 1;\n            }\n        } else {\n            for (let i = 0; i < touchBank.length; i++) {\n                const touchTrack = touchBank[i];\n                if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {\n                    let toAdd; // Yuck, program temporarily in invalid state.\n                    if (ofCurrent && isXAxis) {\n                        toAdd = touchTrack.currentPageX;\n                    } else if (ofCurrent && !isXAxis) {\n                        toAdd = touchTrack.currentPageY;\n                    } else if (!ofCurrent && isXAxis) {\n                        toAdd = touchTrack.previousPageX;\n                    } else {\n                        toAdd = touchTrack.previousPageY;\n                    }\n                    total += toAdd;\n                    count++;\n                }\n            }\n        }\n        return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n    },\n\n    currentCentroidXOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {\n        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n            true // ofCurrent\n        );\n    },\n\n    currentCentroidYOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {\n        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n            true // ofCurrent\n        );\n    },\n\n    previousCentroidXOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {\n        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n            false // ofCurrent\n        );\n    },\n\n    previousCentroidYOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {\n        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n            false // ofCurrent\n        );\n    },\n\n    currentCentroidX: function (touchHistory) {\n        return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n            true, // isXAxis\n            true // ofCurrent\n        );\n    },\n\n    currentCentroidY: function (touchHistory) {\n        return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n            false, // isXAxis\n            true // ofCurrent\n        );\n    },\n\n    noCentroid: -1\n};\n\nexport default TouchHistoryMath;\n"]}