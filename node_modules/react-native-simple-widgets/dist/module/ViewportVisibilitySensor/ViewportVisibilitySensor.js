function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from "react";
import { View, Dimensions } from "react-native";

class ViewportVisibilitySensor extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      prevRectTop: 0,
      rectTop: 0,
      rectBottom: 0
    });

    _defineProperty(this, "interval", void 0);

    _defineProperty(this, "myview", void 0);

    _defineProperty(this, "lastValue", void 0);
  }

  componentDidMount() {
    if (!this.props.disabled) {
      this.startWatching();
    }
  }

  componentWillUnmount() {
    this.stopWatching();
  }

  startWatching() {
    if (this.interval) {
      return;
    }

    this.interval = setInterval(() => {
      if (!this.myview) {
        return;
      }

      this.myview.measure((x, y, width, height, pageX, pageY) => {
        this.setState({
          prevRectTop: this.state.rectTop,
          rectTop: pageY,
          rectBottom: pageY + height,
          rectWidth: pageX + width
        });
        this.isInViewPort();
      });
    }, this.props.delay || 100);
  }

  stopWatching() {
    this.interval = clearInterval(this.interval);
  }

  isInViewPort() {
    const window = Dimensions.get("window");
    const isVisible = this.state.rectBottom !== 0 && this.state.rectTop >= 0 && this.state.rectBottom <= window.height && this.state.rectWidth > 0 && this.state.rectWidth <= window.width;

    if (this.lastValue !== isVisible) {
      this.lastValue = isVisible; // console.log("Top ", this.state.rectTop, " Prev top ", this.state.prevRectTop);

      this.props.onChange(isVisible, {
        direction: this.state.rectTop > this.state.prevRectTop ? -1 : 1
      });
    }
  }

  render() {
    return /*#__PURE__*/React.createElement(View, _extends({
      collapsable: false,
      ref: component => {
        this.myview = component;
      }
    }, this.props), this.props.children);
  }

}

export default ViewportVisibilitySensor;
//# sourceMappingURL=ViewportVisibilitySensor.js.map