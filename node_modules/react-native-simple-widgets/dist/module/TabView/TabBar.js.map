{"version":3,"sources":["TabBar.tsx"],"names":["React","Animated","StyleSheet","View","I18nManager","Platform","TabBarItem","TabBarIndicator","TabBar","Component","layout","width","height","tabWidths","Value","createRef","style","tabStyle","flatten","undefined","index","routes","scrollEnabled","flattenedWidth","key","endsWith","parseFloat","Number","isFinite","length","tabBarWidth","layoutWidth","props","state","navigationState","reduce","acc","_","i","getComputedTabWidth","getFlattenedTabWidth","value","getTabBarWidth","maxDistance","getMaxScrollDistance","scrollValue","Math","max","min","OS","isRTL","centerDistance","Array","from","total","tabWidth","scrollAmount","normalizeScrollValue","scrollViewRef","current","scrollTo","x","getScrollAmount","animated","e","nativeEvent","setState","maxScrollDistance","multiply","add","componentDidUpdate","prevProps","prevState","every","r","resetScroll","render","position","jumpTo","bounces","getAccessibilityLabel","getAccessible","getLabelText","getTestID","renderBadge","renderIcon","renderLabel","renderTabBarItem","activeColor","inactiveColor","pressColor","pressOpacity","onTabPress","onTabLongPress","labelStyle","indicatorStyle","contentContainerStyle","indicatorContainerStyle","isWidthDynamic","tabBarWidthPercent","translateX","getTranslateX","handleLayout","styles","tabBar","indicatorContainer","transform","renderIndicator","getTabWidth","scroll","tabContent","container","event","contentOffset","useNativeDriver","map","route","onLayout","measuredTabWidths","onPress","defaultPrevented","preventDefault","onLongPress","title","toUpperCase","accessible","accessibilityLabel","testID","create","flex","overflow","select","default","web","backgroundColor","elevation","shadowColor","shadowOpacity","shadowRadius","hairlineWidth","shadowOffset","zIndex","flexDirection","flexWrap","top","left","right","bottom"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n    Animated,\n    StyleSheet,\n    View,\n    ScrollView,\n    StyleProp,\n    ViewStyle,\n    TextStyle,\n    LayoutChangeEvent,\n    I18nManager,\n    Platform,\n} from \"react-native\";\nimport TabBarItem, { Props as TabBarItemProps } from \"./TabBarItem\";\nimport TabBarIndicator, { Props as IndicatorProps } from \"./TabBarIndicator\";\nimport {\n    Route,\n    Scene,\n    SceneRendererProps,\n    NavigationState,\n    Layout,\n    Event,\n} from \"./types\";\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  scrollEnabled?: boolean;\n  bounces?: boolean;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText: (scene: Scene<T>) => string | undefined;\n  getAccessible: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel: (scene: Scene<T>) => string | undefined;\n  getTestID: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderIcon?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  renderIndicator: (props: IndicatorProps<T>) => React.ReactNode;\n  renderTabBarItem?: (\n    props: TabBarItemProps<T> & { key: string }\n  ) => React.ReactElement;\n  onTabPress?: (scene: Scene<T> & Event) => void;\n  onTabLongPress?: (scene: Scene<T>) => void;\n  tabStyle?: StyleProp<ViewStyle>;\n  indicatorStyle?: StyleProp<ViewStyle>;\n  indicatorContainerStyle?: StyleProp<ViewStyle>;\n  labelStyle?: StyleProp<TextStyle>;\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\ntype State = {\n  layout: Layout;\n  tabWidths: { [key: string]: number };\n};\n\nexport default class TabBar<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static defaultProps = {\n      getLabelText: ({ route }: Scene<Route>) =>\n          typeof route.title === \"string\" ? route.title.toUpperCase() : route.title,\n      getAccessible: ({ route }: Scene<Route>) =>\n          typeof route.accessible !== \"undefined\" ? route.accessible : true,\n      getAccessibilityLabel: ({ route }: Scene<Route>) =>\n          typeof route.accessibilityLabel === \"string\"\n              ? route.accessibilityLabel\n              : typeof route.title === \"string\"\n                  ? route.title\n                  : undefined,\n      getTestID: ({ route }: Scene<Route>) => route.testID,\n      renderIndicator: (props: IndicatorProps<Route>) => (\n          <TabBarIndicator {...props} />\n      ),\n  };\n\n  state: State = {\n      layout: { width: 0, height: 0 },\n      tabWidths: {},\n  };\n\n  componentDidUpdate(prevProps: Props<T>, prevState: State) {\n      const { navigationState } = this.props;\n      const { layout, tabWidths } = this.state;\n\n      if (\n          prevProps.navigationState.routes.length !==\n        navigationState.routes.length ||\n      prevProps.navigationState.index !== navigationState.index ||\n      prevState.layout.width !== layout.width ||\n      prevState.tabWidths !== tabWidths\n      ) {\n          if (\n              this.getFlattenedTabWidth(this.props.tabStyle) === \"auto\" &&\n        !(\n            layout.width &&\n          navigationState.routes.every(\n              (r) => typeof tabWidths[r.key] === \"number\"\n          )\n        )\n          ) {\n              // When tab width is dynamic, only adjust the scroll once we have all tab widths and layout\n              return;\n          }\n\n          this.resetScroll(navigationState.index);\n      }\n  }\n\n  // to store the layout.width of each tab\n  // when all onLayout's are fired, this would be set in state\n  private measuredTabWidths: { [key: string]: number } = {};\n\n  private scrollAmount = new Animated.Value(0);\n\n  private scrollViewRef = React.createRef<ScrollView>();\n\n  private getFlattenedTabWidth = (style: StyleProp<ViewStyle>) => {\n      const tabStyle = StyleSheet.flatten(style);\n\n      return tabStyle ? tabStyle.width : undefined;\n  };\n\n  private getComputedTabWidth = (\n      index: number,\n      layout: Layout,\n      routes: Route[],\n      scrollEnabled: boolean | undefined,\n      tabWidths: { [key: string]: number },\n      flattenedWidth: string | number | undefined\n  ) => {\n      if (flattenedWidth === \"auto\") {\n          return tabWidths[routes[index].key] || 0;\n      }\n\n      switch (typeof flattenedWidth) {\n      case \"number\":\n          return flattenedWidth;\n      case \"string\":\n          if (flattenedWidth.endsWith(\"%\")) {\n              const width = parseFloat(flattenedWidth);\n              if (Number.isFinite(width)) {\n                  return layout.width * (width / 100);\n              }\n          }\n      }\n\n      if (scrollEnabled) {\n          return (layout.width / 5) * 2;\n      }\n\n      return layout.width / routes.length;\n  };\n\n  private getMaxScrollDistance = (tabBarWidth: number, layoutWidth: number) =>\n      tabBarWidth - layoutWidth;\n\n  private getTabBarWidth = (props: Props<T>, state: State) => {\n      const { layout, tabWidths } = state;\n      const { scrollEnabled, tabStyle } = props;\n      const { routes } = props.navigationState;\n\n      return routes.reduce<number>(\n          (acc, _, i) =>\n              acc +\n        this.getComputedTabWidth(\n            i,\n            layout,\n            routes,\n            scrollEnabled,\n            tabWidths,\n            this.getFlattenedTabWidth(tabStyle)\n        ),\n          0\n      );\n  };\n\n  private normalizeScrollValue = (\n      props: Props<T>,\n      state: State,\n      value: number\n  ) => {\n      const { layout } = state;\n      const tabBarWidth = this.getTabBarWidth(props, state);\n      const maxDistance = this.getMaxScrollDistance(tabBarWidth, layout.width);\n      const scrollValue = Math.max(Math.min(value, maxDistance), 0);\n\n      if (Platform.OS === \"android\" && I18nManager.isRTL) {\n      // On Android, scroll value is not applied in reverse in RTL\n      // so we need to manually adjust it to apply correct value\n          return maxDistance - scrollValue;\n      }\n\n      return scrollValue;\n  };\n\n  private getScrollAmount = (props: Props<T>, state: State, index: number) => {\n      const { layout, tabWidths } = state;\n      const { scrollEnabled, tabStyle } = props;\n      const { routes } = props.navigationState;\n\n      const centerDistance = Array.from({ length: index + 1 }).reduce<number>(\n          (total, _, i) => {\n              const tabWidth = this.getComputedTabWidth(\n                  i,\n                  layout,\n                  routes,\n                  scrollEnabled,\n                  tabWidths,\n                  this.getFlattenedTabWidth(tabStyle)\n              );\n\n              // To get the current index centered we adjust scroll amount by width of indexes\n              // 0 through (i - 1) and add half the width of current index i\n              return total + (index === i ? tabWidth / 2 : tabWidth);\n          },\n          0\n      );\n\n      const scrollAmount = centerDistance - layout.width / 2;\n\n      return this.normalizeScrollValue(props, state, scrollAmount);\n  };\n\n  private resetScroll = (index: number) => {\n      if (this.props.scrollEnabled) {\n          this.scrollViewRef.current?.scrollTo({\n              x: this.getScrollAmount(this.props, this.state, index),\n              animated: true,\n          });\n      }\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n      const { height, width } = e.nativeEvent.layout;\n\n      if (\n          this.state.layout.width === width &&\n      this.state.layout.height === height\n      ) {\n          return;\n      }\n\n      this.setState({\n          layout: {\n              height,\n              width,\n          },\n      });\n  };\n\n  private getTranslateX = (\n      scrollAmount: Animated.Value,\n      maxScrollDistance: number\n  ) =>\n      Animated.multiply(\n          Platform.OS === \"android\" && I18nManager.isRTL\n              ? Animated.add(maxScrollDistance, Animated.multiply(scrollAmount, -1))\n              : scrollAmount,\n          I18nManager.isRTL ? 1 : -1\n      );\n\n  render() {\n      const {\n          position,\n          navigationState,\n          jumpTo,\n          scrollEnabled,\n          bounces,\n          getAccessibilityLabel,\n          getAccessible,\n          getLabelText,\n          getTestID,\n          renderBadge,\n          renderIcon,\n          renderLabel,\n          renderTabBarItem,\n          activeColor,\n          inactiveColor,\n          pressColor,\n          pressOpacity,\n          onTabPress,\n          onTabLongPress,\n          tabStyle,\n          labelStyle,\n          indicatorStyle,\n          contentContainerStyle,\n          style,\n          indicatorContainerStyle,\n      } = this.props;\n      const { layout, tabWidths } = this.state;\n      const { routes } = navigationState;\n\n      const isWidthDynamic = this.getFlattenedTabWidth(tabStyle) === \"auto\";\n      const tabBarWidth = this.getTabBarWidth(this.props, this.state);\n      const tabBarWidthPercent = `${routes.length * 40}%`;\n      const translateX = this.getTranslateX(\n          this.scrollAmount,\n          this.getMaxScrollDistance(tabBarWidth, layout.width)\n      );\n\n      return (\n          <Animated.View\n              onLayout={this.handleLayout}\n              style={[styles.tabBar, style]}\n          >\n              <Animated.View\n                  pointerEvents=\"none\"\n                  style={[\n                      styles.indicatorContainer,\n                      scrollEnabled ? { transform: [{ translateX }] as any } : null,\n                      tabBarWidth\n                          ? { width: tabBarWidth }\n                          : scrollEnabled\n                              ? { width: tabBarWidthPercent }\n                              : null,\n                      indicatorContainerStyle,\n                  ]}\n              >\n                  {this.props.renderIndicator({\n                      position,\n                      layout,\n                      navigationState,\n                      jumpTo,\n                      width: isWidthDynamic ? \"auto\" : `${100 / routes.length}%`,\n                      style: indicatorStyle,\n                      getTabWidth: (i: number) =>\n                          this.getComputedTabWidth(\n                              i,\n                              layout,\n                              routes,\n                              scrollEnabled,\n                              tabWidths,\n                              this.getFlattenedTabWidth(tabStyle)\n                          ),\n                  })}\n              </Animated.View>\n              <View style={styles.scroll}>\n                  <Animated.ScrollView\n                      horizontal\n                      accessibilityRole=\"tablist\"\n                      keyboardShouldPersistTaps=\"handled\"\n                      scrollEnabled={scrollEnabled}\n                      bounces={bounces}\n                      alwaysBounceHorizontal={false}\n                      scrollsToTop={false}\n                      showsHorizontalScrollIndicator={false}\n                      automaticallyAdjustContentInsets={false}\n                      overScrollMode=\"never\"\n                      contentContainerStyle={[\n                          styles.tabContent,\n                          scrollEnabled\n                              ? { width: tabBarWidth || tabBarWidthPercent }\n                              : styles.container,\n                          contentContainerStyle,\n                      ]}\n                      scrollEventThrottle={16}\n                      onScroll={Animated.event(\n                          [\n                              {\n                                  nativeEvent: {\n                                      contentOffset: { x: this.scrollAmount },\n                                  },\n                              },\n                          ],\n                          { useNativeDriver: true }\n                      )}\n                      ref={this.scrollViewRef}\n                  >\n                      {routes.map((route: T) => {\n                          const props: TabBarItemProps<T> & { key: string } = {\n                              key: route.key,\n                              position: position,\n                              route: route,\n                              navigationState: navigationState,\n                              getAccessibilityLabel: getAccessibilityLabel,\n                              getAccessible: getAccessible,\n                              getLabelText: getLabelText,\n                              getTestID: getTestID,\n                              renderBadge: renderBadge,\n                              renderIcon: renderIcon,\n                              renderLabel: renderLabel,\n                              activeColor: activeColor,\n                              inactiveColor: inactiveColor,\n                              pressColor: pressColor,\n                              pressOpacity: pressOpacity,\n                              onLayout: isWidthDynamic\n                                  ? (e) => {\n                                      this.measuredTabWidths[route.key] =\n                        e.nativeEvent.layout.width;\n\n                                      // When we have measured widths for all of the tabs, we should updates the state\n                                      // We avoid doing separate setState for each layout since it triggers multiple renders and slows down app\n                                      if (\n                                          routes.every(\n                                              (r) =>\n                                                  typeof this.measuredTabWidths[r.key] === \"number\"\n                                          )\n                                      ) {\n                                          this.setState({\n                                              tabWidths: { ...this.measuredTabWidths },\n                                          });\n                                      }\n                                  }\n                                  : undefined,\n                              onPress: () => {\n                                  const event: Scene<T> & Event = {\n                                      route,\n                                      defaultPrevented: false,\n                                      preventDefault: () => {\n                                          event.defaultPrevented = true;\n                                      },\n                                  };\n\n                                  onTabPress?.(event);\n\n                                  if (event.defaultPrevented) {\n                                      return;\n                                  }\n\n                                  this.props.jumpTo(route.key);\n                              },\n                              onLongPress: () => onTabLongPress?.({ route }),\n                              labelStyle: labelStyle,\n                              style: tabStyle,\n                          };\n\n                          return renderTabBarItem ? (\n                              renderTabBarItem(props)\n                          ) : (\n                              <TabBarItem {...props} />\n                          );\n                      })}\n                  </Animated.ScrollView>\n              </View>\n          </Animated.View>\n      );\n  }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n    },\n    scroll: {\n        overflow: Platform.select({ default: \"scroll\", web: undefined }),\n    },\n    tabBar: {\n        backgroundColor: \"#2196f3\",\n        elevation: 4,\n        shadowColor: \"black\",\n        shadowOpacity: 0.1,\n        shadowRadius: StyleSheet.hairlineWidth,\n        shadowOffset: {\n            height: StyleSheet.hairlineWidth,\n            width: 0,\n        },\n        zIndex: 1,\n    },\n    tabContent: {\n        flexDirection: \"row\",\n        flexWrap: \"nowrap\",\n    },\n    indicatorContainer: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n    },\n});\n"]}