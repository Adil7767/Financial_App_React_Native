{"version":3,"sources":["TabView.tsx"],"names":["React","StyleSheet","View","TabBar","SceneView","Pager","TabView","onIndexChange","navigationState","renderScene","initialLayout","keyboardDismissMode","lazy","lazyPreloadDistance","onSwipeStart","onSwipeEnd","renderLazyPlaceholder","renderTabBar","props","sceneContainerStyle","style","swipeEnabled","tabBarPosition","layout","setLayout","useState","width","height","jumpToIndex","index","handleLayout","e","nativeEvent","prevLayout","styles","pager","position","render","addEnterListener","jumpTo","sceneRendererProps","routes","map","route","i","key","loading","create","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n    StyleSheet,\n    View,\n    StyleProp,\n    ViewStyle,\n    LayoutChangeEvent,\n} from \"react-native\";\nimport TabBar from \"./TabBar\";\nimport SceneView from \"./SceneView\";\nimport Pager from \"./Pager\";\nimport {\n    Layout,\n    NavigationState,\n    Route,\n    SceneRendererProps,\n    PagerProps,\n} from \"./types\";\n\nexport type Props<T extends Route> = PagerProps & {\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  renderScene: (props: SceneRendererProps & { route: T }) => React.ReactNode;\n  renderLazyPlaceholder?: (props: { route: T }) => React.ReactNode;\n  renderTabBar?: (\n    props: SceneRendererProps & { navigationState: NavigationState<T> }\n  ) => React.ReactNode;\n  tabBarPosition?: \"top\" | \"bottom\";\n  initialLayout?: Partial<Layout>;\n  lazy?: ((props: { route: T }) => boolean) | boolean;\n  lazyPreloadDistance?: number;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function TabView<T extends Route>({\n    onIndexChange,\n    navigationState,\n    renderScene,\n    initialLayout,\n    keyboardDismissMode = \"auto\",\n    lazy = false,\n    lazyPreloadDistance = 0,\n    onSwipeStart,\n    onSwipeEnd,\n    renderLazyPlaceholder = () => null,\n    renderTabBar = (props) => <TabBar {...props} />,\n    sceneContainerStyle,\n    style,\n    swipeEnabled = true,\n    tabBarPosition = \"top\",\n}: Props<T>) {\n    const [layout, setLayout] = React.useState({\n        width: 0,\n        height: 0,\n        ...initialLayout,\n    });\n\n    const jumpToIndex = (index: number) => {\n        if (index !== navigationState.index) {\n            onIndexChange(index);\n        }\n    };\n\n    const handleLayout = (e: LayoutChangeEvent) => {\n        const { height, width } = e.nativeEvent.layout;\n\n        setLayout((prevLayout) => {\n            if (prevLayout.width === width && prevLayout.height === height) {\n                return prevLayout;\n            }\n\n            return { height, width };\n        });\n    };\n\n    return (\n        <View onLayout={handleLayout} style={[styles.pager, style]}>\n            <Pager\n                layout={layout}\n                navigationState={navigationState}\n                keyboardDismissMode={keyboardDismissMode}\n                swipeEnabled={swipeEnabled}\n                onSwipeStart={onSwipeStart}\n                onSwipeEnd={onSwipeEnd}\n                onIndexChange={jumpToIndex}\n            >\n                {({ position, render, addEnterListener, jumpTo }) => {\n                    // All of the props here must not change between re-renders\n                    // This is crucial to optimizing the routes with PureComponent\n                    const sceneRendererProps = {\n                        position,\n                        layout,\n                        jumpTo,\n                    };\n\n                    return (\n                        <React.Fragment>\n                            {tabBarPosition === \"top\" &&\n                renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                })}\n                            {render(\n                                navigationState.routes.map((route, i) => {\n                                    return (\n                                        <SceneView\n                                            {...sceneRendererProps}\n                                            addEnterListener={addEnterListener}\n                                            key={route.key}\n                                            index={i}\n                                            lazy={typeof lazy === \"function\" ? lazy({ route }) : lazy}\n                                            lazyPreloadDistance={lazyPreloadDistance}\n                                            navigationState={navigationState}\n                                            style={sceneContainerStyle}\n                                        >\n                                            {({ loading }) =>\n                                                loading\n                                                    ? renderLazyPlaceholder({ route })\n                                                    : renderScene({\n                                                        ...sceneRendererProps,\n                                                        route,\n                                                    })\n                                            }\n                                        </SceneView>\n                                    );\n                                })\n                            )}\n                            {tabBarPosition === \"bottom\" &&\n                renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                })}\n                        </React.Fragment>\n                    );\n                }}\n            </Pager>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    pager: {\n        flex: 1,\n        overflow: \"hidden\",\n    },\n});\n"]}