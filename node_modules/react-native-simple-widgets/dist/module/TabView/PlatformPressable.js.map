{"version":3,"sources":["PlatformPressable.tsx"],"names":["React","Platform","Pressable","ANDROID_VERSION_LOLLIPOP","ANDROID_SUPPORTS_RIPPLE","OS","Version","PlatformPressable","android_ripple","pressColor","pressOpacity","style","rest","color","undefined","pressed","opacity"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoD,cAApD;AAQA,MAAMC,wBAAwB,GAAG,EAAjC;AACA,MAAMC,uBAAuB,GAC3BH,QAAQ,CAACI,EAAT,KAAgB,SAAhB,IAA6BJ,QAAQ,CAACK,OAAT,IAAoBH,wBADnD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASI,iBAAT,CAA2B;AACtCC,EAAAA,cADsC;AAEtCC,EAAAA,UAAU,GAAG,oBAFyB;AAGtCC,EAAAA,YAHsC;AAItCC,EAAAA,KAJsC;AAKtC,KAAGC;AALmC,CAA3B,EAML;AACN,sBACI,oBAAC,SAAD;AACI,IAAA,cAAc,EACVR,uBAAuB,GACjB;AAAES,MAAAA,KAAK,EAAEJ,UAAT;AAAqB,SAAGD;AAAxB,KADiB,GAEjBM,SAJd;AAMI,IAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAiB,CACpB;AAAEC,MAAAA,OAAO,EAAED,OAAO,IAAI,CAACX,uBAAZ,GAAsCM,YAAtC,GAAqD;AAAhE,KADoB,EAEpB,OAAOC,KAAP,KAAiB,UAAjB,GAA8BA,KAAK,CAAC;AAAEI,MAAAA;AAAF,KAAD,CAAnC,GAAmDJ,KAF/B;AAN5B,KAUQC,IAVR,EADJ;AAcH","sourcesContent":["import * as React from \"react\";\nimport { Platform, Pressable, PressableProps } from \"react-native\";\n\nexport type Props = PressableProps & {\n  pressColor?: string;\n  pressOpacity?: number;\n  children: React.ReactNode;\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_SUPPORTS_RIPPLE =\n  Platform.OS === \"android\" && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\n/**\n * PlatformPressable provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity to handle platform differences.\n *\n * On Android, you can pass the props of TouchableNativeFeedback.\n * On other platforms, you can pass the props of TouchableOpacity.\n */\nexport default function PlatformPressable({\n    android_ripple,\n    pressColor = \"rgba(0, 0, 0, .32)\",\n    pressOpacity,\n    style,\n    ...rest\n}: Props) {\n    return (\n        <Pressable\n            android_ripple={\n                ANDROID_SUPPORTS_RIPPLE\n                    ? { color: pressColor, ...android_ripple }\n                    : undefined\n            }\n            style={({ pressed }) => [\n                { opacity: pressed && !ANDROID_SUPPORTS_RIPPLE ? pressOpacity : 1 },\n                typeof style === \"function\" ? style({ pressed }) : style,\n            ]}\n            {...rest}\n        />\n    );\n}\n"]}