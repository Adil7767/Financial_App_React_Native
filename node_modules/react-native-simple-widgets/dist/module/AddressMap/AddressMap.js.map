{"version":3,"sources":["AddressMap.tsx"],"names":["React","StyleSheet","View","TouchableOpacity","MapView","Circle","Button","SvgIcon","Image","ThemeContext","AccountIcon","defaultProps","showsUserLocation","showsMyLocationButton","AddressMap","innerRef","initialRegion","userLocation","selectedLocationImageSource","renderHeader","onRegionChangeComplete","onUserLocationRequest","onConfirm","confirmText","rest","region","setRegion","useState","colors","useContext","handleRegionChangeComplete","newRegion","handleUserLocationRequest","handleConfirmPress","styles","container","absoluteFillObject","latitude","longitude","Math","round","longitudeDelta","latitudeDelta","white","backgroundColor","alignItems","justifyContent","flex","zIndex","flexDirection","marginRight","marginBottom","padding","shadowColor","black","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","create"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { StyleSheet, View, TouchableOpacity } from \"react-native\";\nimport MapView, { Circle } from \"react-native-maps\";\nimport Button from \"react-native-simple-elements/components/Button\";\nimport { SvgIcon } from \"react-native-simple-elements/components/Icon\";\nimport Image from \"react-native-simple-elements/components/Image/Image\";\nimport { ThemeContext } from \"styled-components\";\nimport AccountIcon from \"@mdi/svg/svg/account.svg\";\n\ntype RegionProps = {\n    latitude: number,\n    longitude: number,\n    latitudeDelta: number,\n    longitudeDelta: number,\n};\n\ntype Props = {\n    innerRef: React.RefObject<any>,\n    initialRegion: RegionProps,\n    userLocation?: RegionProps,\n    selectedLocationImageSource?: any,\n    showsUserLocation?: boolean,\n    showsMyLocationButton?: boolean,\n    renderHeader?: (props?) => React.ReactNode,\n    onRegionChangeComplete: (region?) => void,\n    onUserLocationRequest?: (region?) => void,\n    onConfirm?: () => void,\n    confirmText?: string,\n};\n\nconst defaultProps = {\n    showsUserLocation: false,\n    showsMyLocationButton: false,\n};\n\nconst AddressMap = ({\n    innerRef,\n    initialRegion,\n    userLocation,\n    selectedLocationImageSource,\n    showsUserLocation,\n    showsMyLocationButton,\n    renderHeader,\n    onRegionChangeComplete,\n    onUserLocationRequest,\n    onConfirm,\n    confirmText,\n    ...rest\n}: Props) => {\n    const [region, setRegion] = React.useState(initialRegion);\n\n    const { colors } = React.useContext(ThemeContext);\n\n    const handleRegionChangeComplete = (newRegion) => {\n        setRegion(newRegion);\n        if (onRegionChangeComplete) {\n            onRegionChangeComplete(newRegion);\n        }\n    };\n\n    const handleUserLocationRequest = () => {\n        if (onUserLocationRequest) {\n            onUserLocationRequest();\n        }\n    };\n\n    const handleConfirmPress = () => {\n        if (onConfirm) {\n            onConfirm();\n        }\n    };\n\n    return (\n        <View style={[styles.container]}>\n            <MapView\n                ref={innerRef}\n                style={[StyleSheet.absoluteFillObject]}\n                {...rest}\n                initialRegion={region}\n                onRegionChangeComplete={handleRegionChangeComplete}>\n                {showsUserLocation && userLocation ? (\n                    <Circle\n                        center={{\n                            latitude: userLocation.latitude,\n                            longitude: userLocation.longitude,\n                        }}\n                        radius={Math.round(\n                            ((region.longitudeDelta + region.latitudeDelta) / 2) * 2500,\n                        )}\n                        strokeColor={colors.white}\n                        strokeWidth={\n                            Math.round(\n                                ((region.longitudeDelta + region.latitudeDelta) / 2) * 2500,\n                            ) / 10\n                        }\n                        fillColor={\"blue\"}\n                    />\n                ) : null}\n            </MapView>\n            <View\n                style={{\n                    ...StyleSheet.absoluteFillObject,\n                    backgroundColor: \"transparent\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                }}\n                pointerEvents=\"box-none\">\n                <Image source={selectedLocationImageSource} width={24} height={40} />\n            </View>\n            <View\n                style={{\n                    ...StyleSheet.absoluteFillObject,\n                    backgroundColor: \"transparent\",\n                }}\n                pointerEvents=\"box-none\">\n                {renderHeader ? renderHeader() : null}\n                <View\n                    style={{\n                        flex: 1,\n                        backgroundColor: \"transparent\",\n                        zIndex: -1,\n                    }}\n                    pointerEvents=\"box-none\"\n                />\n                {showsMyLocationButton ? (\n                    <View\n                        style={{\n                            flexDirection: \"row\",\n                            justifyContent: \"flex-end\",\n                        }}>\n                        <TouchableOpacity\n                            style={{\n                                backgroundColor: colors.white,\n                                marginRight: 16,\n                                marginBottom: 32,\n                                padding: 5,\n                            }}\n                            onPress={() => handleUserLocationRequest()}>\n                            <SvgIcon icon={AccountIcon} size={24} />\n                        </TouchableOpacity>\n                    </View>\n                ) : null}\n                {region ? (\n                    <View\n                        style={{\n                            backgroundColor: colors.white,\n                            padding: 16,\n                            shadowColor: colors.black,\n                            shadowOffset: {\n                                width: 0,\n                                height: 4,\n                            },\n                            shadowOpacity: 0.32,\n                            shadowRadius: 5.46,\n                            elevation: 12,\n                        }}\n                        pointerEvents=\"box-none\">\n                        <Button\n                            onPress={handleConfirmPress}\n                        >\n                            {confirmText}\n                        </Button>\n                    </View>\n                ) : null}\n            </View>\n        </View>\n    );\n};\n\nexport default AddressMap;\n\nAddressMap.defaultProps = defaultProps;\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n    },\n});\n"]}