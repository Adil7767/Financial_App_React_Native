function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from "react";
import { StyleSheet, View, TouchableOpacity } from "react-native";
import MapView, { Circle } from "react-native-maps";
import Button from "react-native-simple-elements/components/Button";
import { SvgIcon } from "react-native-simple-elements/components/Icon";
import Image from "react-native-simple-elements/components/Image/Image";
import { ThemeContext } from "styled-components";
import AccountIcon from "@mdi/svg/svg/account.svg";
const defaultProps = {
  showsUserLocation: false,
  showsMyLocationButton: false
};

const AddressMap = ({
  innerRef,
  initialRegion,
  userLocation,
  selectedLocationImageSource,
  showsUserLocation,
  showsMyLocationButton,
  renderHeader,
  onRegionChangeComplete,
  onUserLocationRequest,
  onConfirm,
  confirmText,
  ...rest
}) => {
  const [region, setRegion] = React.useState(initialRegion);
  const {
    colors
  } = React.useContext(ThemeContext);

  const handleRegionChangeComplete = newRegion => {
    setRegion(newRegion);

    if (onRegionChangeComplete) {
      onRegionChangeComplete(newRegion);
    }
  };

  const handleUserLocationRequest = () => {
    if (onUserLocationRequest) {
      onUserLocationRequest();
    }
  };

  const handleConfirmPress = () => {
    if (onConfirm) {
      onConfirm();
    }
  };

  return /*#__PURE__*/React.createElement(View, {
    style: [styles.container]
  }, /*#__PURE__*/React.createElement(MapView, _extends({
    ref: innerRef,
    style: [StyleSheet.absoluteFillObject]
  }, rest, {
    initialRegion: region,
    onRegionChangeComplete: handleRegionChangeComplete
  }), showsUserLocation && userLocation ? /*#__PURE__*/React.createElement(Circle, {
    center: {
      latitude: userLocation.latitude,
      longitude: userLocation.longitude
    },
    radius: Math.round((region.longitudeDelta + region.latitudeDelta) / 2 * 2500),
    strokeColor: colors.white,
    strokeWidth: Math.round((region.longitudeDelta + region.latitudeDelta) / 2 * 2500) / 10,
    fillColor: "blue"
  }) : null), /*#__PURE__*/React.createElement(View, {
    style: { ...StyleSheet.absoluteFillObject,
      backgroundColor: "transparent",
      alignItems: "center",
      justifyContent: "center"
    },
    pointerEvents: "box-none"
  }, /*#__PURE__*/React.createElement(Image, {
    source: selectedLocationImageSource,
    width: 24,
    height: 40
  })), /*#__PURE__*/React.createElement(View, {
    style: { ...StyleSheet.absoluteFillObject,
      backgroundColor: "transparent"
    },
    pointerEvents: "box-none"
  }, renderHeader ? renderHeader() : null, /*#__PURE__*/React.createElement(View, {
    style: {
      flex: 1,
      backgroundColor: "transparent",
      zIndex: -1
    },
    pointerEvents: "box-none"
  }), showsMyLocationButton ? /*#__PURE__*/React.createElement(View, {
    style: {
      flexDirection: "row",
      justifyContent: "flex-end"
    }
  }, /*#__PURE__*/React.createElement(TouchableOpacity, {
    style: {
      backgroundColor: colors.white,
      marginRight: 16,
      marginBottom: 32,
      padding: 5
    },
    onPress: () => handleUserLocationRequest()
  }, /*#__PURE__*/React.createElement(SvgIcon, {
    icon: AccountIcon,
    size: 24
  }))) : null, region ? /*#__PURE__*/React.createElement(View, {
    style: {
      backgroundColor: colors.white,
      padding: 16,
      shadowColor: colors.black,
      shadowOffset: {
        width: 0,
        height: 4
      },
      shadowOpacity: 0.32,
      shadowRadius: 5.46,
      elevation: 12
    },
    pointerEvents: "box-none"
  }, /*#__PURE__*/React.createElement(Button, {
    onPress: handleConfirmPress
  }, confirmText)) : null));
};

export default AddressMap;
AddressMap.defaultProps = defaultProps;
const styles = StyleSheet.create({
  container: {
    flex: 1
  }
});
//# sourceMappingURL=AddressMap.js.map