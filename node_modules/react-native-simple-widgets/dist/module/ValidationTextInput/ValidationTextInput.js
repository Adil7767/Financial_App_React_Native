function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from "react";
import TextInput from "react-native-simple-elements/components/TextInput";
import HelperText from "react-native-simple-elements/components/HelperText";
import MaskInput from "../MaskInput";
const defaultProps = {
  secureTextEntry: false,
  masked: false
};

const ValidationTextInput = props => {
  const {
    label,
    value,
    onChange,
    placeholder,
    errorMessage,
    secureTextEntry,
    masked,
    mask,
    ...rest
  } = props;
  return /*#__PURE__*/React.createElement(React.Fragment, null, masked ? /*#__PURE__*/React.createElement(MaskInput, _extends({
    label: label,
    value: value,
    onChangeText: onChange,
    secureTextEntry: secureTextEntry,
    placeholder: placeholder,
    mask: mask
  }, rest)) : null, !masked ? /*#__PURE__*/React.createElement(TextInput, _extends({
    label: label,
    value: value,
    onChangeText: onChange,
    secureTextEntry: secureTextEntry,
    placeholder: placeholder
  }, rest)) : null, /*#__PURE__*/React.createElement(HelperText, {
    type: "error",
    visible: !!errorMessage
  }, errorMessage));
};

ValidationTextInput.defaultProps = defaultProps;
export default ValidationTextInput;
//# sourceMappingURL=ValidationTextInput.js.map