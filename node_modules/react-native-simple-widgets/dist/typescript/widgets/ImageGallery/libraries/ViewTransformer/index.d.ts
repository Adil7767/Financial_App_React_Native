import * as React from "react";
import { Animated } from "react-native";
import { Rect, Transform, getTransform } from "./TransformUtils";
declare type Props = {
    enableTransform?: boolean;
    enableScale?: boolean;
    enableTranslate?: boolean;
    maxOverScrollDistance?: number;
    maxScale?: number;
    contentAspectRatio?: number;
    enableResistance?: boolean;
    onViewTransformed?: (evt?: any) => void;
    onTransformGestureReleased?: (evt?: any) => void;
    onSingleTapConfirmed?: (evt?: any) => void;
    onLayout?: (evt?: any) => void;
    onTransformStart?: (evt?: any) => void;
    children?: React.ReactNode;
};
declare type State = {
    scale?: number;
    translateX?: number;
    translateY?: number;
    animator?: Animated.Value;
    width?: number;
    height?: number;
    pageX?: number;
    pageY?: number;
    responderGranted?: boolean;
};
export default class ViewTransformer extends React.Component<Props, State> {
    static Rect: typeof Rect;
    static getTransform: typeof getTransform;
    static defaultProps: {
        maxOverScrollDistance: number;
        enableScale: boolean;
        enableTranslate: boolean;
        enableTransform: boolean;
        maxScale: number;
        enableResistance: boolean;
    };
    state: State;
    _viewPortRect: any;
    scroller: any;
    gestureResponder: any;
    innerViewRef: any;
    constructor(props: any);
    viewPortRect(): any;
    contentRect(): any;
    transformedContentRect(): any;
    currentTransform(): Transform;
    UNSAFE_componentWillMount(): void;
    componentDidUpdate(prevProps: any, prevState: any): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    onLayout(e: any): void;
    measureLayout(): void;
    onResponderGrant(evt: any, gestureState: any): void;
    onResponderMove(evt: any, gestureState: any): boolean;
    onResponderRelease(evt: any, gestureState: any): void;
    performFling(vx: any, vy: any): void;
    performDoubleTapUp(pivotX: any, pivotY: any): void;
    applyResistance(dx: any, dy: any): {
        dx: any;
        dy: any;
    };
    cancelAnimation(): void;
    animate(targetRect: any, durationInMillis?: any): void;
    animateBounce(): void;
    updateTransform(transform: any): void;
    forceUpdateTransform(transform: any): void;
    getAvailableTranslateSpace(): {
        left: number;
        right: number;
        top: number;
        bottom: number;
    };
}
export {};
