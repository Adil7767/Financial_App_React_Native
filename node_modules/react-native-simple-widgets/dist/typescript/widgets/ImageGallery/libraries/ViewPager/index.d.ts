import * as React from "react";
import { View, FlatList, StyleProp, ViewStyle } from "react-native";
import Scroller from "../Scroller";
declare type PageDataProps = {};
declare type Props = React.ComponentProps<typeof View> & {
    initialPage?: number;
    pageMargin?: number;
    scrollViewStyle?: StyleProp<ViewStyle>;
    scrollEnabled?: boolean;
    renderPage?: (props?: any, index?: any) => React.ReactNode;
    pageDataArray?: PageDataProps[];
    initialListSize?: number;
    removeClippedSubviews?: boolean;
    onPageSelected?: (evt?: any) => void;
    onPageScrollStateChanged?: (evt?: any) => void;
    onPageScroll?: (evt?: any) => void;
    flatListProps?: React.ComponentProps<typeof FlatList>;
};
export default class ViewPager extends React.PureComponent<Props> {
    static defaultProps: {
        initialPage: number;
        pageMargin: number;
        scrollEnabled: boolean;
        pageDataArray: any[];
        initialListSize: number;
        removeClippedSubviews: boolean;
        flatListProps: {};
    };
    currentPage: any;
    layoutChanged: boolean;
    activeGesture: boolean;
    gestureResponder: any;
    state: {
        width: number;
        height: number;
    };
    scroller: any;
    flatlistRef: any;
    constructor(props: any);
    createScroller(): Scroller;
    UNSAFE_componentWillMount(): void;
    componentDidMount(): void;
    componentDidUpdate(prevProps: any): void;
    onLayout(e: any): void;
    onResponderGrant(evt: any, gestureState: any): void;
    onResponderMove(evt: any, gestureState: any): void;
    onResponderRelease(evt: any, gestureState: any, disableSettle: any): void;
    onPageChanged(page: any): void;
    onPageScrollStateChanged(state: any): void;
    settlePage(vx: any): void;
    getScrollOffsetOfPage(page: any): number;
    flingToPage(page: any, velocityX: any): void;
    scrollToPage(page: any, immediate?: any): void;
    scrollByOffset(dx: any): void;
    validPage(page: any): any;
    getScrollOffsetFromCurrentPage(): number;
    getItemLayout(data: any, index: any): {
        length: number;
        offset: number;
        index: any;
    };
    keyExtractor(item: any, index: any): any;
    renderRow({ item, index }: {
        item: any;
        index: any;
    }): JSX.Element;
    render(): JSX.Element;
}
export {};
