/**
 * Inspired by Android Scroller
 */
export default class Scroller {
    mCurrX: any;
    mCurrY: any;
    mFinished: any;
    mInterpolator: any;
    mPpi: any;
    mDeceleration: any;
    mFlywheel: any;
    mPhysicalCoeff: any;
    mFlingFriction: any;
    onScrollCallback: any;
    mMode: any;
    mCurrVelocity: any;
    mVelocity: any;
    mStartTime: any;
    mDuration: any;
    mDurationReciprocal: any;
    mStartX: any;
    mStartY: any;
    mDeltaX: any;
    mDeltaY: any;
    mDistance: any;
    mFinalX: any;
    mFinalY: any;
    mMinX: any;
    mMaxX: any;
    mMaxY: any;
    mMinY: any;
    mLastX: any;
    mLastY: any;
    /**
     *
     * @param flywheel specify whether or not to support progressive "flywheel" behavior in flinging.
     */
    constructor(flywheel: any, onScrollCallback: any);
    computeDeceleration(friction: any): number;
    /**
     * Returns whether the scroller has finished scrolling.
     * @returns {Boolean} True if the scroller has finished scrolling, false otherwise.
     */
    isFinished(): any;
    /**
     * Force the finished field to a particular value.
     * @param finished The new finished value.
     */
    forceFinished(finished: any): void;
    /**
     * Returns the current X offset in the scroll.
     * @returns {*} The new X offset as an absolute distance from the origin.
     */
    getCurrX(): any;
    /**
     * Returns the current Y offset in the scroll.
     * @returns {*} The new Y offset as an absolute distance from the origin.
     */
    getCurrY(): any;
    getCurrVelocity(): any;
    computeScrollOffset(): boolean;
    startScroll(startX: any, startY: any, dx: any, dy: any, duration?: number): void;
    /**
     * Start scrolling based on a fling gesture. The distance travelled will
     * depend on the initial velocity of the fling.
     * @param startX
     * @param startY
     * @param velocityX Initial velocity of the fling (X) measured in dp or pt per second
     * @param velocityY Initial velocity of the fling (Y) measured in dp or pt per second
     * @param minX
     * @param maxX
     * @param minY
     * @param maxY
     */
    fling(startX: any, startY: any, velocityX: any, velocityY: any, minX: any, maxX: any, minY: any, maxY: any): void;
    getSplineDeceleration(velocity: any): number;
    getSplineFlingDuration(velocity: any): number;
    getSplineFlingDistance(velocity: any): number;
    performAnimation(): void;
    abortAnimation(): void;
    extendDuration(extend: any): void;
    timePassed(): number;
    setFinalX(newX: any): void;
    setFinalY(newY: any): void;
    debugInfo(): string;
}
