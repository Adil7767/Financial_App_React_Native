import * as React from "react";
import { FlatList, StyleProp, View, ViewStyle } from "react-native";
declare type ImageObjProps = {};
declare type Props = React.ComponentProps<typeof View> & {
    images?: ImageObjProps[];
    initialPage?: number;
    scrollViewStyle?: StyleProp<ViewStyle>;
    pageMargin?: number;
    onPageSelected?: (evt?: any) => void;
    onPageScrollStateChanged?: (evt?: any) => void;
    onPageScroll?: (evt?: any) => void;
    onSingleTapConfirmed?: (evt?: any) => void;
    onGalleryStateChanged?: (evt?: any) => void;
    onLongPress?: (evt?: any) => void;
    onViewTransformed?: (evt?: any, pageId?: any) => void;
    onTransformGestureReleased?: (evt?: any, pageId?: any) => void;
    removeClippedSubviews?: boolean;
    imageComponent?: (props?: any) => React.ReactNode;
    errorComponent?: (props?: any) => React.ReactNode;
    flatListProps?: React.ComponentProps<typeof FlatList>;
};
export default class Gallery extends React.PureComponent<Props> {
    static defaultProps: {
        removeClippedSubviews: boolean;
        imageComponent: any;
        scrollViewStyle: {};
        flatListProps: {
            windowSize: number;
        };
    };
    imageRefs: Map<any, any>;
    activeResponder: any;
    firstMove: boolean;
    currentPage: number;
    pageCount: number;
    gestureResponder: any;
    imageResponder: any;
    viewPagerResponder: any;
    _longPressTimeout: any;
    _isMounted: boolean;
    galleryViewPager: any;
    constructor(props: any);
    UNSAFE_componentWillMount(): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    shouldScrollViewPager(evt: any, gestureState: any): boolean;
    activeImageResponder(evt: any, gestureState: any): void;
    activeViewPagerResponder(evt: any, gestureState: any): void;
    getImageTransformer(page: any): any;
    getCurrentImageTransformer(): any;
    getViewPagerInstance(): any;
    onPageSelected(page: any): void;
    onPageScrollStateChanged(state: any): void;
    renderPage(pageData: any, pageId: any): JSX.Element;
    resetHistoryImageTransform(): void;
    render(): JSX.Element;
}
export {};
