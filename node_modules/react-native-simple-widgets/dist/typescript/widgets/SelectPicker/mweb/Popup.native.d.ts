import * as React from "react";
declare const _default: {
    new (props: any): {
        picker: any;
        UNSAFE_componentWillReceiveProps(nextProps: any): void;
        onPickerChange: (pickerValue: any) => void;
        saveRef: (picker: any) => void;
        setVisibleState(visible: any): void;
        fireVisibleChange(visible: any): void;
        getRender(): any;
        onTriggerClick: (e: any) => void;
        onOk: () => void;
        getContent: () => string | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)> | React.FunctionComponentElement<{
            [x: string]: any;
            ref: (picker: any) => void;
        }>;
        onDismiss: () => void;
        hide: () => void;
        render(): any;
        context: any;
        setState<K extends string | number | symbol>(state: any, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<import("./PopupPickerTypes").IPopupPickerProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<any>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<import("./PopupPickerTypes").IPopupPickerProps>, nextState: Readonly<any>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<import("./PopupPickerTypes").IPopupPickerProps>, prevState: Readonly<any>): any;
        componentDidUpdate?(prevProps: Readonly<import("./PopupPickerTypes").IPopupPickerProps>, prevState: Readonly<any>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<import("./PopupPickerTypes").IPopupPickerProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<import("./PopupPickerTypes").IPopupPickerProps>, nextState: Readonly<any>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<import("./PopupPickerTypes").IPopupPickerProps>, nextState: Readonly<any>, nextContext: any): void;
    };
    defaultProps: any;
    contextType?: React.Context<any>;
};
export default _default;
