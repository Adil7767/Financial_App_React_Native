import React from "react";
import { FlatListProps } from "react-native";
import { SwiperFlatListRefProps } from "./SwiperFlatListProps";
export declare const SwiperFlatList: React.ForwardRefExoticComponent<Partial<FlatListProps<any>> & {
    children?: string | number | boolean | {} | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)> | React.ReactNodeArray | React.ReactPortal | React.ReactNode[];
    data?: any[];
    vertical?: boolean;
    index?: number;
    renderAll?: boolean;
    renderItem?: import("react-native").ListRenderItem<any>;
    onChangeIndex?: (item: {
        index: number;
        prevIndex: number;
    }) => void;
    disableGesture?: boolean;
    e2eID?: string;
    autoplayDelay?: number;
    autoplay?: boolean;
    autoplayInvertDirection?: boolean;
    autoplayLoop?: boolean;
    autoplayLoopKeepAnimation?: boolean;
    onMomentumScrollEnd?: (item: {
        index: number;
    }, event: any) => void;
    onViewableItemsChanged?: (info: {
        viewableItems: import("react-native").ViewToken[];
        changed: import("react-native").ViewToken[];
    }) => void;
    viewabilityConfig?: import("react-native").ViewabilityConfig;
    showPagination?: boolean;
    PaginationComponent?: React.FC<import("..").PaginationProps>;
} & Pick<import("..").PaginationProps, "paginationDefaultColor" | "paginationActiveColor" | "paginationStyle" | "paginationStyleItem" | "paginationStyleItemActive" | "paginationStyleItemInactive" | "onPaginationSelectedIndex"> & React.RefAttributes<SwiperFlatListRefProps>>;
declare type Handle<T> = T extends React.ForwardRefExoticComponent<React.RefAttributes<infer T2>> ? T2 : never;
export declare type SwiperFlatList = Handle<typeof SwiperFlatList>;
export {};
