import * as React from "react";
import DefaultMarker from "./DefaultMarker";
import DefaultLabel from "./DefaultLabel";
declare type Props = {
    min?: number;
    max?: number;
    step?: number;
    minMarkerOverlapDistance?: number;
    minMarkerOverlapStepDistance?: number;
    stepsAs?: any[];
    enabledOne?: boolean;
    enabledTwo?: boolean;
    sliderLength?: number;
    markerSize?: number;
    vertical?: boolean;
    allowOverlap?: boolean;
    onValuesChange?: (evt?: any) => void;
    onValuesChangeStart?: (evt?: any) => void;
    onValuesChangeFinish?: (evt?: any) => void;
    onMarkersPosition?: (evt?: any) => void;
    onToggleOne?: (evt?: any) => void;
    onToggleTwo?: (evt?: any) => void;
    snapped?: boolean;
    smoothSnapped?: boolean;
    markerStyle?: any;
    containerStyle?: any;
    markerContainerStyle?: any;
    pressedMarkerStyle?: any;
    disabledMarkerStyle?: any;
    selectedStyle?: any;
    unselectedStyle?: any;
    stepLabelStyle?: any;
    trackStyle?: any;
    stepStyle?: any;
    stepMarkerStyle?: any;
    imageBackgroundSource?: any;
    touchDimensions?: any;
    optionsArray?: any[];
    customMarker?: React.ReactNode;
    customMarkerLeft?: React.ReactNode;
    customMarkerRight?: React.ReactNode;
    customLabel?: React.ReactNode;
    isMarkersSeparated?: boolean;
    showSteps?: boolean;
    showStepMarkers?: boolean;
    showStepLabels?: boolean;
    values?: number[];
    markerOffsetX?: number;
    markerOffsetY?: number;
    valuePrefix?: number;
    valueSuffix?: number;
    testID?: string;
    enableLabel?: boolean;
};
declare type State = {
    onePressed?: boolean;
    twoPressed?: boolean;
    valueOne?: number;
    valueTwo?: number;
    positionOne?: number;
    positionTwo?: number;
    pastOne?: number;
    pastTwo?: number;
    pressedOne?: boolean;
};
export default class MultiSlider extends React.Component<Props, State> {
    static defaultProps: {
        values: number[];
        onValuesChangeStart: (values: any) => void;
        onValuesChange: (values: any) => void;
        onValuesChangeFinish: (values: any) => void;
        onMarkersPosition: (values: any) => void;
        step: number;
        min: number;
        max: number;
        touchDimensions: {
            height: number;
            width: number;
            borderRadius: number;
            slipDisplacement: number;
        };
        customMarker: typeof DefaultMarker;
        customMarkerLeft: typeof DefaultMarker;
        customMarkerRight: typeof DefaultMarker;
        customLabel: typeof DefaultLabel;
        markerOffsetX: number;
        markerOffsetY: number;
        markerSize: number;
        sliderLength: number;
        onToggleOne: any;
        onToggleTwo: any;
        stepsAs: any[];
        showSteps: boolean;
        showStepMarkers: boolean;
        showStepLabels: boolean;
        enabledOne: boolean;
        enabledTwo: boolean;
        allowOverlap: boolean;
        snapped: boolean;
        smoothSnapped: boolean;
        vertical: boolean;
        minMarkerOverlapDistance: number;
        minMarkerOverlapStepDistance: number;
        testID: string;
    };
    state: State;
    stepsAs: any;
    _panResponderBetween: any;
    _panResponderOne: any;
    _panResponderTwo: any;
    optionsArray: any;
    stepLength: any;
    _markerOne: any;
    _markerTwo: any;
    constructor(props: any);
    subscribePanResponder: () => void;
    startOne: (evt?: any) => void;
    startTwo: (evt?: any) => void;
    moveOne: (gestureState: any) => void;
    moveTwo: (gestureState: any) => void;
    endOne: (gestureState: any) => void;
    endTwo: (gestureState: any) => void;
    componentDidUpdate(prevProps: any, prevState: any): void;
    getSteps(): any;
    render(): JSX.Element;
}
export {};
