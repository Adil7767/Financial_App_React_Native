"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var redux_1 = require("redux");
var themeReducer_1 = require("./themeReducer");
var themeEnhancer_1 = require("./themeEnhancer");
function withTheme(createTheme, reducer, enhancer) {
    if (reducer === void 0) { reducer = themeReducer_1.default; }
    if (enhancer === void 0) { enhancer = themeEnhancer_1.default(); }
    return function createComponent(BaseComponent) {
        var WrappedComponent = (function (_super) {
            __extends(WrappedComponent, _super);
            function WrappedComponent() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            WrappedComponent.prototype.render = function () {
                return React.createElement(BaseComponent, __assign({}, this.props, { theme: this.theme }));
            };
            WrappedComponent.prototype.componentWillMount = function () {
                var state = typeof createTheme === 'function'
                    ? createTheme(this.props)
                    : createTheme;
                this.theme = redux_1.createStore(reducer, state, enhancer);
            };
            WrappedComponent.prototype.componentWillReceiveProps = function (nextProps) {
                if (typeof createTheme === 'function') {
                    this.theme.setThemeState(createTheme(nextProps));
                }
            };
            WrappedComponent.prototype.componentWillUnmount = function () {
                this.theme = null;
            };
            return WrappedComponent;
        }(React.PureComponent));
        WrappedComponent.displayName = "withTheme(" + (BaseComponent.displayName || 'Component') + ")";
        return WrappedComponent;
    };
}
exports.default = withTheme;
//# sourceMappingURL=withTheme.js.map